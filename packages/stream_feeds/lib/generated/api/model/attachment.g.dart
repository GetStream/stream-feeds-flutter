// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Attachment {
  const Attachment({
    this.actions,
    this.assetUrl,
    this.authorIcon,
    this.authorLink,
    this.authorName,
    this.color,
    required this.custom,
    this.fallback,
    this.fields,
    this.footer,
    this.footerIcon,
    this.giphy,
    this.imageUrl,
    this.ogScrapeUrl,
    this.originalHeight,
    this.originalWidth,
    this.pretext,
    this.text,
    this.thumbUrl,
    this.title,
    this.titleLink,
    this.type,
  });

  final List<Action>? actions;

  final String? assetUrl;

  final String? authorIcon;

  final String? authorLink;

  final String? authorName;

  final String? color;

  final Map<String, Object> custom;

  final String? fallback;

  final List<Field>? fields;

  final String? footer;

  final String? footerIcon;

  final Images? giphy;

  final String? imageUrl;

  final String? ogScrapeUrl;

  final int? originalHeight;

  final int? originalWidth;

  final String? pretext;

  final String? text;

  final String? thumbUrl;

  final String? title;

  final String? titleLink;

  final String? type;

  Map<String, dynamic> toJson() {
    return {
      'actions': actions,
      'asset_url': assetUrl,
      'author_icon': authorIcon,
      'author_link': authorLink,
      'author_name': authorName,
      'color': color,
      'custom': custom,
      'fallback': fallback,
      'fields': fields,
      'footer': footer,
      'footer_icon': footerIcon,
      'giphy': giphy,
      'image_url': imageUrl,
      'og_scrape_url': ogScrapeUrl,
      'original_height': originalHeight,
      'original_width': originalWidth,
      'pretext': pretext,
      'text': text,
      'thumb_url': thumbUrl,
      'title': title,
      'title_link': titleLink,
      'type': type,
    };
  }

  static Attachment? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Attachment(
        actions: Action.listFromJson(json[r'actions']),
        assetUrl: mapValueOfType<String>(json, r'asset_url', null),
        authorIcon: mapValueOfType<String>(json, r'author_icon', null),
        authorLink: mapValueOfType<String>(json, r'author_link', null),
        authorName: mapValueOfType<String>(json, r'author_name', null),
        color: mapValueOfType<String>(json, r'color', null),
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        fallback: mapValueOfType<String>(json, r'fallback', null),
        fields: Field.listFromJson(json[r'fields']),
        footer: mapValueOfType<String>(json, r'footer', null),
        footerIcon: mapValueOfType<String>(json, r'footer_icon', null),
        giphy: Images.fromJson(json[r'giphy'] ?? null),
        imageUrl: mapValueOfType<String>(json, r'image_url', null),
        ogScrapeUrl: mapValueOfType<String>(json, r'og_scrape_url', null),
        originalHeight: mapValueOfType<int>(json, r'original_height', null),
        originalWidth: mapValueOfType<int>(json, r'original_width', null),
        pretext: mapValueOfType<String>(json, r'pretext', null),
        text: mapValueOfType<String>(json, r'text', null),
        thumbUrl: mapValueOfType<String>(json, r'thumb_url', null),
        title: mapValueOfType<String>(json, r'title', null),
        titleLink: mapValueOfType<String>(json, r'title_link', null),
        type: mapValueOfType<String>(json, r'type', null),
      );
    }
    return null;
  }

  static List<Attachment> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Attachment>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Attachment.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Attachment('
        'actions: $actions, '
        'assetUrl: $assetUrl, '
        'authorIcon: $authorIcon, '
        'authorLink: $authorLink, '
        'authorName: $authorName, '
        'color: $color, '
        'custom: $custom, '
        'fallback: $fallback, '
        'fields: $fields, '
        'footer: $footer, '
        'footerIcon: $footerIcon, '
        'giphy: $giphy, '
        'imageUrl: $imageUrl, '
        'ogScrapeUrl: $ogScrapeUrl, '
        'originalHeight: $originalHeight, '
        'originalWidth: $originalWidth, '
        'pretext: $pretext, '
        'text: $text, '
        'thumbUrl: $thumbUrl, '
        'title: $title, '
        'titleLink: $titleLink, '
        'type: $type, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Attachment &&
        other.actions == actions &&
        other.assetUrl == assetUrl &&
        other.authorIcon == authorIcon &&
        other.authorLink == authorLink &&
        other.authorName == authorName &&
        other.color == color &&
        other.custom == custom &&
        other.fallback == fallback &&
        other.fields == fields &&
        other.footer == footer &&
        other.footerIcon == footerIcon &&
        other.giphy == giphy &&
        other.imageUrl == imageUrl &&
        other.ogScrapeUrl == ogScrapeUrl &&
        other.originalHeight == originalHeight &&
        other.originalWidth == originalWidth &&
        other.pretext == pretext &&
        other.text == text &&
        other.thumbUrl == thumbUrl &&
        other.title == title &&
        other.titleLink == titleLink &&
        other.type == type;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      actions,
      assetUrl,
      authorIcon,
      authorLink,
      authorName,
      color,
      custom,
      fallback,
      fields,
      footer,
      footerIcon,
      giphy,
      imageUrl,
      ogScrapeUrl,
      originalHeight,
      originalWidth,
      pretext,
      text,
      thumbUrl,
      title,
      titleLink,
      type,
    ]);
  }
}
