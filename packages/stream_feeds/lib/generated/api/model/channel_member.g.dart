// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum ChannelMemberRoleEnum {
  admin('admin'),
  member('member'),
  moderator('moderator'),
  owner('owner'),
  unknown('_unknown');

  const ChannelMemberRoleEnum(this.value);
  final String value;

  static ChannelMemberRoleEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'admin':
        return ChannelMemberRoleEnum.admin;
      case 'member':
        return ChannelMemberRoleEnum.member;
      case 'moderator':
        return ChannelMemberRoleEnum.moderator;
      case 'owner':
        return ChannelMemberRoleEnum.owner;
      default:
        return ChannelMemberRoleEnum.unknown;
    }
  }
}

@immutable
class ChannelMember {
  const ChannelMember({
    this.archivedAt,
    this.banExpires,
    required this.banned,
    required this.channelRole,
    required this.createdAt,
    required this.custom,
    this.deletedAt,
    this.inviteAcceptedAt,
    this.inviteRejectedAt,
    this.invited,
    this.isModerator,
    required this.notificationsMuted,
    this.pinnedAt,
    this.role,
    required this.shadowBanned,
    this.status,
    required this.updatedAt,
    this.user,
    this.userId,
  });

  final DateTime? archivedAt;

  final DateTime? banExpires;

  final bool banned;

  final String channelRole;

  final DateTime createdAt;

  final Map<String, Object> custom;

  final DateTime? deletedAt;

  final DateTime? inviteAcceptedAt;

  final DateTime? inviteRejectedAt;

  final bool? invited;

  final bool? isModerator;

  final bool notificationsMuted;

  final DateTime? pinnedAt;

  final ChannelMemberRoleEnum? role;

  final bool shadowBanned;

  final String? status;

  final DateTime updatedAt;

  final UserResponse? user;

  final String? userId;

  Map<String, dynamic> toJson() {
    return {
      'archived_at': archivedAt,
      'ban_expires': banExpires,
      'banned': banned,
      'channel_role': channelRole,
      'created_at': createdAt,
      'custom': custom,
      'deleted_at': deletedAt,
      'invite_accepted_at': inviteAcceptedAt,
      'invite_rejected_at': inviteRejectedAt,
      'invited': invited,
      'is_moderator': isModerator,
      'notifications_muted': notificationsMuted,
      'pinned_at': pinnedAt,
      'role': role,
      'shadow_banned': shadowBanned,
      'status': status,
      'updated_at': updatedAt,
      'user': user,
      'user_id': userId,
    };
  }

  static ChannelMember? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ChannelMember(
        archivedAt: mapValueOfType<DateTime>(json, r'archived_at', null),
        banExpires: mapValueOfType<DateTime>(json, r'ban_expires', null),
        banned: mapValueOfType<bool>(json, r'banned')!,
        channelRole: mapValueOfType<String>(json, r'channel_role')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        deletedAt: mapValueOfType<DateTime>(json, r'deleted_at', null),
        inviteAcceptedAt:
            mapValueOfType<DateTime>(json, r'invite_accepted_at', null),
        inviteRejectedAt:
            mapValueOfType<DateTime>(json, r'invite_rejected_at', null),
        invited: mapValueOfType<bool>(json, r'invited', null),
        isModerator: mapValueOfType<bool>(json, r'is_moderator', null),
        notificationsMuted: mapValueOfType<bool>(json, r'notifications_muted')!,
        pinnedAt: mapValueOfType<DateTime>(json, r'pinned_at', null),
        role: ChannelMemberRoleEnum.fromValue(json['role']),
        shadowBanned: mapValueOfType<bool>(json, r'shadow_banned')!,
        status: mapValueOfType<String>(json, r'status', null),
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: UserResponse.fromJson(json[r'user'] ?? null),
        userId: mapValueOfType<String>(json, r'user_id', null),
      );
    }
    return null;
  }

  static List<ChannelMember> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ChannelMember>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ChannelMember.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ChannelMember('
        'archivedAt: $archivedAt, '
        'banExpires: $banExpires, '
        'banned: $banned, '
        'channelRole: $channelRole, '
        'createdAt: $createdAt, '
        'custom: $custom, '
        'deletedAt: $deletedAt, '
        'inviteAcceptedAt: $inviteAcceptedAt, '
        'inviteRejectedAt: $inviteRejectedAt, '
        'invited: $invited, '
        'isModerator: $isModerator, '
        'notificationsMuted: $notificationsMuted, '
        'pinnedAt: $pinnedAt, '
        'role: $role, '
        'shadowBanned: $shadowBanned, '
        'status: $status, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ChannelMember &&
        other.archivedAt == archivedAt &&
        other.banExpires == banExpires &&
        other.banned == banned &&
        other.channelRole == channelRole &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.deletedAt == deletedAt &&
        other.inviteAcceptedAt == inviteAcceptedAt &&
        other.inviteRejectedAt == inviteRejectedAt &&
        other.invited == invited &&
        other.isModerator == isModerator &&
        other.notificationsMuted == notificationsMuted &&
        other.pinnedAt == pinnedAt &&
        other.role == role &&
        other.shadowBanned == shadowBanned &&
        other.status == status &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      archivedAt,
      banExpires,
      banned,
      channelRole,
      createdAt,
      custom,
      deletedAt,
      inviteAcceptedAt,
      inviteRejectedAt,
      invited,
      isModerator,
      notificationsMuted,
      pinnedAt,
      role,
      shadowBanned,
      status,
      updatedAt,
      user,
      userId,
    ]);
  }
}
