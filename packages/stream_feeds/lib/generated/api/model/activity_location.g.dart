// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ActivityLocation {
  const ActivityLocation({
    required this.lat,
    required this.lng,
  });

  final num lat;

  final num lng;

  Map<String, dynamic> toJson() {
    return {
      'lat': lat,
      'lng': lng,
    };
  }

  static ActivityLocation? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ActivityLocation(
        lat: mapValueOfType<num>(json, r'lat')!,
        lng: mapValueOfType<num>(json, r'lng')!,
      );
    }
    return null;
  }

  static List<ActivityLocation> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ActivityLocation>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ActivityLocation.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ActivityLocation('
        'lat: $lat, '
        'lng: $lng, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ActivityLocation && other.lat == lat && other.lng == lng;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      lat,
      lng,
    ]);
  }
}
