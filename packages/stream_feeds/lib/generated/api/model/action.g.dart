// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Action {
  const Action({
    required this.name,
    this.style,
    required this.text,
    required this.type,
    this.value,
  });

  final String name;

  final String? style;

  final String text;

  final String type;

  final String? value;

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'style': style,
      'text': text,
      'type': type,
      'value': value,
    };
  }

  static Action? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Action(
        name: mapValueOfType<String>(json, r'name')!,
        style: mapValueOfType<String>(json, r'style', null),
        text: mapValueOfType<String>(json, r'text')!,
        type: mapValueOfType<String>(json, r'type')!,
        value: mapValueOfType<String>(json, r'value', null),
      );
    }
    return null;
  }

  static List<Action> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Action>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Action.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Action('
        'name: $name, '
        'style: $style, '
        'text: $text, '
        'type: $type, '
        'value: $value, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Action &&
        other.name == name &&
        other.style == style &&
        other.text == text &&
        other.type == type &&
        other.value == value;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      style,
      text,
      type,
      value,
    ]);
  }
}
