// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum StoriesConfigExpirationBehaviourEnum {
  hideForEveryone('hide_for_everyone'),
  visibleForAuthor('visible_for_author'),
  unknown('_unknown');

  const StoriesConfigExpirationBehaviourEnum(this.value);
  final String value;

  static StoriesConfigExpirationBehaviourEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'hide_for_everyone':
        return StoriesConfigExpirationBehaviourEnum.hideForEveryone;
      case 'visible_for_author':
        return StoriesConfigExpirationBehaviourEnum.visibleForAuthor;
      default:
        return StoriesConfigExpirationBehaviourEnum.unknown;
    }
  }
}

@immutable
class StoriesConfig {
  const StoriesConfig({
    this.expirationBehaviour,
    this.skipWatched,
  });

  final StoriesConfigExpirationBehaviourEnum? expirationBehaviour;

  final bool? skipWatched;

  Map<String, dynamic> toJson() {
    return {
      'expiration_behaviour': expirationBehaviour,
      'skip_watched': skipWatched,
    };
  }

  static StoriesConfig? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return StoriesConfig(
        expirationBehaviour: StoriesConfigExpirationBehaviourEnum.fromValue(
            json['expiration_behaviour']),
        skipWatched: mapValueOfType<bool>(json, r'skip_watched', null),
      );
    }
    return null;
  }

  static List<StoriesConfig> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <StoriesConfig>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = StoriesConfig.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'StoriesConfig('
        'expirationBehaviour: $expirationBehaviour, '
        'skipWatched: $skipWatched, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is StoriesConfig &&
        other.expirationBehaviour == expirationBehaviour &&
        other.skipWatched == skipWatched;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      expirationBehaviour,
      skipWatched,
    ]);
  }
}
