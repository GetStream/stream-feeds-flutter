// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Field {
  const Field({
    required this.short,
    required this.title,
    required this.value,
  });

  final bool short;

  final String title;

  final String value;

  Map<String, dynamic> toJson() {
    return {
      'short': short,
      'title': title,
      'value': value,
    };
  }

  static Field? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Field(
        short: mapValueOfType<bool>(json, r'short')!,
        title: mapValueOfType<String>(json, r'title')!,
        value: mapValueOfType<String>(json, r'value')!,
      );
    }
    return null;
  }

  static List<Field> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Field>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Field.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Field('
        'short: $short, '
        'title: $title, '
        'value: $value, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Field &&
        other.short == short &&
        other.title == title &&
        other.value == value;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      short,
      title,
      value,
    ]);
  }
}
