// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class FeedsReactionResponse {
  const FeedsReactionResponse({
    required this.activityId,
    this.commentId,
    required this.createdAt,
    this.custom,
    required this.type,
    required this.updatedAt,
    required this.user,
  });

  final String activityId;

  final String? commentId;

  final DateTime createdAt;

  final Map<String, Object>? custom;

  final String type;

  final DateTime updatedAt;

  final UserResponse user;

  Map<String, dynamic> toJson() {
    return {
      'activity_id': activityId,
      'comment_id': commentId,
      'created_at': createdAt,
      'custom': custom,
      'type': type,
      'updated_at': updatedAt,
      'user': user,
    };
  }

  static FeedsReactionResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FeedsReactionResponse(
        activityId: mapValueOfType<String>(json, r'activity_id')!,
        commentId: mapValueOfType<String>(json, r'comment_id', null),
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom'),
        type: mapValueOfType<String>(json, r'type')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: UserResponse.fromJson(json[r'user'])!,
      );
    }
    return null;
  }

  static List<FeedsReactionResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FeedsReactionResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FeedsReactionResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FeedsReactionResponse('
        'activityId: $activityId, '
        'commentId: $commentId, '
        'createdAt: $createdAt, '
        'custom: $custom, '
        'type: $type, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FeedsReactionResponse &&
        other.activityId == activityId &&
        other.commentId == commentId &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.type == type &&
        other.updatedAt == updatedAt &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      activityId,
      commentId,
      createdAt,
      custom,
      type,
      updatedAt,
      user,
    ]);
  }
}
