// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file
// ignore_for_file: unused_import, unnecessary_import, prefer_single_quotes, require_trailing_commas, unnecessary_raw_strings, public_member_api_docs

import 'package:retrofit/retrofit.dart';
import 'package:stream_core/stream_core.dart';

import '../models.dart';

part 'default_api.g.dart';

@RestApi(callAdapter: _ResultCallAdapter)
abstract interface class DefaultApi {
  factory DefaultApi(
    Dio dio, {
    String? baseUrl,
  }) = _DefaultApi;

  @POST(
      '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept')
  Future<Result<AcceptFeedMemberInviteResponse>> acceptFeedMemberInvite({
    @Path('feed_id') required String feedId,
    @Path('feed_group_id') required String feedGroupId,
  });

  @POST('/api/v2/feeds/follows/accept')
  Future<Result<AcceptFollowResponse>> acceptFollow({
    @Body() required AcceptFollowRequest acceptFollowRequest,
  });

  @POST('/api/v2/feeds/activities/{activity_id}/feedback')
  Future<Result<ActivityFeedbackResponse>> activityFeedback({
    @Path('activity_id') required String activityId,
    @Body() ActivityFeedbackRequest? activityFeedbackRequest,
  });

  @POST('/api/v2/feeds/activities')
  Future<Result<AddActivityResponse>> addActivity({
    @Body() required AddActivityRequest addActivityRequest,
  });

  @POST('/api/v2/feeds/activities/{activity_id}/reactions')
  Future<Result<AddReactionResponse>> addActivityReaction({
    @Path('activity_id') required String activityId,
    @Body() required AddReactionRequest addReactionRequest,
  });

  @POST('/api/v2/feeds/activities/{activity_id}/bookmarks')
  Future<Result<AddBookmarkResponse>> addBookmark({
    @Path('activity_id') required String activityId,
    @Body() AddBookmarkRequest? addBookmarkRequest,
  });

  @POST('/api/v2/feeds/comments')
  Future<Result<AddCommentResponse>> addComment({
    @Body() required AddCommentRequest addCommentRequest,
  });

  @POST('/api/v2/feeds/comments/{id}/reactions')
  Future<Result<AddCommentReactionResponse>> addCommentReaction({
    @Path('id') required String id,
    @Body() required AddCommentReactionRequest addCommentReactionRequest,
  });

  @POST('/api/v2/feeds/comments/batch')
  Future<Result<AddCommentsBatchResponse>> addCommentsBatch({
    @Body() required AddCommentsBatchRequest addCommentsBatchRequest,
  });

  @POST('/api/v2/moderation/ban')
  Future<Result<BanResponse>> ban({
    @Body() required BanRequest banRequest,
  });

  @POST('/api/v2/users/block')
  Future<Result<BlockUsersResponse>> blockUsers({
    @Body() required BlockUsersRequest blockUsersRequest,
  });

  @POST('/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote')
  Future<Result<PollVoteResponse>> castPollVote({
    @Path('activity_id') required String activityId,
    @Path('poll_id') required String pollId,
    @Body() CastPollVoteRequest? castPollVoteRequest,
  });

  @POST('/api/v2/blocklists')
  Future<Result<CreateBlockListResponse>> createBlockList({
    @Body() required CreateBlockListRequest createBlockListRequest,
  });

  @POST('/api/v2/devices')
  Future<Result<DurationResponse>> createDevice({
    @Body() required CreateDeviceRequest createDeviceRequest,
  });

  @POST('/api/v2/feeds/feeds/batch')
  Future<Result<CreateFeedsBatchResponse>> createFeedsBatch({
    @Body() required CreateFeedsBatchRequest createFeedsBatchRequest,
  });

  @POST('/api/v2/guest')
  Future<Result<CreateGuestResponse>> createGuest({
    @Body() required CreateGuestRequest createGuestRequest,
  });

  @POST('/api/v2/polls')
  Future<Result<PollResponse>> createPoll({
    @Body() required CreatePollRequest createPollRequest,
  });

  @POST('/api/v2/polls/{poll_id}/options')
  Future<Result<PollOptionResponse>> createPollOption({
    @Path('poll_id') required String pollId,
    @Body() required CreatePollOptionRequest createPollOptionRequest,
  });

  @POST('/api/v2/feeds/activities/delete')
  Future<Result<DeleteActivitiesResponse>> deleteActivities({
    @Body() required DeleteActivitiesRequest deleteActivitiesRequest,
  });

  @DELETE('/api/v2/feeds/activities/{id}')
  Future<Result<DeleteActivityResponse>> deleteActivity({
    @Path('id') required String id,
    @Query('hard_delete') bool? hardDelete,
  });

  @DELETE('/api/v2/feeds/activities/{activity_id}/reactions/{type}')
  Future<Result<DeleteActivityReactionResponse>> deleteActivityReaction({
    @Path('activity_id') required String activityId,
    @Path('type') required String type,
  });

  @DELETE('/api/v2/blocklists/{name}')
  Future<Result<DurationResponse>> deleteBlockList({
    @Path('name') required String name,
    @Query('team') String? team,
  });

  @DELETE('/api/v2/feeds/activities/{activity_id}/bookmarks')
  Future<Result<DeleteBookmarkResponse>> deleteBookmark({
    @Path('activity_id') required String activityId,
    @Query('folder_id') String? folderId,
  });

  @DELETE('/api/v2/feeds/bookmark_folders/{folder_id}')
  Future<Result<DeleteBookmarkFolderResponse>> deleteBookmarkFolder({
    @Path('folder_id') required String folderId,
  });

  @DELETE('/api/v2/feeds/comments/{id}')
  Future<Result<DeleteCommentResponse>> deleteComment({
    @Path('id') required String id,
    @Query('hard_delete') bool? hardDelete,
  });

  @DELETE('/api/v2/feeds/comments/{id}/reactions/{type}')
  Future<Result<DeleteCommentReactionResponse>> deleteCommentReaction({
    @Path('id') required String id,
    @Path('type') required String type,
  });

  @DELETE('/api/v2/moderation/config/{key}')
  Future<Result<DeleteModerationConfigResponse>> deleteConfig({
    @Path('key') required String key,
    @Query('team') String? team,
  });

  @DELETE('/api/v2/devices')
  Future<Result<DurationResponse>> deleteDevice({
    @Query('id') required String id,
  });

  @DELETE('/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}')
  Future<Result<DeleteFeedResponse>> deleteFeed({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Query('hard_delete') bool? hardDelete,
  });

  @DELETE('/api/v2/uploads/file')
  Future<Result<DurationResponse>> deleteFile({
    @Query('url') String? url,
  });

  @DELETE('/api/v2/uploads/image')
  Future<Result<DurationResponse>> deleteImage({
    @Query('url') String? url,
  });

  @DELETE('/api/v2/polls/{poll_id}')
  Future<Result<DurationResponse>> deletePoll({
    @Path('poll_id') required String pollId,
    @Query('user_id') String? userId,
  });

  @DELETE('/api/v2/polls/{poll_id}/options/{option_id}')
  Future<Result<DurationResponse>> deletePollOption({
    @Path('poll_id') required String pollId,
    @Path('option_id') required String optionId,
    @Query('user_id') String? userId,
  });

  @DELETE(
      '/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}')
  Future<Result<PollVoteResponse>> deletePollVote({
    @Path('activity_id') required String activityId,
    @Path('poll_id') required String pollId,
    @Path('vote_id') required String voteId,
    @Query('user_id') String? userId,
  });

  @POST('/api/v2/moderation/flag')
  Future<Result<FlagResponse>> flag({
    @Body() required FlagRequest flagRequest,
  });

  @POST('/api/v2/feeds/follows')
  Future<Result<SingleFollowResponse>> follow({
    @Body() required FollowRequest followRequest,
  });

  @POST('/api/v2/feeds/follows/batch')
  Future<Result<FollowBatchResponse>> followBatch({
    @Body() required FollowBatchRequest followBatchRequest,
  });

  @GET('/api/v2/feeds/activities/{id}')
  Future<Result<GetActivityResponse>> getActivity({
    @Path('id') required String id,
  });

  @GET('/api/v2/app')
  Future<Result<GetApplicationResponse>> getApp();

  @GET('/api/v2/users/block')
  Future<Result<GetBlockedUsersResponse>> getBlockedUsers();

  @GET('/api/v2/feeds/comments/{id}')
  Future<Result<GetCommentResponse>> getComment({
    @Path('id') required String id,
  });

  @GET('/api/v2/feeds/comments/{id}/replies')
  Future<Result<GetCommentRepliesResponse>> getCommentReplies({
    @Path('id') required String id,
    @Query('depth') int? depth,
    @Query('sort') String? sort,
    @Query('replies_limit') int? repliesLimit,
    @Query('limit') int? limit,
    @Query('prev') String? prev,
    @Query('next') String? next,
  });

  @GET('/api/v2/feeds/comments')
  Future<Result<GetCommentsResponse>> getComments({
    @Query('object_id') required String objectId,
    @Query('object_type') required String objectType,
    @Query('depth') int? depth,
    @Query('sort') String? sort,
    @Query('replies_limit') int? repliesLimit,
    @Query('limit') int? limit,
    @Query('prev') String? prev,
    @Query('next') String? next,
  });

  @GET('/api/v2/moderation/config/{key}')
  Future<Result<GetConfigResponse>> getConfig({
    @Path('key') required String key,
    @Query('team') String? team,
  });

  @GET('/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions')
  Future<Result<GetFollowSuggestionsResponse>> getFollowSuggestions({
    @Path('feed_group_id') required String feedGroupId,
    @Query('limit') int? limit,
  });

  @GET('/api/v2/og')
  Future<Result<GetOGResponse>> getOG({
    @Query('url') required String url,
  });

  @POST('/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}')
  Future<Result<GetOrCreateFeedResponse>> getOrCreateFeed({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Body() GetOrCreateFeedRequest? getOrCreateFeedRequest,
  });

  @GET('/api/v2/polls/{poll_id}')
  Future<Result<PollResponse>> getPoll({
    @Path('poll_id') required String pollId,
    @Query('user_id') String? userId,
  });

  @GET('/api/v2/polls/{poll_id}/options/{option_id}')
  Future<Result<PollOptionResponse>> getPollOption({
    @Path('poll_id') required String pollId,
    @Path('option_id') required String optionId,
    @Query('user_id') String? userId,
  });

  @GET('/api/v2/users/live_locations')
  Future<Result<SharedLocationsResponse>> getUserLiveLocations();

  @GET('/api/v2/blocklists')
  Future<Result<ListBlockListResponse>> listBlockLists({
    @Query('team') String? team,
  });

  @GET('/api/v2/devices')
  Future<Result<ListDevicesResponse>> listDevices();

  @GET('/api/v2/longpoll')
  Future<Result<void>> longPoll({
    @Query('json') WSAuthMessage? json,
  });

  @POST(
      '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch')
  Future<Result<DurationResponse>> markActivity({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Body() MarkActivityRequest? markActivityRequest,
  });

  @POST('/api/v2/moderation/mute')
  Future<Result<MuteResponse>> mute({
    @Body() required MuteRequest muteRequest,
  });

  @POST('/api/v2/feeds/feeds/own_capabilities/batch')
  Future<Result<OwnCapabilitiesBatchResponse>> ownCapabilitiesBatch({
    @Body() required OwnCapabilitiesBatchRequest ownCapabilitiesBatchRequest,
  });

  @POST(
      '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin')
  Future<Result<PinActivityResponse>> pinActivity({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Path('activity_id') required String activityId,
  });

  @POST('/api/v2/feeds/activities/query')
  Future<Result<QueryActivitiesResponse>> queryActivities({
    @Body() QueryActivitiesRequest? queryActivitiesRequest,
  });

  @POST('/api/v2/feeds/activities/{activity_id}/reactions/query')
  Future<Result<QueryActivityReactionsResponse>> queryActivityReactions({
    @Path('activity_id') required String activityId,
    @Body() QueryActivityReactionsRequest? queryActivityReactionsRequest,
  });

  @POST('/api/v2/feeds/bookmark_folders/query')
  Future<Result<QueryBookmarkFoldersResponse>> queryBookmarkFolders({
    @Body() QueryBookmarkFoldersRequest? queryBookmarkFoldersRequest,
  });

  @POST('/api/v2/feeds/bookmarks/query')
  Future<Result<QueryBookmarksResponse>> queryBookmarks({
    @Body() QueryBookmarksRequest? queryBookmarksRequest,
  });

  @POST('/api/v2/feeds/comments/{id}/reactions/query')
  Future<Result<QueryCommentReactionsResponse>> queryCommentReactions({
    @Path('id') required String id,
    @Body() QueryCommentReactionsRequest? queryCommentReactionsRequest,
  });

  @POST('/api/v2/feeds/comments/query')
  Future<Result<QueryCommentsResponse>> queryComments({
    @Body() required QueryCommentsRequest queryCommentsRequest,
  });

  @POST(
      '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query')
  Future<Result<QueryFeedMembersResponse>> queryFeedMembers({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Body() QueryFeedMembersRequest? queryFeedMembersRequest,
  });

  @POST('/api/v2/feeds/feeds/query')
  Future<Result<QueryFeedsResponse>> queryFeeds({
    @Body() QueryFeedsRequest? queryFeedsRequest,
  });

  @POST('/api/v2/feeds/follows/query')
  Future<Result<QueryFollowsResponse>> queryFollows({
    @Body() QueryFollowsRequest? queryFollowsRequest,
  });

  @POST('/api/v2/moderation/configs')
  Future<Result<QueryModerationConfigsResponse>> queryModerationConfigs({
    @Body() QueryModerationConfigsRequest? queryModerationConfigsRequest,
  });

  @POST('/api/v2/polls/{poll_id}/votes')
  Future<Result<PollVotesResponse>> queryPollVotes({
    @Path('poll_id') required String pollId,
    @Query('user_id') String? userId,
    @Body() QueryPollVotesRequest? queryPollVotesRequest,
  });

  @POST('/api/v2/polls/query')
  Future<Result<QueryPollsResponse>> queryPolls({
    @Query('user_id') String? userId,
    @Body() QueryPollsRequest? queryPollsRequest,
  });

  @POST('/api/v2/moderation/review_queue')
  Future<Result<QueryReviewQueueResponse>> queryReviewQueue({
    @Body() QueryReviewQueueRequest? queryReviewQueueRequest,
  });

  @GET('/api/v2/users')
  Future<Result<QueryUsersResponse>> queryUsers({
    @Query('payload') QueryUsersPayload? payload,
  });

  @POST(
      '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject')
  Future<Result<RejectFeedMemberInviteResponse>> rejectFeedMemberInvite({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
  });

  @POST('/api/v2/feeds/follows/reject')
  Future<Result<RejectFollowResponse>> rejectFollow({
    @Body() required RejectFollowRequest rejectFollowRequest,
  });

  @DELETE('/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/watch')
  Future<Result<DurationResponse>> stopWatchingFeed({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
  });

  @POST('/api/v2/moderation/submit_action')
  Future<Result<SubmitActionResponse>> submitAction({
    @Body() required SubmitActionRequest submitActionRequest,
  });

  @POST('/api/v2/users/unblock')
  Future<Result<UnblockUsersResponse>> unblockUsers({
    @Body() required UnblockUsersRequest unblockUsersRequest,
  });

  @DELETE('/api/v2/feeds/follows/{source}/{target}')
  Future<Result<UnfollowResponse>> unfollow({
    @Path('source') required String source,
    @Path('target') required String target,
  });

  @DELETE(
      '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin')
  Future<Result<UnpinActivityResponse>> unpinActivity({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Path('activity_id') required String activityId,
  });

  @PUT('/api/v2/feeds/activities/{id}')
  Future<Result<UpdateActivityResponse>> updateActivity({
    @Path('id') required String id,
    @Body() UpdateActivityRequest? updateActivityRequest,
  });

  @PATCH('/api/v2/feeds/activities/{id}')
  Future<Result<UpdateActivityPartialResponse>> updateActivityPartial({
    @Path('id') required String id,
    @Body() UpdateActivityPartialRequest? updateActivityPartialRequest,
  });

  @PUT('/api/v2/blocklists/{name}')
  Future<Result<UpdateBlockListResponse>> updateBlockList({
    @Path('name') required String name,
    @Body() UpdateBlockListRequest? updateBlockListRequest,
  });

  @PATCH('/api/v2/feeds/activities/{activity_id}/bookmarks')
  Future<Result<UpdateBookmarkResponse>> updateBookmark({
    @Path('activity_id') required String activityId,
    @Body() UpdateBookmarkRequest? updateBookmarkRequest,
  });

  @PATCH('/api/v2/feeds/bookmark_folders/{folder_id}')
  Future<Result<UpdateBookmarkFolderResponse>> updateBookmarkFolder({
    @Path('folder_id') required String folderId,
    @Body() UpdateBookmarkFolderRequest? updateBookmarkFolderRequest,
  });

  @PATCH('/api/v2/feeds/comments/{id}')
  Future<Result<UpdateCommentResponse>> updateComment({
    @Path('id') required String id,
    @Body() UpdateCommentRequest? updateCommentRequest,
  });

  @PUT('/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}')
  Future<Result<UpdateFeedResponse>> updateFeed({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Body() UpdateFeedRequest? updateFeedRequest,
  });

  @PATCH('/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members')
  Future<Result<UpdateFeedMembersResponse>> updateFeedMembers({
    @Path('feed_group_id') required String feedGroupId,
    @Path('feed_id') required String feedId,
    @Body() required UpdateFeedMembersRequest updateFeedMembersRequest,
  });

  @PATCH('/api/v2/feeds/follows')
  Future<Result<UpdateFollowResponse>> updateFollow({
    @Body() required UpdateFollowRequest updateFollowRequest,
  });

  @PUT('/api/v2/users/live_locations')
  Future<Result<SharedLocationResponse>> updateLiveLocation({
    @Body() required UpdateLiveLocationRequest updateLiveLocationRequest,
  });

  @PUT('/api/v2/polls')
  Future<Result<PollResponse>> updatePoll({
    @Body() required UpdatePollRequest updatePollRequest,
  });

  @PUT('/api/v2/polls/{poll_id}/options')
  Future<Result<PollOptionResponse>> updatePollOption({
    @Path('poll_id') required String pollId,
    @Body() required UpdatePollOptionRequest updatePollOptionRequest,
  });

  @PATCH('/api/v2/polls/{poll_id}')
  Future<Result<PollResponse>> updatePollPartial({
    @Path('poll_id') required String pollId,
    @Body() UpdatePollPartialRequest? updatePollPartialRequest,
  });

  @POST('/api/v2/push_preferences')
  Future<Result<UpsertPushPreferencesResponse>>
      updatePushNotificationPreferences({
    @Body() required UpsertPushPreferencesRequest upsertPushPreferencesRequest,
  });

  @POST('/api/v2/users')
  Future<Result<UpdateUsersResponse>> updateUsers({
    @Body() required UpdateUsersRequest updateUsersRequest,
  });

  @PATCH('/api/v2/users')
  Future<Result<UpdateUsersResponse>> updateUsersPartial({
    @Body() required UpdateUsersPartialRequest updateUsersPartialRequest,
  });

  @POST('/api/v2/uploads/file')
  Future<Result<FileUploadResponse>> uploadFile({
    @Body() FileUploadRequest? fileUploadRequest,
  });

  @POST('/api/v2/uploads/image')
  Future<Result<ImageUploadResponse>> uploadImage({
    @Body() ImageUploadRequest? imageUploadRequest,
  });

  @POST('/api/v2/feeds/activities/batch')
  Future<Result<UpsertActivitiesResponse>> upsertActivities({
    @Body() required UpsertActivitiesRequest upsertActivitiesRequest,
  });

  @POST('/api/v2/moderation/config')
  Future<Result<UpsertConfigResponse>> upsertConfig({
    @Body() required UpsertConfigRequest upsertConfigRequest,
  });
}

class _ResultCallAdapter<T> extends CallAdapter<Future<T>, Future<Result<T>>> {
  @override
  Future<Result<T>> adapt(Future<T> Function() call) => runSafely(call);
}
