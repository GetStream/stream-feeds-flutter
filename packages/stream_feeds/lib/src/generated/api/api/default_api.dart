// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: public_member_api_docs

import 'package:stream_core/stream_core.dart';

import '../models.dart';

class DefaultApi {
  DefaultApi(this.apiClient);

  final CoreHttpClient apiClient;

  Future<AcceptFeedMemberInviteResponse?> acceptFeedMemberInvite({
    required String feedId,
    required String feedGroupId,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept"
            .replaceAll('{feed_id}', feedId)
            .replaceAll('{feed_group_id}', feedGroupId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AcceptFeedMemberInviteResponse.fromJson(data);
  }

  Future<AcceptFollowResponse?> acceptFollow({
    required AcceptFollowRequest acceptFollowRequest,
  }) async {
    const path = r"/api/v2/feeds/follows/accept";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: acceptFollowRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AcceptFollowResponse.fromJson(data);
  }

  Future<AddActivityResponse?> addActivity({
    required AddActivityRequest addActivityRequest,
  }) async {
    const path = r"/api/v2/feeds/activities";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: addActivityRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AddActivityResponse.fromJson(data);
  }

  Future<AddBookmarkResponse?> addBookmark({
    required String activityId,
    AddBookmarkRequest? addBookmarkRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/bookmarks"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: addBookmarkRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AddBookmarkResponse.fromJson(data);
  }

  Future<AddCommentResponse?> addComment({
    required AddCommentRequest addCommentRequest,
  }) async {
    const path = r"/api/v2/feeds/comments";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: addCommentRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AddCommentResponse.fromJson(data);
  }

  Future<AddCommentReactionResponse?> addCommentReaction({
    required String commentId,
    required AddCommentReactionRequest addCommentReactionRequest,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}/reactions"
        .replaceAll('{comment_id}', commentId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: addCommentReactionRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AddCommentReactionResponse.fromJson(data);
  }

  Future<AddCommentsBatchResponse?> addCommentsBatch({
    required AddCommentsBatchRequest addCommentsBatchRequest,
  }) async {
    const path = r"/api/v2/feeds/comments/batch";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: addCommentsBatchRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AddCommentsBatchResponse.fromJson(data);
  }

  Future<AddReactionResponse?> addReaction({
    required String activityId,
    required AddReactionRequest addReactionRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/reactions"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: addReactionRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : AddReactionResponse.fromJson(data);
  }

  Future<PollVoteResponse?> castPollVote({
    required String activityId,
    required String pollId,
    CastPollVoteRequest? castPollVoteRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote"
        .replaceAll('{activity_id}', activityId)
        .replaceAll('{poll_id}', pollId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: castPollVoteRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : PollVoteResponse.fromJson(data);
  }

  Future<CreateFeedsBatchResponse?> createFeedsBatch({
    required CreateFeedsBatchRequest createFeedsBatchRequest,
  }) async {
    const path = r"/api/v2/feeds/feeds/batch";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: createFeedsBatchRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : CreateFeedsBatchResponse.fromJson(data);
  }

  Future<DeleteActivitiesResponse?> deleteActivities({
    required DeleteActivitiesRequest deleteActivitiesRequest,
  }) async {
    const path = r"/api/v2/feeds/activities/delete";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: deleteActivitiesRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteActivitiesResponse.fromJson(data);
  }

  Future<DeleteActivityResponse?> deleteActivity({
    required String activityId,
    bool? hardDelete,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    if (hardDelete != null) {
      queryParams.addAll({'hard_delete': hardDelete});
    }

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteActivityResponse.fromJson(data);
  }

  Future<DeleteActivityReactionResponse?> deleteActivityReaction({
    required String activityId,
    required String type,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/reactions/{type}"
        .replaceAll('{activity_id}', activityId)
        .replaceAll('{type}', type);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteActivityReactionResponse.fromJson(data);
  }

  Future<DeleteBookmarkResponse?> deleteBookmark({
    required String activityId,
    String? folderId,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/bookmarks"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    if (folderId != null) {
      queryParams.addAll({'folder_id': folderId});
    }

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteBookmarkResponse.fromJson(data);
  }

  Future<DeleteBookmarkFolderResponse?> deleteBookmarkFolder({
    required String folderId,
  }) async {
    final path = r"/api/v2/feeds/bookmark_folders/{folder_id}"
        .replaceAll('{folder_id}', folderId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteBookmarkFolderResponse.fromJson(data);
  }

  Future<DeleteCommentResponse?> deleteComment({
    required String commentId,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}"
        .replaceAll('{comment_id}', commentId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteCommentResponse.fromJson(data);
  }

  Future<DeleteCommentReactionResponse?> deleteCommentReaction({
    required String commentId,
    required String type,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}/reactions/{type}"
        .replaceAll('{comment_id}', commentId)
        .replaceAll('{type}', type);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteCommentReactionResponse.fromJson(data);
  }

  Future<DeleteFeedResponse?> deleteFeed({
    required String feedGroupId,
    required String feedId,
    bool? hardDelete,
  }) async {
    final path = r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}"
        .replaceAll('{feed_group_id}', feedGroupId)
        .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    if (hardDelete != null) {
      queryParams.addAll({'hard_delete': hardDelete});
    }

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DeleteFeedResponse.fromJson(data);
  }

  Future<PollVoteResponse?> deletePollVote({
    required String activityId,
    required String pollId,
    required String voteId,
    String? userId,
  }) async {
    final path =
        r"/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}"
            .replaceAll('{activity_id}', activityId)
            .replaceAll('{poll_id}', pollId)
            .replaceAll('{vote_id}', voteId);

    final queryParams = <String, Object?>{};

    if (userId != null) {
      queryParams.addAll({'user_id': userId});
    }

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : PollVoteResponse.fromJson(data);
  }

  Future<QueryFeedsResponse?> feedsQueryFeeds({
    QueryFeedsRequest? queryFeedsRequest,
  }) async {
    const path = r"/api/v2/feeds/feeds/query";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryFeedsRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryFeedsResponse.fromJson(data);
  }

  Future<SingleFollowResponse?> follow({
    required SingleFollowRequest singleFollowRequest,
  }) async {
    const path = r"/api/v2/feeds/follows";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: singleFollowRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : SingleFollowResponse.fromJson(data);
  }

  Future<FollowBatchResponse?> followBatch({
    required FollowBatchRequest followBatchRequest,
  }) async {
    const path = r"/api/v2/feeds/follows/batch";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: followBatchRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : FollowBatchResponse.fromJson(data);
  }

  Future<GetActivityResponse?> getActivity({
    required String activityId,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.get<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : GetActivityResponse.fromJson(data);
  }

  Future<GetCommentResponse?> getComment({
    required String commentId,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}"
        .replaceAll('{comment_id}', commentId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.get<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : GetCommentResponse.fromJson(data);
  }

  Future<GetCommentRepliesResponse?> getCommentReplies({
    required String commentId,
    int? depth,
    String? sort,
    int? repliesLimit,
    int? limit,
    String? prev,
    String? next,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}/replies"
        .replaceAll('{comment_id}', commentId);

    final queryParams = <String, Object?>{};

    if (depth != null) {
      queryParams.addAll({'depth': depth});
    }
    if (sort != null) {
      queryParams.addAll({'sort': sort});
    }
    if (repliesLimit != null) {
      queryParams.addAll({'replies_limit': repliesLimit});
    }
    if (limit != null) {
      queryParams.addAll({'limit': limit});
    }
    if (prev != null) {
      queryParams.addAll({'prev': prev});
    }
    if (next != null) {
      queryParams.addAll({'next': next});
    }

    final response = await apiClient.get<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : GetCommentRepliesResponse.fromJson(data);
  }

  Future<GetCommentsResponse?> getComments({
    required String objectId,
    required String objectType,
    int? depth,
    String? sort,
    int? repliesLimit,
    int? limit,
    String? prev,
    String? next,
  }) async {
    const path = r"/api/v2/feeds/comments";

    final queryParams = <String, Object?>{};
    queryParams.addAll({'object_id': objectId});
    queryParams.addAll({'object_type': objectType});
    if (depth != null) {
      queryParams.addAll({'depth': depth});
    }
    if (sort != null) {
      queryParams.addAll({'sort': sort});
    }
    if (repliesLimit != null) {
      queryParams.addAll({'replies_limit': repliesLimit});
    }
    if (limit != null) {
      queryParams.addAll({'limit': limit});
    }
    if (prev != null) {
      queryParams.addAll({'prev': prev});
    }
    if (next != null) {
      queryParams.addAll({'next': next});
    }

    final response = await apiClient.get<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : GetCommentsResponse.fromJson(data);
  }

  Future<GetFollowSuggestionsResponse?> getFollowSuggestions({
    required String feedGroupId,
    int? limit,
  }) async {
    final path = r"/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions"
        .replaceAll('{feed_group_id}', feedGroupId);

    final queryParams = <String, Object?>{};

    if (limit != null) {
      queryParams.addAll({'limit': limit});
    }

    final response = await apiClient.get<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : GetFollowSuggestionsResponse.fromJson(data);
  }

  Future<GetOrCreateFeedResponse?> getOrCreateFeed({
    required String feedGroupId,
    required String feedId,
    GetOrCreateFeedRequest? getOrCreateFeedRequest,
  }) async {
    final path = r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}"
        .replaceAll('{feed_group_id}', feedGroupId)
        .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: getOrCreateFeedRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : GetOrCreateFeedResponse.fromJson(data);
  }

  Future<DurationResponse?> markActivity({
    required String feedGroupId,
    required String feedId,
    MarkActivityRequest? markActivityRequest,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: markActivityRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DurationResponse.fromJson(data);
  }

  Future<PinActivityResponse?> pinActivity({
    required String feedGroupId,
    required String feedId,
    required String activityId,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId)
            .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : PinActivityResponse.fromJson(data);
  }

  Future<QueryActivitiesResponse?> queryActivities({
    QueryActivitiesRequest? queryActivitiesRequest,
  }) async {
    const path = r"/api/v2/feeds/activities/query";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryActivitiesRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryActivitiesResponse.fromJson(data);
  }

  Future<QueryActivityReactionsResponse?> queryActivityReactions({
    required String activityId,
    QueryActivityReactionsRequest? queryActivityReactionsRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/reactions/query"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryActivityReactionsRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryActivityReactionsResponse.fromJson(data);
  }

  Future<QueryBookmarkFoldersResponse?> queryBookmarkFolders({
    QueryBookmarkFoldersRequest? queryBookmarkFoldersRequest,
  }) async {
    const path = r"/api/v2/feeds/bookmark_folders/query";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryBookmarkFoldersRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryBookmarkFoldersResponse.fromJson(data);
  }

  Future<QueryBookmarksResponse?> queryBookmarks({
    QueryBookmarksRequest? queryBookmarksRequest,
  }) async {
    const path = r"/api/v2/feeds/bookmarks/query";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryBookmarksRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryBookmarksResponse.fromJson(data);
  }

  Future<QueryCommentReactionsResponse?> queryCommentReactions({
    required String commentId,
    QueryCommentReactionsRequest? queryCommentReactionsRequest,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}/reactions/query"
        .replaceAll('{comment_id}', commentId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryCommentReactionsRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryCommentReactionsResponse.fromJson(data);
  }

  Future<QueryCommentsResponse?> queryComments({
    required QueryCommentsRequest queryCommentsRequest,
  }) async {
    const path = r"/api/v2/feeds/comments/query";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryCommentsRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryCommentsResponse.fromJson(data);
  }

  Future<QueryFeedMembersResponse?> queryFeedMembers({
    required String feedGroupId,
    required String feedId,
    QueryFeedMembersRequest? queryFeedMembersRequest,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryFeedMembersRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryFeedMembersResponse.fromJson(data);
  }

  Future<QueryFollowsResponse?> queryFollows({
    QueryFollowsRequest? queryFollowsRequest,
  }) async {
    const path = r"/api/v2/feeds/follows/query";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: queryFollowsRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : QueryFollowsResponse.fromJson(data);
  }

  Future<RejectFeedMemberInviteResponse?> rejectFeedMemberInvite({
    required String feedGroupId,
    required String feedId,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : RejectFeedMemberInviteResponse.fromJson(data);
  }

  Future<RejectFollowResponse?> rejectFollow({
    required RejectFollowRequest rejectFollowRequest,
  }) async {
    const path = r"/api/v2/feeds/follows/reject";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: rejectFollowRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : RejectFollowResponse.fromJson(data);
  }

  Future<DurationResponse?> stopWatchingFeed({
    required String feedGroupId,
    required String feedId,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/watch"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : DurationResponse.fromJson(data);
  }

  Future<UnfollowResponse?> unfollow({
    required String source,
    required String target,
  }) async {
    final path = r"/api/v2/feeds/follows/{source}/{target}"
        .replaceAll('{source}', source)
        .replaceAll('{target}', target);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UnfollowResponse.fromJson(data);
  }

  Future<UnpinActivityResponse?> unpinActivity({
    required String feedGroupId,
    required String feedId,
    required String activityId,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId)
            .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.delete<Map<String, dynamic>>(
      path,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UnpinActivityResponse.fromJson(data);
  }

  Future<UpdateActivityResponse?> updateActivity({
    required String activityId,
    UpdateActivityRequest? updateActivityRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.put<Map<String, dynamic>>(
      path,
      data: updateActivityRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateActivityResponse.fromJson(data);
  }

  Future<UpdateActivityPartialResponse?> updateActivityPartial({
    required String activityId,
    UpdateActivityPartialRequest? updateActivityPartialRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.patch<Map<String, dynamic>>(
      path,
      data: updateActivityPartialRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateActivityPartialResponse.fromJson(data);
  }

  Future<UpdateBookmarkResponse?> updateBookmark({
    required String activityId,
    UpdateBookmarkRequest? updateBookmarkRequest,
  }) async {
    final path = r"/api/v2/feeds/activities/{activity_id}/bookmarks"
        .replaceAll('{activity_id}', activityId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.patch<Map<String, dynamic>>(
      path,
      data: updateBookmarkRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateBookmarkResponse.fromJson(data);
  }

  Future<UpdateBookmarkFolderResponse?> updateBookmarkFolder({
    required String folderId,
    UpdateBookmarkFolderRequest? updateBookmarkFolderRequest,
  }) async {
    final path = r"/api/v2/feeds/bookmark_folders/{folder_id}"
        .replaceAll('{folder_id}', folderId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.patch<Map<String, dynamic>>(
      path,
      data: updateBookmarkFolderRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateBookmarkFolderResponse.fromJson(data);
  }

  Future<UpdateCommentResponse?> updateComment({
    required String commentId,
    UpdateCommentRequest? updateCommentRequest,
  }) async {
    final path = r"/api/v2/feeds/comments/{comment_id}"
        .replaceAll('{comment_id}', commentId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.patch<Map<String, dynamic>>(
      path,
      data: updateCommentRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateCommentResponse.fromJson(data);
  }

  Future<UpdateFeedResponse?> updateFeed({
    required String feedGroupId,
    required String feedId,
    UpdateFeedRequest? updateFeedRequest,
  }) async {
    final path = r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}"
        .replaceAll('{feed_group_id}', feedGroupId)
        .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.put<Map<String, dynamic>>(
      path,
      data: updateFeedRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateFeedResponse.fromJson(data);
  }

  Future<UpdateFeedMembersResponse?> updateFeedMembers({
    required String feedGroupId,
    required String feedId,
    required UpdateFeedMembersRequest updateFeedMembersRequest,
  }) async {
    final path =
        r"/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members"
            .replaceAll('{feed_group_id}', feedGroupId)
            .replaceAll('{feed_id}', feedId);

    final queryParams = <String, Object?>{};

    final response = await apiClient.patch<Map<String, dynamic>>(
      path,
      data: updateFeedMembersRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateFeedMembersResponse.fromJson(data);
  }

  Future<UpdateFollowResponse?> updateFollow({
    required UpdateFollowRequest updateFollowRequest,
  }) async {
    const path = r"/api/v2/feeds/follows";

    final queryParams = <String, Object?>{};

    final response = await apiClient.patch<Map<String, dynamic>>(
      path,
      data: updateFollowRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpdateFollowResponse.fromJson(data);
  }

  Future<UpsertActivitiesResponse?> upsertActivities({
    required UpsertActivitiesRequest upsertActivitiesRequest,
  }) async {
    const path = r"/api/v2/feeds/activities/batch";

    final queryParams = <String, Object?>{};

    final response = await apiClient.post<Map<String, dynamic>>(
      path,
      data: upsertActivitiesRequest,
      queryParameters: queryParams,
    );
    final data = response.data;

    return data == null ? null : UpsertActivitiesResponse.fromJson(data);
  }
}
