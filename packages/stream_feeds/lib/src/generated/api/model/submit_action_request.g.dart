// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum SubmitActionRequestActionTypeEnum {
  ban('ban'),
  custom('custom'),
  deleteActivity('delete_activity'),
  deleteMessage('delete_message'),
  deleteReaction('delete_reaction'),
  deleteUser('delete_user'),
  endCall('end_call'),
  kickUser('kick_user'),
  markReviewed('mark_reviewed'),
  restore('restore'),
  shadowBlock('shadow_block'),
  unban('unban'),
  unblock('unblock'),
  unknown('_unknown');

  const SubmitActionRequestActionTypeEnum(this.value);
  final String value;

  static SubmitActionRequestActionTypeEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'ban':
        return SubmitActionRequestActionTypeEnum.ban;
      case 'custom':
        return SubmitActionRequestActionTypeEnum.custom;
      case 'delete_activity':
        return SubmitActionRequestActionTypeEnum.deleteActivity;
      case 'delete_message':
        return SubmitActionRequestActionTypeEnum.deleteMessage;
      case 'delete_reaction':
        return SubmitActionRequestActionTypeEnum.deleteReaction;
      case 'delete_user':
        return SubmitActionRequestActionTypeEnum.deleteUser;
      case 'end_call':
        return SubmitActionRequestActionTypeEnum.endCall;
      case 'kick_user':
        return SubmitActionRequestActionTypeEnum.kickUser;
      case 'mark_reviewed':
        return SubmitActionRequestActionTypeEnum.markReviewed;
      case 'restore':
        return SubmitActionRequestActionTypeEnum.restore;
      case 'shadow_block':
        return SubmitActionRequestActionTypeEnum.shadowBlock;
      case 'unban':
        return SubmitActionRequestActionTypeEnum.unban;
      case 'unblock':
        return SubmitActionRequestActionTypeEnum.unblock;
      default:
        return SubmitActionRequestActionTypeEnum.unknown;
    }
  }
}

@immutable
class SubmitActionRequest {
  const SubmitActionRequest({
    required this.actionType,
    this.ban,
    this.custom,
    this.deleteActivity,
    this.deleteMessage,
    this.deleteReaction,
    this.deleteUser,
    required this.itemId,
    this.markReviewed,
  });

  final SubmitActionRequestActionTypeEnum actionType;

  final BanActionRequest? ban;

  final CustomActionRequest? custom;

  final DeleteActivityRequest? deleteActivity;

  final DeleteMessageRequest? deleteMessage;

  final DeleteReactionRequest? deleteReaction;

  final DeleteUserRequest? deleteUser;

  final String itemId;

  final MarkReviewedRequest? markReviewed;

  Map<String, dynamic> toJson() {
    return {
      'action_type': actionType,
      'ban': ban,
      'custom': custom,
      'delete_activity': deleteActivity,
      'delete_message': deleteMessage,
      'delete_reaction': deleteReaction,
      'delete_user': deleteUser,
      'item_id': itemId,
      'mark_reviewed': markReviewed,
    };
  }

  static SubmitActionRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return SubmitActionRequest(
        actionType:
            SubmitActionRequestActionTypeEnum.fromValue(json['action_type'])!,
        ban: BanActionRequest.fromJson(json[r'ban'] ?? null),
        custom: CustomActionRequest.fromJson(json[r'custom'] ?? null),
        deleteActivity:
            DeleteActivityRequest.fromJson(json[r'delete_activity'] ?? null),
        deleteMessage:
            DeleteMessageRequest.fromJson(json[r'delete_message'] ?? null),
        deleteReaction:
            DeleteReactionRequest.fromJson(json[r'delete_reaction'] ?? null),
        deleteUser: DeleteUserRequest.fromJson(json[r'delete_user'] ?? null),
        itemId: mapValueOfType<String>(json, r'item_id')!,
        markReviewed:
            MarkReviewedRequest.fromJson(json[r'mark_reviewed'] ?? null),
      );
    }
    return null;
  }

  static List<SubmitActionRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <SubmitActionRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = SubmitActionRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'SubmitActionRequest('
        'actionType: $actionType, '
        'ban: $ban, '
        'custom: $custom, '
        'deleteActivity: $deleteActivity, '
        'deleteMessage: $deleteMessage, '
        'deleteReaction: $deleteReaction, '
        'deleteUser: $deleteUser, '
        'itemId: $itemId, '
        'markReviewed: $markReviewed, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is SubmitActionRequest &&
        other.actionType == actionType &&
        other.ban == ban &&
        other.custom == custom &&
        other.deleteActivity == deleteActivity &&
        other.deleteMessage == deleteMessage &&
        other.deleteReaction == deleteReaction &&
        other.deleteUser == deleteUser &&
        other.itemId == itemId &&
        other.markReviewed == markReviewed;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      actionType,
      ban,
      custom,
      deleteActivity,
      deleteMessage,
      deleteReaction,
      deleteUser,
      itemId,
      markReviewed,
    ]);
  }
}
