// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum FeedRequestVisibilityEnum {
  followers('followers'),
  members('members'),
  private('private'),
  public('public'),
  visible('visible'),
  unknown('_unknown');

  const FeedRequestVisibilityEnum(this.value);
  final String value;

  static FeedRequestVisibilityEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'followers':
        return FeedRequestVisibilityEnum.followers;
      case 'members':
        return FeedRequestVisibilityEnum.members;
      case 'private':
        return FeedRequestVisibilityEnum.private;
      case 'public':
        return FeedRequestVisibilityEnum.public;
      case 'visible':
        return FeedRequestVisibilityEnum.visible;
      default:
        return FeedRequestVisibilityEnum.unknown;
    }
  }
}

@immutable
class FeedRequest {
  const FeedRequest({
    this.createdById,
    this.custom,
    this.description,
    required this.feedGroupId,
    required this.feedId,
    this.filterTags,
    this.members,
    this.name,
    this.visibility,
  });

  final String? createdById;

  final Map<String, Object>? custom;

  final String? description;

  final String feedGroupId;

  final String feedId;

  final List<String>? filterTags;

  final List<FeedMemberRequest>? members;

  final String? name;

  final FeedRequestVisibilityEnum? visibility;

  Map<String, dynamic> toJson() {
    return {
      'created_by_id': createdById,
      'custom': custom,
      'description': description,
      'feed_group_id': feedGroupId,
      'feed_id': feedId,
      'filter_tags': filterTags,
      'members': members,
      'name': name,
      'visibility': visibility,
    };
  }

  static FeedRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FeedRequest(
        createdById: mapValueOfType<String>(json, r'created_by_id', null),
        custom: mapCastOfType<String, Object>(json, r'custom'),
        description: mapValueOfType<String>(json, r'description', null),
        feedGroupId: mapValueOfType<String>(json, r'feed_group_id')!,
        feedId: mapValueOfType<String>(json, r'feed_id')!,
        filterTags: json[r'filter_tags'] is Iterable
            ? (json[r'filter_tags'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        members: FeedMemberRequest.listFromJson(json[r'members']),
        name: mapValueOfType<String>(json, r'name', null),
        visibility: FeedRequestVisibilityEnum.fromValue(json['visibility']),
      );
    }
    return null;
  }

  static List<FeedRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FeedRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FeedRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FeedRequest('
        'createdById: $createdById, '
        'custom: $custom, '
        'description: $description, '
        'feedGroupId: $feedGroupId, '
        'feedId: $feedId, '
        'filterTags: $filterTags, '
        'members: $members, '
        'name: $name, '
        'visibility: $visibility, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FeedRequest &&
        other.createdById == createdById &&
        other.custom == custom &&
        other.description == description &&
        other.feedGroupId == feedGroupId &&
        other.feedId == feedId &&
        other.filterTags == filterTags &&
        other.members == members &&
        other.name == name &&
        other.visibility == visibility;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdById,
      custom,
      description,
      feedGroupId,
      feedId,
      filterTags,
      members,
      name,
      visibility,
    ]);
  }
}
