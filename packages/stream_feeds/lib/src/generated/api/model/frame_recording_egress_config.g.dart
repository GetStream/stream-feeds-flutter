// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class FrameRecordingEgressConfig {
  const FrameRecordingEgressConfig({
    this.captureIntervalInSeconds,
    this.externalStorage,
    this.quality,
    this.storageName,
  });

  final int? captureIntervalInSeconds;

  final ExternalStorage? externalStorage;

  final Quality? quality;

  final String? storageName;

  Map<String, dynamic> toJson() {
    return {
      'capture_interval_in_seconds': captureIntervalInSeconds,
      'external_storage': externalStorage,
      'quality': quality,
      'storage_name': storageName,
    };
  }

  static FrameRecordingEgressConfig? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FrameRecordingEgressConfig(
        captureIntervalInSeconds:
            mapValueOfType<int>(json, r'capture_interval_in_seconds', null),
        externalStorage:
            ExternalStorage.fromJson(json[r'external_storage'] ?? null),
        quality: Quality.fromJson(json[r'quality'] ?? null),
        storageName: mapValueOfType<String>(json, r'storage_name', null),
      );
    }
    return null;
  }

  static List<FrameRecordingEgressConfig> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FrameRecordingEgressConfig>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FrameRecordingEgressConfig.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FrameRecordingEgressConfig('
        'captureIntervalInSeconds: $captureIntervalInSeconds, '
        'externalStorage: $externalStorage, '
        'quality: $quality, '
        'storageName: $storageName, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FrameRecordingEgressConfig &&
        other.captureIntervalInSeconds == captureIntervalInSeconds &&
        other.externalStorage == externalStorage &&
        other.quality == quality &&
        other.storageName == storageName;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      captureIntervalInSeconds,
      externalStorage,
      quality,
      storageName,
    ]);
  }
}
