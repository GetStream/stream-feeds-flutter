// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum VelocityFilterConfigRuleActionEnum {
  ban('ban'),
  flag('flag'),
  remove('remove'),
  shadow('shadow'),
  unknown('_unknown');

  const VelocityFilterConfigRuleActionEnum(this.value);
  final String value;

  static VelocityFilterConfigRuleActionEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'ban':
        return VelocityFilterConfigRuleActionEnum.ban;
      case 'flag':
        return VelocityFilterConfigRuleActionEnum.flag;
      case 'remove':
        return VelocityFilterConfigRuleActionEnum.remove;
      case 'shadow':
        return VelocityFilterConfigRuleActionEnum.shadow;
      default:
        return VelocityFilterConfigRuleActionEnum.unknown;
    }
  }
}

enum VelocityFilterConfigRuleCascadingActionEnum {
  ban('ban'),
  flag('flag'),
  remove('remove'),
  shadow('shadow'),
  unknown('_unknown');

  const VelocityFilterConfigRuleCascadingActionEnum(this.value);
  final String value;

  static VelocityFilterConfigRuleCascadingActionEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'ban':
        return VelocityFilterConfigRuleCascadingActionEnum.ban;
      case 'flag':
        return VelocityFilterConfigRuleCascadingActionEnum.flag;
      case 'remove':
        return VelocityFilterConfigRuleCascadingActionEnum.remove;
      case 'shadow':
        return VelocityFilterConfigRuleCascadingActionEnum.shadow;
      default:
        return VelocityFilterConfigRuleCascadingActionEnum.unknown;
    }
  }
}

@immutable
class VelocityFilterConfigRule {
  const VelocityFilterConfigRule({
    required this.action,
    required this.banDuration,
    required this.cascadingAction,
    required this.cascadingThreshold,
    required this.checkMessageContext,
    required this.fastSpamThreshold,
    required this.fastSpamTtl,
    required this.ipBan,
    required this.probationPeriod,
    required this.shadowBan,
    this.slowSpamBanDuration,
    required this.slowSpamThreshold,
    required this.slowSpamTtl,
    required this.urlOnly,
  });

  final VelocityFilterConfigRuleActionEnum action;

  final int banDuration;

  final VelocityFilterConfigRuleCascadingActionEnum cascadingAction;

  final int cascadingThreshold;

  final bool checkMessageContext;

  final int fastSpamThreshold;

  final int fastSpamTtl;

  final bool ipBan;

  final int probationPeriod;

  final bool shadowBan;

  final int? slowSpamBanDuration;

  final int slowSpamThreshold;

  final int slowSpamTtl;

  final bool urlOnly;

  Map<String, dynamic> toJson() {
    return {
      'action': action,
      'ban_duration': banDuration,
      'cascading_action': cascadingAction,
      'cascading_threshold': cascadingThreshold,
      'check_message_context': checkMessageContext,
      'fast_spam_threshold': fastSpamThreshold,
      'fast_spam_ttl': fastSpamTtl,
      'ip_ban': ipBan,
      'probation_period': probationPeriod,
      'shadow_ban': shadowBan,
      'slow_spam_ban_duration': slowSpamBanDuration,
      'slow_spam_threshold': slowSpamThreshold,
      'slow_spam_ttl': slowSpamTtl,
      'url_only': urlOnly,
    };
  }

  static VelocityFilterConfigRule? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return VelocityFilterConfigRule(
        action: VelocityFilterConfigRuleActionEnum.fromValue(json['action'])!,
        banDuration: mapValueOfType<int>(json, r'ban_duration')!,
        cascadingAction: VelocityFilterConfigRuleCascadingActionEnum.fromValue(
            json['cascading_action'])!,
        cascadingThreshold: mapValueOfType<int>(json, r'cascading_threshold')!,
        checkMessageContext:
            mapValueOfType<bool>(json, r'check_message_context')!,
        fastSpamThreshold: mapValueOfType<int>(json, r'fast_spam_threshold')!,
        fastSpamTtl: mapValueOfType<int>(json, r'fast_spam_ttl')!,
        ipBan: mapValueOfType<bool>(json, r'ip_ban')!,
        probationPeriod: mapValueOfType<int>(json, r'probation_period')!,
        shadowBan: mapValueOfType<bool>(json, r'shadow_ban')!,
        slowSpamBanDuration:
            mapValueOfType<int>(json, r'slow_spam_ban_duration', null),
        slowSpamThreshold: mapValueOfType<int>(json, r'slow_spam_threshold')!,
        slowSpamTtl: mapValueOfType<int>(json, r'slow_spam_ttl')!,
        urlOnly: mapValueOfType<bool>(json, r'url_only')!,
      );
    }
    return null;
  }

  static List<VelocityFilterConfigRule> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <VelocityFilterConfigRule>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = VelocityFilterConfigRule.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'VelocityFilterConfigRule('
        'action: $action, '
        'banDuration: $banDuration, '
        'cascadingAction: $cascadingAction, '
        'cascadingThreshold: $cascadingThreshold, '
        'checkMessageContext: $checkMessageContext, '
        'fastSpamThreshold: $fastSpamThreshold, '
        'fastSpamTtl: $fastSpamTtl, '
        'ipBan: $ipBan, '
        'probationPeriod: $probationPeriod, '
        'shadowBan: $shadowBan, '
        'slowSpamBanDuration: $slowSpamBanDuration, '
        'slowSpamThreshold: $slowSpamThreshold, '
        'slowSpamTtl: $slowSpamTtl, '
        'urlOnly: $urlOnly, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is VelocityFilterConfigRule &&
        other.action == action &&
        other.banDuration == banDuration &&
        other.cascadingAction == cascadingAction &&
        other.cascadingThreshold == cascadingThreshold &&
        other.checkMessageContext == checkMessageContext &&
        other.fastSpamThreshold == fastSpamThreshold &&
        other.fastSpamTtl == fastSpamTtl &&
        other.ipBan == ipBan &&
        other.probationPeriod == probationPeriod &&
        other.shadowBan == shadowBan &&
        other.slowSpamBanDuration == slowSpamBanDuration &&
        other.slowSpamThreshold == slowSpamThreshold &&
        other.slowSpamTtl == slowSpamTtl &&
        other.urlOnly == urlOnly;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      action,
      banDuration,
      cascadingAction,
      cascadingThreshold,
      checkMessageContext,
      fastSpamThreshold,
      fastSpamTtl,
      ipBan,
      probationPeriod,
      shadowBan,
      slowSpamBanDuration,
      slowSpamThreshold,
      slowSpamTtl,
      urlOnly,
    ]);
  }
}
