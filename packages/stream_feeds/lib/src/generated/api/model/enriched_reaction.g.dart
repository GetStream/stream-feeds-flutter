// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class EnrichedReaction {
  const EnrichedReaction({
    required this.activityId,
    this.childrenCounts,
    this.data,
    this.id,
    required this.kind,
    this.latestChildren,
    this.ownChildren,
    this.parent,
    this.targetFeeds,
    this.user,
    required this.userId,
  });

  final String activityId;

  final Map<String, int>? childrenCounts;

  final Map<String, Object>? data;

  final String? id;

  final String kind;

  final Map<String, List<EnrichedReaction>>? latestChildren;

  final Map<String, List<EnrichedReaction>>? ownChildren;

  final String? parent;

  final List<String>? targetFeeds;

  final Data? user;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'activity_id': activityId,
      'children_counts': childrenCounts,
      'data': data,
      'id': id,
      'kind': kind,
      'latest_children': latestChildren,
      'own_children': ownChildren,
      'parent': parent,
      'target_feeds': targetFeeds,
      'user': user,
      'user_id': userId,
    };
  }

  static EnrichedReaction? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return EnrichedReaction(
        activityId: mapValueOfType<String>(json, r'activity_id')!,
        childrenCounts: mapCastOfType<String, int>(json, r'children_counts'),
        data: mapCastOfType<String, Object>(json, r'data'),
        id: mapValueOfType<String>(json, r'id', null),
        kind: mapValueOfType<String>(json, r'kind')!,
        latestChildren: mapCastOfType<String, List<EnrichedReaction>>(
            json, r'latest_children'),
        ownChildren: mapCastOfType<String, List<EnrichedReaction>>(
            json, r'own_children'),
        parent: mapValueOfType<String>(json, r'parent', null),
        targetFeeds: json[r'target_feeds'] is Iterable
            ? (json[r'target_feeds'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        user: Data.fromJson(json[r'user'] ?? null),
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<EnrichedReaction> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <EnrichedReaction>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = EnrichedReaction.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'EnrichedReaction('
        'activityId: $activityId, '
        'childrenCounts: $childrenCounts, '
        'data: $data, '
        'id: $id, '
        'kind: $kind, '
        'latestChildren: $latestChildren, '
        'ownChildren: $ownChildren, '
        'parent: $parent, '
        'targetFeeds: $targetFeeds, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EnrichedReaction &&
        other.activityId == activityId &&
        other.childrenCounts == childrenCounts &&
        other.data == data &&
        other.id == id &&
        other.kind == kind &&
        other.latestChildren == latestChildren &&
        other.ownChildren == ownChildren &&
        other.parent == parent &&
        other.targetFeeds == targetFeeds &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      activityId,
      childrenCounts,
      data,
      id,
      kind,
      latestChildren,
      ownChildren,
      parent,
      targetFeeds,
      user,
      userId,
    ]);
  }
}
