// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class UpdateBlockListRequest {
  const UpdateBlockListRequest({
    this.team,
    this.words,
  });

  final String? team;

  final List<String>? words;

  Map<String, dynamic> toJson() {
    return {
      'team': team,
      'words': words,
    };
  }

  static UpdateBlockListRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UpdateBlockListRequest(
        team: mapValueOfType<String>(json, r'team', null),
        words: json[r'words'] is Iterable
            ? (json[r'words'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
      );
    }
    return null;
  }

  static List<UpdateBlockListRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UpdateBlockListRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UpdateBlockListRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UpdateBlockListRequest('
        'team: $team, '
        'words: $words, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UpdateBlockListRequest &&
        other.team == team &&
        other.words == words;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      team,
      words,
    ]);
  }
}
