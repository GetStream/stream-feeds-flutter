// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RTMPEgressConfig {
  const RTMPEgressConfig({
    this.compositeAppSettings,
    this.quality,
    this.rtmpLocation,
  });

  final CompositeAppSettings? compositeAppSettings;

  final Quality? quality;

  final String? rtmpLocation;

  Map<String, dynamic> toJson() {
    return {
      'composite_app_settings': compositeAppSettings,
      'quality': quality,
      'rtmp_location': rtmpLocation,
    };
  }

  static RTMPEgressConfig? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RTMPEgressConfig(
        compositeAppSettings: CompositeAppSettings.fromJson(
            json[r'composite_app_settings'] ?? null),
        quality: Quality.fromJson(json[r'quality'] ?? null),
        rtmpLocation: mapValueOfType<String>(json, r'rtmp_location', null),
      );
    }
    return null;
  }

  static List<RTMPEgressConfig> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RTMPEgressConfig>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RTMPEgressConfig.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RTMPEgressConfig('
        'compositeAppSettings: $compositeAppSettings, '
        'quality: $quality, '
        'rtmpLocation: $rtmpLocation, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RTMPEgressConfig &&
        other.compositeAppSettings == compositeAppSettings &&
        other.quality == quality &&
        other.rtmpLocation == rtmpLocation;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      compositeAppSettings,
      quality,
      rtmpLocation,
    ]);
  }
}
