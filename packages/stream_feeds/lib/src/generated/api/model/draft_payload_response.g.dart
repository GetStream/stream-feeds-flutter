// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class DraftPayloadResponse {
  const DraftPayloadResponse({
    this.attachments,
    required this.custom,
    this.html,
    required this.id,
    this.mentionedUsers,
    this.mml,
    this.parentId,
    this.pollId,
    this.quotedMessageId,
    this.showInChannel,
    this.silent,
    required this.text,
    this.type,
  });

  final List<Attachment>? attachments;

  final Map<String, Object> custom;

  final String? html;

  final String id;

  final List<UserResponse>? mentionedUsers;

  final String? mml;

  final String? parentId;

  final String? pollId;

  final String? quotedMessageId;

  final bool? showInChannel;

  final bool? silent;

  final String text;

  final String? type;

  Map<String, dynamic> toJson() {
    return {
      'attachments': attachments,
      'custom': custom,
      'html': html,
      'id': id,
      'mentioned_users': mentionedUsers,
      'mml': mml,
      'parent_id': parentId,
      'poll_id': pollId,
      'quoted_message_id': quotedMessageId,
      'show_in_channel': showInChannel,
      'silent': silent,
      'text': text,
      'type': type,
    };
  }

  static DraftPayloadResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return DraftPayloadResponse(
        attachments: Attachment.listFromJson(json[r'attachments']),
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        html: mapValueOfType<String>(json, r'html', null),
        id: mapValueOfType<String>(json, r'id')!,
        mentionedUsers: UserResponse.listFromJson(json[r'mentioned_users']),
        mml: mapValueOfType<String>(json, r'mml', null),
        parentId: mapValueOfType<String>(json, r'parent_id', null),
        pollId: mapValueOfType<String>(json, r'poll_id', null),
        quotedMessageId:
            mapValueOfType<String>(json, r'quoted_message_id', null),
        showInChannel: mapValueOfType<bool>(json, r'show_in_channel', null),
        silent: mapValueOfType<bool>(json, r'silent', null),
        text: mapValueOfType<String>(json, r'text')!,
        type: mapValueOfType<String>(json, r'type', null),
      );
    }
    return null;
  }

  static List<DraftPayloadResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <DraftPayloadResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = DraftPayloadResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'DraftPayloadResponse('
        'attachments: $attachments, '
        'custom: $custom, '
        'html: $html, '
        'id: $id, '
        'mentionedUsers: $mentionedUsers, '
        'mml: $mml, '
        'parentId: $parentId, '
        'pollId: $pollId, '
        'quotedMessageId: $quotedMessageId, '
        'showInChannel: $showInChannel, '
        'silent: $silent, '
        'text: $text, '
        'type: $type, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is DraftPayloadResponse &&
        other.attachments == attachments &&
        other.custom == custom &&
        other.html == html &&
        other.id == id &&
        other.mentionedUsers == mentionedUsers &&
        other.mml == mml &&
        other.parentId == parentId &&
        other.pollId == pollId &&
        other.quotedMessageId == quotedMessageId &&
        other.showInChannel == showInChannel &&
        other.silent == silent &&
        other.text == text &&
        other.type == type;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      attachments,
      custom,
      html,
      id,
      mentionedUsers,
      mml,
      parentId,
      pollId,
      quotedMessageId,
      showInChannel,
      silent,
      text,
      type,
    ]);
  }
}
