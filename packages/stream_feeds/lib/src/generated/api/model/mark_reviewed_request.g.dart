// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class MarkReviewedRequest {
  const MarkReviewedRequest({
    this.contentToMarkAsReviewedLimit,
    this.disableMarkingContentAsReviewed,
  });

  final int? contentToMarkAsReviewedLimit;

  final bool? disableMarkingContentAsReviewed;

  Map<String, dynamic> toJson() {
    return {
      'content_to_mark_as_reviewed_limit': contentToMarkAsReviewedLimit,
      'disable_marking_content_as_reviewed': disableMarkingContentAsReviewed,
    };
  }

  static MarkReviewedRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return MarkReviewedRequest(
        contentToMarkAsReviewedLimit: mapValueOfType<int>(
            json, r'content_to_mark_as_reviewed_limit', null),
        disableMarkingContentAsReviewed: mapValueOfType<bool>(
            json, r'disable_marking_content_as_reviewed', null),
      );
    }
    return null;
  }

  static List<MarkReviewedRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <MarkReviewedRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = MarkReviewedRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'MarkReviewedRequest('
        'contentToMarkAsReviewedLimit: $contentToMarkAsReviewedLimit, '
        'disableMarkingContentAsReviewed: $disableMarkingContentAsReviewed, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is MarkReviewedRequest &&
        other.contentToMarkAsReviewedLimit == contentToMarkAsReviewedLimit &&
        other.disableMarkingContentAsReviewed ==
            disableMarkingContentAsReviewed;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      contentToMarkAsReviewedLimit,
      disableMarkingContentAsReviewed,
    ]);
  }
}
