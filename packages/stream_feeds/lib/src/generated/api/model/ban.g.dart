// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Ban {
  const Ban({
    this.channel,
    required this.createdAt,
    this.createdBy,
    this.expires,
    this.reason,
    required this.shadow,
    this.target,
  });

  final Channel? channel;

  final DateTime createdAt;

  final User? createdBy;

  final DateTime? expires;

  final String? reason;

  final bool shadow;

  final User? target;

  Map<String, dynamic> toJson() {
    return {
      'channel': channel,
      'created_at': createdAt,
      'created_by': createdBy,
      'expires': expires,
      'reason': reason,
      'shadow': shadow,
      'target': target,
    };
  }

  static Ban? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Ban(
        channel: Channel.fromJson(json[r'channel'] ?? null),
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        createdBy: User.fromJson(json[r'created_by'] ?? null),
        expires: mapValueOfType<DateTime>(json, r'expires', null),
        reason: mapValueOfType<String>(json, r'reason', null),
        shadow: mapValueOfType<bool>(json, r'shadow')!,
        target: User.fromJson(json[r'target'] ?? null),
      );
    }
    return null;
  }

  static List<Ban> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Ban>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Ban.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Ban('
        'channel: $channel, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'expires: $expires, '
        'reason: $reason, '
        'shadow: $shadow, '
        'target: $target, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Ban &&
        other.channel == channel &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.expires == expires &&
        other.reason == reason &&
        other.shadow == shadow &&
        other.target == target;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      channel,
      createdAt,
      createdBy,
      expires,
      reason,
      shadow,
      target,
    ]);
  }
}
