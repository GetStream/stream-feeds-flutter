// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class TextContentParameters {
  const TextContentParameters({
    this.blocklistMatch,
    this.containsUrl,
    this.harmLabels,
    this.severity,
  });

  final List<String>? blocklistMatch;

  final bool? containsUrl;

  final List<String>? harmLabels;

  final String? severity;

  Map<String, dynamic> toJson() {
    return {
      'blocklist_match': blocklistMatch,
      'contains_url': containsUrl,
      'harm_labels': harmLabels,
      'severity': severity,
    };
  }

  static TextContentParameters? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return TextContentParameters(
        blocklistMatch: json[r'blocklist_match'] is Iterable
            ? (json[r'blocklist_match'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        containsUrl: mapValueOfType<bool>(json, r'contains_url', null),
        harmLabels: json[r'harm_labels'] is Iterable
            ? (json[r'harm_labels'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        severity: mapValueOfType<String>(json, r'severity', null),
      );
    }
    return null;
  }

  static List<TextContentParameters> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <TextContentParameters>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = TextContentParameters.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'TextContentParameters('
        'blocklistMatch: $blocklistMatch, '
        'containsUrl: $containsUrl, '
        'harmLabels: $harmLabels, '
        'severity: $severity, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is TextContentParameters &&
        other.blocklistMatch == blocklistMatch &&
        other.containsUrl == containsUrl &&
        other.harmLabels == harmLabels &&
        other.severity == severity;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      blocklistMatch,
      containsUrl,
      harmLabels,
      severity,
    ]);
  }
}
