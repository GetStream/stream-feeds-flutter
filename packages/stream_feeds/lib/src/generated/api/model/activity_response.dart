// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

import 'package:json_annotation/json_annotation.dart';
import '../models.dart';

part 'activity_response.g.dart';

@JsonEnum(alwaysCreate: true)
enum ActivityResponseVisibilityEnum {
  @JsonValue('private')
  private,
  @JsonValue('public')
  public,
  @JsonValue('tag')
  tag,
  unknown;
}

@JsonSerializable()
class ActivityResponse {
  const ActivityResponse({
    required this.attachments,
    required this.bookmarkCount,
    required this.commentCount,
    required this.comments,
    required this.createdAt,
    this.currentFeed,
    required this.custom,
    this.deletedAt,
    this.editedAt,
    this.expiresAt,
    required this.feeds,
    required this.filterTags,
    required this.id,
    required this.interestTags,
    required this.latestReactions,
    this.location,
    required this.mentionedUsers,
    this.moderation,
    this.object,
    required this.ownBookmarks,
    required this.ownReactions,
    this.parent,
    this.poll,
    required this.popularity,
    required this.reactionCount,
    required this.reactionGroups,
    required this.score,
    required this.searchData,
    required this.shareCount,
    this.text,
    required this.type,
    required this.updatedAt,
    required this.user,
    required this.visibility,
    this.visibilityTag,
  });

  final List<Attachment> attachments;

  final int bookmarkCount;

  final int commentCount;

  final List<CommentResponse> comments;
  @EpochDateTimeConverter()
  final DateTime createdAt;

  final FeedResponse? currentFeed;

  final Map<String, Object> custom;
  @EpochDateTimeConverter()
  final DateTime? deletedAt;
  @EpochDateTimeConverter()
  final DateTime? editedAt;
  @EpochDateTimeConverter()
  final DateTime? expiresAt;

  final List<String> feeds;

  final List<String> filterTags;

  final String id;

  final List<String> interestTags;

  final List<FeedsReactionResponse> latestReactions;

  final ActivityLocation? location;

  final List<UserResponse> mentionedUsers;

  final ModerationV2Response? moderation;

  final Map<String, Object>? object;

  final List<BookmarkResponse> ownBookmarks;

  final List<FeedsReactionResponse> ownReactions;

  final ActivityResponse? parent;

  final PollResponseData? poll;

  final int popularity;

  final int reactionCount;

  final Map<String, ReactionGroupResponse> reactionGroups;

  final num score;

  final Map<String, Object> searchData;

  final int shareCount;

  final String? text;

  final String type;
  @EpochDateTimeConverter()
  final DateTime updatedAt;

  final UserResponse user;

  final ActivityResponseVisibilityEnum visibility;

  final String? visibilityTag;

  Map<String, dynamic> toJson() => _$ActivityResponseToJson(this);

  static ActivityResponse fromJson(Map<String, dynamic> json) =>
      _$ActivityResponseFromJson(json);

  @override
  String toString() {
    return 'ActivityResponse('
        'attachments: $attachments, '
        'bookmarkCount: $bookmarkCount, '
        'commentCount: $commentCount, '
        'comments: $comments, '
        'createdAt: $createdAt, '
        'currentFeed: $currentFeed, '
        'custom: $custom, '
        'deletedAt: $deletedAt, '
        'editedAt: $editedAt, '
        'expiresAt: $expiresAt, '
        'feeds: $feeds, '
        'filterTags: $filterTags, '
        'id: $id, '
        'interestTags: $interestTags, '
        'latestReactions: $latestReactions, '
        'location: $location, '
        'mentionedUsers: $mentionedUsers, '
        'moderation: $moderation, '
        'object: $object, '
        'ownBookmarks: $ownBookmarks, '
        'ownReactions: $ownReactions, '
        'parent: $parent, '
        'poll: $poll, '
        'popularity: $popularity, '
        'reactionCount: $reactionCount, '
        'reactionGroups: $reactionGroups, '
        'score: $score, '
        'searchData: $searchData, '
        'shareCount: $shareCount, '
        'text: $text, '
        'type: $type, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'visibility: $visibility, '
        'visibilityTag: $visibilityTag, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ActivityResponse &&
        other.attachments == attachments &&
        other.bookmarkCount == bookmarkCount &&
        other.commentCount == commentCount &&
        other.comments == comments &&
        other.createdAt == createdAt &&
        other.currentFeed == currentFeed &&
        other.custom == custom &&
        other.deletedAt == deletedAt &&
        other.editedAt == editedAt &&
        other.expiresAt == expiresAt &&
        other.feeds == feeds &&
        other.filterTags == filterTags &&
        other.id == id &&
        other.interestTags == interestTags &&
        other.latestReactions == latestReactions &&
        other.location == location &&
        other.mentionedUsers == mentionedUsers &&
        other.moderation == moderation &&
        other.object == object &&
        other.ownBookmarks == ownBookmarks &&
        other.ownReactions == ownReactions &&
        other.parent == parent &&
        other.poll == poll &&
        other.popularity == popularity &&
        other.reactionCount == reactionCount &&
        other.reactionGroups == reactionGroups &&
        other.score == score &&
        other.searchData == searchData &&
        other.shareCount == shareCount &&
        other.text == text &&
        other.type == type &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.visibility == visibility &&
        other.visibilityTag == visibilityTag;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      attachments,
      bookmarkCount,
      commentCount,
      comments,
      createdAt,
      currentFeed,
      custom,
      deletedAt,
      editedAt,
      expiresAt,
      feeds,
      filterTags,
      id,
      interestTags,
      latestReactions,
      location,
      mentionedUsers,
      moderation,
      object,
      ownBookmarks,
      ownReactions,
      parent,
      poll,
      popularity,
      reactionCount,
      reactionGroups,
      score,
      searchData,
      shareCount,
      text,
      type,
      updatedAt,
      user,
      visibility,
      visibilityTag,
    ]);
  }
}
