// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum ConfigOverridesBlocklistBehaviorEnum {
  block('block'),
  flag('flag'),
  unknown('_unknown');

  const ConfigOverridesBlocklistBehaviorEnum(this.value);
  final String value;

  static ConfigOverridesBlocklistBehaviorEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'block':
        return ConfigOverridesBlocklistBehaviorEnum.block;
      case 'flag':
        return ConfigOverridesBlocklistBehaviorEnum.flag;
      default:
        return ConfigOverridesBlocklistBehaviorEnum.unknown;
    }
  }
}

@immutable
class ConfigOverrides {
  const ConfigOverrides({
    this.blocklist,
    this.blocklistBehavior,
    required this.commands,
    required this.grants,
    this.maxMessageLength,
    this.quotes,
    this.reactions,
    this.replies,
    this.sharedLocations,
    this.typingEvents,
    this.uploads,
    this.urlEnrichment,
    this.userMessageReminders,
  });

  final String? blocklist;

  final ConfigOverridesBlocklistBehaviorEnum? blocklistBehavior;

  final List<String> commands;

  final Map<String, List<String>> grants;

  final int? maxMessageLength;

  final bool? quotes;

  final bool? reactions;

  final bool? replies;

  final bool? sharedLocations;

  final bool? typingEvents;

  final bool? uploads;

  final bool? urlEnrichment;

  final bool? userMessageReminders;

  Map<String, dynamic> toJson() {
    return {
      'blocklist': blocklist,
      'blocklist_behavior': blocklistBehavior,
      'commands': commands,
      'grants': grants,
      'max_message_length': maxMessageLength,
      'quotes': quotes,
      'reactions': reactions,
      'replies': replies,
      'shared_locations': sharedLocations,
      'typing_events': typingEvents,
      'uploads': uploads,
      'url_enrichment': urlEnrichment,
      'user_message_reminders': userMessageReminders,
    };
  }

  static ConfigOverrides? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ConfigOverrides(
        blocklist: mapValueOfType<String>(json, r'blocklist', null),
        blocklistBehavior: ConfigOverridesBlocklistBehaviorEnum.fromValue(
            json['blocklist_behavior']),
        commands: json[r'commands'] is Iterable
            ? (json[r'commands'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        grants: mapCastOfType<String, List<String>>(json, r'grants')!,
        maxMessageLength:
            mapValueOfType<int>(json, r'max_message_length', null),
        quotes: mapValueOfType<bool>(json, r'quotes', null),
        reactions: mapValueOfType<bool>(json, r'reactions', null),
        replies: mapValueOfType<bool>(json, r'replies', null),
        sharedLocations: mapValueOfType<bool>(json, r'shared_locations', null),
        typingEvents: mapValueOfType<bool>(json, r'typing_events', null),
        uploads: mapValueOfType<bool>(json, r'uploads', null),
        urlEnrichment: mapValueOfType<bool>(json, r'url_enrichment', null),
        userMessageReminders:
            mapValueOfType<bool>(json, r'user_message_reminders', null),
      );
    }
    return null;
  }

  static List<ConfigOverrides> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ConfigOverrides>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ConfigOverrides.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ConfigOverrides('
        'blocklist: $blocklist, '
        'blocklistBehavior: $blocklistBehavior, '
        'commands: $commands, '
        'grants: $grants, '
        'maxMessageLength: $maxMessageLength, '
        'quotes: $quotes, '
        'reactions: $reactions, '
        'replies: $replies, '
        'sharedLocations: $sharedLocations, '
        'typingEvents: $typingEvents, '
        'uploads: $uploads, '
        'urlEnrichment: $urlEnrichment, '
        'userMessageReminders: $userMessageReminders, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ConfigOverrides &&
        other.blocklist == blocklist &&
        other.blocklistBehavior == blocklistBehavior &&
        other.commands == commands &&
        other.grants == grants &&
        other.maxMessageLength == maxMessageLength &&
        other.quotes == quotes &&
        other.reactions == reactions &&
        other.replies == replies &&
        other.sharedLocations == sharedLocations &&
        other.typingEvents == typingEvents &&
        other.uploads == uploads &&
        other.urlEnrichment == urlEnrichment &&
        other.userMessageReminders == userMessageReminders;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      blocklist,
      blocklistBehavior,
      commands,
      grants,
      maxMessageLength,
      quotes,
      reactions,
      replies,
      sharedLocations,
      typingEvents,
      uploads,
      urlEnrichment,
      userMessageReminders,
    ]);
  }
}
