// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class AddCommentRequest {
  const AddCommentRequest({
    this.attachments,
    required this.comment,
    this.createNotificationActivity,
    this.custom,
    this.mentionedUserIds,
    required this.objectId,
    required this.objectType,
    this.parentId,
  });

  final List<Attachment>? attachments;

  final String comment;

  final bool? createNotificationActivity;

  final Map<String, Object>? custom;

  final List<String>? mentionedUserIds;

  final String objectId;

  final String objectType;

  final String? parentId;

  Map<String, dynamic> toJson() {
    return {
      'attachments': attachments,
      'comment': comment,
      'create_notification_activity': createNotificationActivity,
      'custom': custom,
      'mentioned_user_ids': mentionedUserIds,
      'object_id': objectId,
      'object_type': objectType,
      'parent_id': parentId,
    };
  }

  static AddCommentRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return AddCommentRequest(
        attachments: Attachment.listFromJson(json[r'attachments']),
        comment: mapValueOfType<String>(json, r'comment')!,
        createNotificationActivity:
            mapValueOfType<bool>(json, r'create_notification_activity', null),
        custom: mapCastOfType<String, Object>(json, r'custom'),
        mentionedUserIds: json[r'mentioned_user_ids'] is Iterable
            ? (json[r'mentioned_user_ids'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        objectId: mapValueOfType<String>(json, r'object_id')!,
        objectType: mapValueOfType<String>(json, r'object_type')!,
        parentId: mapValueOfType<String>(json, r'parent_id', null),
      );
    }
    return null;
  }

  static List<AddCommentRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <AddCommentRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = AddCommentRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'AddCommentRequest('
        'attachments: $attachments, '
        'comment: $comment, '
        'createNotificationActivity: $createNotificationActivity, '
        'custom: $custom, '
        'mentionedUserIds: $mentionedUserIds, '
        'objectId: $objectId, '
        'objectType: $objectType, '
        'parentId: $parentId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AddCommentRequest &&
        other.attachments == attachments &&
        other.comment == comment &&
        other.createNotificationActivity == createNotificationActivity &&
        other.custom == custom &&
        other.mentionedUserIds == mentionedUserIds &&
        other.objectId == objectId &&
        other.objectType == objectType &&
        other.parentId == parentId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      attachments,
      comment,
      createNotificationActivity,
      custom,
      mentionedUserIds,
      objectId,
      objectType,
      parentId,
    ]);
  }
}
