// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class DraftResponse {
  const DraftResponse({
    this.channel,
    required this.channelCid,
    required this.createdAt,
    required this.message,
    this.parentId,
    this.parentMessage,
    this.quotedMessage,
  });

  final ChannelResponse? channel;

  final String channelCid;

  final DateTime createdAt;

  final DraftPayloadResponse message;

  final String? parentId;

  final MessageResponse? parentMessage;

  final MessageResponse? quotedMessage;

  Map<String, dynamic> toJson() {
    return {
      'channel': channel,
      'channel_cid': channelCid,
      'created_at': createdAt,
      'message': message,
      'parent_id': parentId,
      'parent_message': parentMessage,
      'quoted_message': quotedMessage,
    };
  }

  static DraftResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return DraftResponse(
        channel: ChannelResponse.fromJson(json[r'channel'] ?? null),
        channelCid: mapValueOfType<String>(json, r'channel_cid')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        message: DraftPayloadResponse.fromJson(json[r'message'])!,
        parentId: mapValueOfType<String>(json, r'parent_id', null),
        parentMessage:
            MessageResponse.fromJson(json[r'parent_message'] ?? null),
        quotedMessage:
            MessageResponse.fromJson(json[r'quoted_message'] ?? null),
      );
    }
    return null;
  }

  static List<DraftResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <DraftResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = DraftResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'DraftResponse('
        'channel: $channel, '
        'channelCid: $channelCid, '
        'createdAt: $createdAt, '
        'message: $message, '
        'parentId: $parentId, '
        'parentMessage: $parentMessage, '
        'quotedMessage: $quotedMessage, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is DraftResponse &&
        other.channel == channel &&
        other.channelCid == channelCid &&
        other.createdAt == createdAt &&
        other.message == message &&
        other.parentId == parentId &&
        other.parentMessage == parentMessage &&
        other.quotedMessage == quotedMessage;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      channel,
      channelCid,
      createdAt,
      message,
      parentId,
      parentMessage,
      quotedMessage,
    ]);
  }
}
