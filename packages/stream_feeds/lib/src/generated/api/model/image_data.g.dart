// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ImageData {
  const ImageData({
    required this.frames,
    required this.height,
    required this.size,
    required this.url,
    required this.width,
  });

  final String frames;

  final String height;

  final String size;

  final String url;

  final String width;

  Map<String, dynamic> toJson() {
    return {
      'frames': frames,
      'height': height,
      'size': size,
      'url': url,
      'width': width,
    };
  }

  static ImageData? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ImageData(
        frames: mapValueOfType<String>(json, r'frames')!,
        height: mapValueOfType<String>(json, r'height')!,
        size: mapValueOfType<String>(json, r'size')!,
        url: mapValueOfType<String>(json, r'url')!,
        width: mapValueOfType<String>(json, r'width')!,
      );
    }
    return null;
  }

  static List<ImageData> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ImageData>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ImageData.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ImageData('
        'frames: $frames, '
        'height: $height, '
        'size: $size, '
        'url: $url, '
        'width: $width, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ImageData &&
        other.frames == frames &&
        other.height == height &&
        other.size == size &&
        other.url == url &&
        other.width == width;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      frames,
      height,
      size,
      url,
      width,
    ]);
  }
}
