// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RuleBuilderRule {
  const RuleBuilderRule({
    required this.action,
    this.conditions,
    this.cooldownPeriod,
    required this.enabled,
    this.groups,
    required this.id,
    this.logic,
    required this.name,
    required this.ruleType,
  });

  final RuleBuilderAction action;

  final List<RuleBuilderCondition>? conditions;

  final String? cooldownPeriod;

  final bool enabled;

  final List<RuleBuilderConditionGroup>? groups;

  final String id;

  final String? logic;

  final String name;

  final String ruleType;

  Map<String, dynamic> toJson() {
    return {
      'action': action,
      'conditions': conditions,
      'cooldown_period': cooldownPeriod,
      'enabled': enabled,
      'groups': groups,
      'id': id,
      'logic': logic,
      'name': name,
      'rule_type': ruleType,
    };
  }

  static RuleBuilderRule? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RuleBuilderRule(
        action: RuleBuilderAction.fromJson(json[r'action'])!,
        conditions: RuleBuilderCondition.listFromJson(json[r'conditions']),
        cooldownPeriod: mapValueOfType<String>(json, r'cooldown_period', null),
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        groups: RuleBuilderConditionGroup.listFromJson(json[r'groups']),
        id: mapValueOfType<String>(json, r'id')!,
        logic: mapValueOfType<String>(json, r'logic', null),
        name: mapValueOfType<String>(json, r'name')!,
        ruleType: mapValueOfType<String>(json, r'rule_type')!,
      );
    }
    return null;
  }

  static List<RuleBuilderRule> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RuleBuilderRule>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RuleBuilderRule.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RuleBuilderRule('
        'action: $action, '
        'conditions: $conditions, '
        'cooldownPeriod: $cooldownPeriod, '
        'enabled: $enabled, '
        'groups: $groups, '
        'id: $id, '
        'logic: $logic, '
        'name: $name, '
        'ruleType: $ruleType, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RuleBuilderRule &&
        other.action == action &&
        other.conditions == conditions &&
        other.cooldownPeriod == cooldownPeriod &&
        other.enabled == enabled &&
        other.groups == groups &&
        other.id == id &&
        other.logic == logic &&
        other.name == name &&
        other.ruleType == ruleType;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      action,
      conditions,
      cooldownPeriod,
      enabled,
      groups,
      id,
      logic,
      name,
      ruleType,
    ]);
  }
}
