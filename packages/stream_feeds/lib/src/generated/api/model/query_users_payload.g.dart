// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class QueryUsersPayload {
  const QueryUsersPayload({
    required this.filterConditions,
    this.includeDeactivatedUsers,
    this.limit,
    this.offset,
    this.presence,
    this.sort,
  });

  final Map<String, Object> filterConditions;

  final bool? includeDeactivatedUsers;

  final int? limit;

  final int? offset;

  final bool? presence;

  final List<SortParamRequest>? sort;

  Map<String, dynamic> toJson() {
    return {
      'filter_conditions': filterConditions,
      'include_deactivated_users': includeDeactivatedUsers,
      'limit': limit,
      'offset': offset,
      'presence': presence,
      'sort': sort,
    };
  }

  static QueryUsersPayload? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return QueryUsersPayload(
        filterConditions:
            mapCastOfType<String, Object>(json, r'filter_conditions')!,
        includeDeactivatedUsers:
            mapValueOfType<bool>(json, r'include_deactivated_users', null),
        limit: mapValueOfType<int>(json, r'limit', null),
        offset: mapValueOfType<int>(json, r'offset', null),
        presence: mapValueOfType<bool>(json, r'presence', null),
        sort: SortParamRequest.listFromJson(json[r'sort']),
      );
    }
    return null;
  }

  static List<QueryUsersPayload> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <QueryUsersPayload>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = QueryUsersPayload.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'QueryUsersPayload('
        'filterConditions: $filterConditions, '
        'includeDeactivatedUsers: $includeDeactivatedUsers, '
        'limit: $limit, '
        'offset: $offset, '
        'presence: $presence, '
        'sort: $sort, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is QueryUsersPayload &&
        other.filterConditions == filterConditions &&
        other.includeDeactivatedUsers == includeDeactivatedUsers &&
        other.limit == limit &&
        other.offset == offset &&
        other.presence == presence &&
        other.sort == sort;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      filterConditions,
      includeDeactivatedUsers,
      limit,
      offset,
      presence,
      sort,
    ]);
  }
}
