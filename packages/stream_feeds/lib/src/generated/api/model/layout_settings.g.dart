// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum LayoutSettingsNameEnum {
  custom('custom'),
  grid('grid'),
  mobile('mobile'),
  singleParticipant('single-participant'),
  spotlight('spotlight'),
  unknown('_unknown');

  const LayoutSettingsNameEnum(this.value);
  final String value;

  static LayoutSettingsNameEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'custom':
        return LayoutSettingsNameEnum.custom;
      case 'grid':
        return LayoutSettingsNameEnum.grid;
      case 'mobile':
        return LayoutSettingsNameEnum.mobile;
      case 'single-participant':
        return LayoutSettingsNameEnum.singleParticipant;
      case 'spotlight':
        return LayoutSettingsNameEnum.spotlight;
      default:
        return LayoutSettingsNameEnum.unknown;
    }
  }
}

@immutable
class LayoutSettings {
  const LayoutSettings({
    this.detectOrientation,
    required this.externalAppUrl,
    required this.externalCssUrl,
    required this.name,
    this.options,
  });

  final bool? detectOrientation;

  final String externalAppUrl;

  final String externalCssUrl;

  final LayoutSettingsNameEnum name;

  final Map<String, Object>? options;

  Map<String, dynamic> toJson() {
    return {
      'detect_orientation': detectOrientation,
      'external_app_url': externalAppUrl,
      'external_css_url': externalCssUrl,
      'name': name,
      'options': options,
    };
  }

  static LayoutSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return LayoutSettings(
        detectOrientation:
            mapValueOfType<bool>(json, r'detect_orientation', null),
        externalAppUrl: mapValueOfType<String>(json, r'external_app_url')!,
        externalCssUrl: mapValueOfType<String>(json, r'external_css_url')!,
        name: LayoutSettingsNameEnum.fromValue(json['name'])!,
        options: mapCastOfType<String, Object>(json, r'options'),
      );
    }
    return null;
  }

  static List<LayoutSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <LayoutSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = LayoutSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'LayoutSettings('
        'detectOrientation: $detectOrientation, '
        'externalAppUrl: $externalAppUrl, '
        'externalCssUrl: $externalCssUrl, '
        'name: $name, '
        'options: $options, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is LayoutSettings &&
        other.detectOrientation == detectOrientation &&
        other.externalAppUrl == externalAppUrl &&
        other.externalCssUrl == externalCssUrl &&
        other.name == name &&
        other.options == options;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      detectOrientation,
      externalAppUrl,
      externalCssUrl,
      name,
      options,
    ]);
  }
}
