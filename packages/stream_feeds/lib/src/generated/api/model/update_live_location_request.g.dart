// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class UpdateLiveLocationRequest {
  const UpdateLiveLocationRequest({
    this.endAt,
    this.latitude,
    this.longitude,
    required this.messageId,
  });

  final DateTime? endAt;

  final num? latitude;

  final num? longitude;

  final String messageId;

  Map<String, dynamic> toJson() {
    return {
      'end_at': endAt,
      'latitude': latitude,
      'longitude': longitude,
      'message_id': messageId,
    };
  }

  static UpdateLiveLocationRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UpdateLiveLocationRequest(
        endAt: mapValueOfType<DateTime>(json, r'end_at', null),
        latitude: mapValueOfType<num>(json, r'latitude', null),
        longitude: mapValueOfType<num>(json, r'longitude', null),
        messageId: mapValueOfType<String>(json, r'message_id')!,
      );
    }
    return null;
  }

  static List<UpdateLiveLocationRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UpdateLiveLocationRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UpdateLiveLocationRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UpdateLiveLocationRequest('
        'endAt: $endAt, '
        'latitude: $latitude, '
        'longitude: $longitude, '
        'messageId: $messageId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UpdateLiveLocationRequest &&
        other.endAt == endAt &&
        other.latitude == latitude &&
        other.longitude == longitude &&
        other.messageId == messageId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      endAt,
      latitude,
      longitude,
      messageId,
    ]);
  }
}
