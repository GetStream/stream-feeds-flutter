// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class FeedGroup {
  const FeedGroup({
    required this.appPK,
    required this.createdAt,
    required this.custom,
    required this.defaultViewID,
    required this.defaultVisibility,
    this.deletedAt,
    required this.iD,
    this.lastFeedGetAt,
    this.notification,
    this.stories,
    required this.updatedAt,
  });

  final int appPK;

  final DateTime createdAt;

  final Map<String, Object> custom;

  final String defaultViewID;

  final String defaultVisibility;

  final DateTime? deletedAt;

  final String iD;

  final DateTime? lastFeedGetAt;

  final NotificationConfig? notification;

  final StoriesConfig? stories;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'AppPK': appPK,
      'created_at': createdAt,
      'Custom': custom,
      'DefaultViewID': defaultViewID,
      'DefaultVisibility': defaultVisibility,
      'DeletedAt': deletedAt,
      'ID': iD,
      'LastFeedGetAt': lastFeedGetAt,
      'Notification': notification,
      'Stories': stories,
      'updated_at': updatedAt,
    };
  }

  static FeedGroup? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FeedGroup(
        appPK: mapValueOfType<int>(json, r'AppPK')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'Custom')!,
        defaultViewID: mapValueOfType<String>(json, r'DefaultViewID')!,
        defaultVisibility: mapValueOfType<String>(json, r'DefaultVisibility')!,
        deletedAt: mapValueOfType<DateTime>(json, r'DeletedAt', null),
        iD: mapValueOfType<String>(json, r'ID')!,
        lastFeedGetAt: mapValueOfType<DateTime>(json, r'LastFeedGetAt', null),
        notification:
            NotificationConfig.fromJson(json[r'Notification'] ?? null),
        stories: StoriesConfig.fromJson(json[r'Stories'] ?? null),
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
      );
    }
    return null;
  }

  static List<FeedGroup> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FeedGroup>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FeedGroup.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FeedGroup('
        'appPK: $appPK, '
        'createdAt: $createdAt, '
        'custom: $custom, '
        'defaultViewID: $defaultViewID, '
        'defaultVisibility: $defaultVisibility, '
        'deletedAt: $deletedAt, '
        'iD: $iD, '
        'lastFeedGetAt: $lastFeedGetAt, '
        'notification: $notification, '
        'stories: $stories, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FeedGroup &&
        other.appPK == appPK &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.defaultViewID == defaultViewID &&
        other.defaultVisibility == defaultVisibility &&
        other.deletedAt == deletedAt &&
        other.iD == iD &&
        other.lastFeedGetAt == lastFeedGetAt &&
        other.notification == notification &&
        other.stories == stories &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      appPK,
      createdAt,
      custom,
      defaultViewID,
      defaultVisibility,
      deletedAt,
      iD,
      lastFeedGetAt,
      notification,
      stories,
      updatedAt,
    ]);
  }
}
