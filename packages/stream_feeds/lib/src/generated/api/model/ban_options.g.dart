// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class BanOptions {
  const BanOptions({
    required this.duration,
    required this.ipBan,
    required this.reason,
    required this.shadowBan,
  });

  final int duration;

  final bool ipBan;

  final String reason;

  final bool shadowBan;

  Map<String, dynamic> toJson() {
    return {
      'duration': duration,
      'ip_ban': ipBan,
      'reason': reason,
      'shadow_ban': shadowBan,
    };
  }

  static BanOptions? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BanOptions(
        duration: mapValueOfType<int>(json, r'duration')!,
        ipBan: mapValueOfType<bool>(json, r'ip_ban')!,
        reason: mapValueOfType<String>(json, r'reason')!,
        shadowBan: mapValueOfType<bool>(json, r'shadow_ban')!,
      );
    }
    return null;
  }

  static List<BanOptions> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BanOptions>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BanOptions.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BanOptions('
        'duration: $duration, '
        'ipBan: $ipBan, '
        'reason: $reason, '
        'shadowBan: $shadowBan, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BanOptions &&
        other.duration == duration &&
        other.ipBan == ipBan &&
        other.reason == reason &&
        other.shadowBan == shadowBan;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      duration,
      ipBan,
      reason,
      shadowBan,
    ]);
  }
}
