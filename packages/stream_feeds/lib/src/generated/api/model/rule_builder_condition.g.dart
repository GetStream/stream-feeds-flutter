// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RuleBuilderCondition {
  const RuleBuilderCondition({
    this.confidence,
    this.contentCountRuleParams,
    this.imageContentParams,
    this.imageRuleParams,
    this.textContentParams,
    this.textRuleParams,
    required this.type,
    this.userCreatedWithinParams,
    this.userRuleParams,
    this.videoContentParams,
    this.videoRuleParams,
  });

  final num? confidence;

  final ContentCountRuleParameters? contentCountRuleParams;

  final ImageContentParameters? imageContentParams;

  final ImageRuleParameters? imageRuleParams;

  final TextContentParameters? textContentParams;

  final TextRuleParameters? textRuleParams;

  final String type;

  final UserCreatedWithinParameters? userCreatedWithinParams;

  final UserRuleParameters? userRuleParams;

  final VideoContentParameters? videoContentParams;

  final VideoRuleParameters? videoRuleParams;

  Map<String, dynamic> toJson() {
    return {
      'confidence': confidence,
      'content_count_rule_params': contentCountRuleParams,
      'image_content_params': imageContentParams,
      'image_rule_params': imageRuleParams,
      'text_content_params': textContentParams,
      'text_rule_params': textRuleParams,
      'type': type,
      'user_created_within_params': userCreatedWithinParams,
      'user_rule_params': userRuleParams,
      'video_content_params': videoContentParams,
      'video_rule_params': videoRuleParams,
    };
  }

  static RuleBuilderCondition? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RuleBuilderCondition(
        confidence: mapValueOfType<num>(json, r'confidence', null),
        contentCountRuleParams: ContentCountRuleParameters.fromJson(
            json[r'content_count_rule_params'] ?? null),
        imageContentParams: ImageContentParameters.fromJson(
            json[r'image_content_params'] ?? null),
        imageRuleParams:
            ImageRuleParameters.fromJson(json[r'image_rule_params'] ?? null),
        textContentParams: TextContentParameters.fromJson(
            json[r'text_content_params'] ?? null),
        textRuleParams:
            TextRuleParameters.fromJson(json[r'text_rule_params'] ?? null),
        type: mapValueOfType<String>(json, r'type')!,
        userCreatedWithinParams: UserCreatedWithinParameters.fromJson(
            json[r'user_created_within_params'] ?? null),
        userRuleParams:
            UserRuleParameters.fromJson(json[r'user_rule_params'] ?? null),
        videoContentParams: VideoContentParameters.fromJson(
            json[r'video_content_params'] ?? null),
        videoRuleParams:
            VideoRuleParameters.fromJson(json[r'video_rule_params'] ?? null),
      );
    }
    return null;
  }

  static List<RuleBuilderCondition> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RuleBuilderCondition>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RuleBuilderCondition.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RuleBuilderCondition('
        'confidence: $confidence, '
        'contentCountRuleParams: $contentCountRuleParams, '
        'imageContentParams: $imageContentParams, '
        'imageRuleParams: $imageRuleParams, '
        'textContentParams: $textContentParams, '
        'textRuleParams: $textRuleParams, '
        'type: $type, '
        'userCreatedWithinParams: $userCreatedWithinParams, '
        'userRuleParams: $userRuleParams, '
        'videoContentParams: $videoContentParams, '
        'videoRuleParams: $videoRuleParams, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RuleBuilderCondition &&
        other.confidence == confidence &&
        other.contentCountRuleParams == contentCountRuleParams &&
        other.imageContentParams == imageContentParams &&
        other.imageRuleParams == imageRuleParams &&
        other.textContentParams == textContentParams &&
        other.textRuleParams == textRuleParams &&
        other.type == type &&
        other.userCreatedWithinParams == userCreatedWithinParams &&
        other.userRuleParams == userRuleParams &&
        other.videoContentParams == videoContentParams &&
        other.videoRuleParams == videoRuleParams;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      confidence,
      contentCountRuleParams,
      imageContentParams,
      imageRuleParams,
      textContentParams,
      textRuleParams,
      type,
      userCreatedWithinParams,
      userRuleParams,
      videoContentParams,
      videoRuleParams,
    ]);
  }
}
