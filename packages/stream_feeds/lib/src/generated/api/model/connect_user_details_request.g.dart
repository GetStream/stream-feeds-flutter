// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ConnectUserDetailsRequest {
  const ConnectUserDetailsRequest({
    this.custom,
    required this.id,
    this.image,
    this.invisible,
    this.language,
    this.name,
    this.privacySettings,
  });

  final Map<String, Object>? custom;

  final String id;

  final String? image;

  final bool? invisible;

  final String? language;

  final String? name;

  final PrivacySettingsResponse? privacySettings;

  Map<String, dynamic> toJson() {
    return {
      'custom': custom,
      'id': id,
      'image': image,
      'invisible': invisible,
      'language': language,
      'name': name,
      'privacy_settings': privacySettings,
    };
  }

  static ConnectUserDetailsRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ConnectUserDetailsRequest(
        custom: mapCastOfType<String, Object>(json, r'custom'),
        id: mapValueOfType<String>(json, r'id')!,
        image: mapValueOfType<String>(json, r'image', null),
        invisible: mapValueOfType<bool>(json, r'invisible', null),
        language: mapValueOfType<String>(json, r'language', null),
        name: mapValueOfType<String>(json, r'name', null),
        privacySettings:
            PrivacySettingsResponse.fromJson(json[r'privacy_settings'] ?? null),
      );
    }
    return null;
  }

  static List<ConnectUserDetailsRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ConnectUserDetailsRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ConnectUserDetailsRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ConnectUserDetailsRequest('
        'custom: $custom, '
        'id: $id, '
        'image: $image, '
        'invisible: $invisible, '
        'language: $language, '
        'name: $name, '
        'privacySettings: $privacySettings, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ConnectUserDetailsRequest &&
        other.custom == custom &&
        other.id == id &&
        other.image == image &&
        other.invisible == invisible &&
        other.language == language &&
        other.name == name &&
        other.privacySettings == privacySettings;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      custom,
      id,
      image,
      invisible,
      language,
      name,
      privacySettings,
    ]);
  }
}
