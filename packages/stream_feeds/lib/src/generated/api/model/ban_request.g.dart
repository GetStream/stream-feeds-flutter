// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum BanRequestDeleteMessagesEnum {
  hard('hard'),
  pruning('pruning'),
  soft('soft'),
  unknown('_unknown');

  const BanRequestDeleteMessagesEnum(this.value);
  final String value;

  static BanRequestDeleteMessagesEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'hard':
        return BanRequestDeleteMessagesEnum.hard;
      case 'pruning':
        return BanRequestDeleteMessagesEnum.pruning;
      case 'soft':
        return BanRequestDeleteMessagesEnum.soft;
      default:
        return BanRequestDeleteMessagesEnum.unknown;
    }
  }
}

@immutable
class BanRequest {
  const BanRequest({
    this.bannedBy,
    this.bannedById,
    this.channelCid,
    this.deleteMessages,
    this.ipBan,
    this.reason,
    this.shadow,
    required this.targetUserId,
    this.timeout,
  });

  final UserRequest? bannedBy;

  final String? bannedById;

  final String? channelCid;

  final BanRequestDeleteMessagesEnum? deleteMessages;

  final bool? ipBan;

  final String? reason;

  final bool? shadow;

  final String targetUserId;

  final int? timeout;

  Map<String, dynamic> toJson() {
    return {
      'banned_by': bannedBy,
      'banned_by_id': bannedById,
      'channel_cid': channelCid,
      'delete_messages': deleteMessages,
      'ip_ban': ipBan,
      'reason': reason,
      'shadow': shadow,
      'target_user_id': targetUserId,
      'timeout': timeout,
    };
  }

  static BanRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BanRequest(
        bannedBy: UserRequest.fromJson(json[r'banned_by'] ?? null),
        bannedById: mapValueOfType<String>(json, r'banned_by_id', null),
        channelCid: mapValueOfType<String>(json, r'channel_cid', null),
        deleteMessages:
            BanRequestDeleteMessagesEnum.fromValue(json['delete_messages']),
        ipBan: mapValueOfType<bool>(json, r'ip_ban', null),
        reason: mapValueOfType<String>(json, r'reason', null),
        shadow: mapValueOfType<bool>(json, r'shadow', null),
        targetUserId: mapValueOfType<String>(json, r'target_user_id')!,
        timeout: mapValueOfType<int>(json, r'timeout', null),
      );
    }
    return null;
  }

  static List<BanRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BanRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BanRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BanRequest('
        'bannedBy: $bannedBy, '
        'bannedById: $bannedById, '
        'channelCid: $channelCid, '
        'deleteMessages: $deleteMessages, '
        'ipBan: $ipBan, '
        'reason: $reason, '
        'shadow: $shadow, '
        'targetUserId: $targetUserId, '
        'timeout: $timeout, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BanRequest &&
        other.bannedBy == bannedBy &&
        other.bannedById == bannedById &&
        other.channelCid == channelCid &&
        other.deleteMessages == deleteMessages &&
        other.ipBan == ipBan &&
        other.reason == reason &&
        other.shadow == shadow &&
        other.targetUserId == targetUserId &&
        other.timeout == timeout;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      bannedBy,
      bannedById,
      channelCid,
      deleteMessages,
      ipBan,
      reason,
      shadow,
      targetUserId,
      timeout,
    ]);
  }
}
