// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Call {
  const Call({
    required this.appPK,
    required this.backstage,
    required this.blockedUserIDs,
    required this.blockedUsers,
    required this.cID,
    this.callType,
    required this.channelCID,
    required this.createdAt,
    this.createdBy,
    required this.createdByUserID,
    required this.currentSessionID,
    required this.custom,
    this.deletedAt,
    this.egressUpdatedAt,
    required this.egresses,
    this.endedAt,
    required this.iD,
    this.joinAheadTimeSeconds,
    this.lastHeartbeatAt,
    required this.lastSessionID,
    this.memberCount,
    this.memberLookup,
    required this.members,
    this.session,
    this.settings,
    this.settingsOverrides,
    this.startsAt,
    required this.team,
    required this.thumbnailURL,
    required this.type,
    required this.updatedAt,
  });

  final int appPK;

  final bool backstage;

  final List<String> blockedUserIDs;

  final List<User> blockedUsers;

  final String cID;

  final CallType? callType;

  final String channelCID;

  final DateTime createdAt;

  final User? createdBy;

  final String createdByUserID;

  final String currentSessionID;

  final Map<String, Object> custom;

  final DateTime? deletedAt;

  final DateTime? egressUpdatedAt;

  final List<CallEgress> egresses;

  final DateTime? endedAt;

  final String iD;

  final int? joinAheadTimeSeconds;

  final DateTime? lastHeartbeatAt;

  final String lastSessionID;

  final int? memberCount;

  final MemberLookup? memberLookup;

  final List<CallMember> members;

  final CallSession? session;

  final CallSettings? settings;

  final CallSettings? settingsOverrides;

  final DateTime? startsAt;

  final String team;

  final String thumbnailURL;

  final String type;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'AppPK': appPK,
      'Backstage': backstage,
      'BlockedUserIDs': blockedUserIDs,
      'BlockedUsers': blockedUsers,
      'CID': cID,
      'CallType': callType,
      'ChannelCID': channelCID,
      'CreatedAt': createdAt,
      'CreatedBy': createdBy,
      'CreatedByUserID': createdByUserID,
      'CurrentSessionID': currentSessionID,
      'Custom': custom,
      'DeletedAt': deletedAt,
      'EgressUpdatedAt': egressUpdatedAt,
      'Egresses': egresses,
      'EndedAt': endedAt,
      'ID': iD,
      'JoinAheadTimeSeconds': joinAheadTimeSeconds,
      'LastHeartbeatAt': lastHeartbeatAt,
      'LastSessionID': lastSessionID,
      'MemberCount': memberCount,
      'MemberLookup': memberLookup,
      'Members': members,
      'Session': session,
      'Settings': settings,
      'SettingsOverrides': settingsOverrides,
      'StartsAt': startsAt,
      'Team': team,
      'ThumbnailURL': thumbnailURL,
      'Type': type,
      'UpdatedAt': updatedAt,
    };
  }

  static Call? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Call(
        appPK: mapValueOfType<int>(json, r'AppPK')!,
        backstage: mapValueOfType<bool>(json, r'Backstage')!,
        blockedUserIDs: json[r'BlockedUserIDs'] is Iterable
            ? (json[r'BlockedUserIDs'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        blockedUsers: User.listFromJson(json[r'BlockedUsers']),
        cID: mapValueOfType<String>(json, r'CID')!,
        callType: CallType.fromJson(json[r'CallType'] ?? null),
        channelCID: mapValueOfType<String>(json, r'ChannelCID')!,
        createdAt: mapValueOfType<DateTime>(json, r'CreatedAt')!,
        createdBy: User.fromJson(json[r'CreatedBy'] ?? null),
        createdByUserID: mapValueOfType<String>(json, r'CreatedByUserID')!,
        currentSessionID: mapValueOfType<String>(json, r'CurrentSessionID')!,
        custom: mapCastOfType<String, Object>(json, r'Custom')!,
        deletedAt: mapValueOfType<DateTime>(json, r'DeletedAt', null),
        egressUpdatedAt:
            mapValueOfType<DateTime>(json, r'EgressUpdatedAt', null),
        egresses: CallEgress.listFromJson(json[r'Egresses']),
        endedAt: mapValueOfType<DateTime>(json, r'EndedAt', null),
        iD: mapValueOfType<String>(json, r'ID')!,
        joinAheadTimeSeconds:
            mapValueOfType<int>(json, r'JoinAheadTimeSeconds', null),
        lastHeartbeatAt:
            mapValueOfType<DateTime>(json, r'LastHeartbeatAt', null),
        lastSessionID: mapValueOfType<String>(json, r'LastSessionID')!,
        memberCount: mapValueOfType<int>(json, r'MemberCount', null),
        memberLookup: MemberLookup.fromJson(json[r'MemberLookup'] ?? null),
        members: CallMember.listFromJson(json[r'Members']),
        session: CallSession.fromJson(json[r'Session'] ?? null),
        settings: CallSettings.fromJson(json[r'Settings'] ?? null),
        settingsOverrides:
            CallSettings.fromJson(json[r'SettingsOverrides'] ?? null),
        startsAt: mapValueOfType<DateTime>(json, r'StartsAt', null),
        team: mapValueOfType<String>(json, r'Team')!,
        thumbnailURL: mapValueOfType<String>(json, r'ThumbnailURL')!,
        type: mapValueOfType<String>(json, r'Type')!,
        updatedAt: mapValueOfType<DateTime>(json, r'UpdatedAt')!,
      );
    }
    return null;
  }

  static List<Call> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Call>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Call.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Call('
        'appPK: $appPK, '
        'backstage: $backstage, '
        'blockedUserIDs: $blockedUserIDs, '
        'blockedUsers: $blockedUsers, '
        'cID: $cID, '
        'callType: $callType, '
        'channelCID: $channelCID, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'createdByUserID: $createdByUserID, '
        'currentSessionID: $currentSessionID, '
        'custom: $custom, '
        'deletedAt: $deletedAt, '
        'egressUpdatedAt: $egressUpdatedAt, '
        'egresses: $egresses, '
        'endedAt: $endedAt, '
        'iD: $iD, '
        'joinAheadTimeSeconds: $joinAheadTimeSeconds, '
        'lastHeartbeatAt: $lastHeartbeatAt, '
        'lastSessionID: $lastSessionID, '
        'memberCount: $memberCount, '
        'memberLookup: $memberLookup, '
        'members: $members, '
        'session: $session, '
        'settings: $settings, '
        'settingsOverrides: $settingsOverrides, '
        'startsAt: $startsAt, '
        'team: $team, '
        'thumbnailURL: $thumbnailURL, '
        'type: $type, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Call &&
        other.appPK == appPK &&
        other.backstage == backstage &&
        other.blockedUserIDs == blockedUserIDs &&
        other.blockedUsers == blockedUsers &&
        other.cID == cID &&
        other.callType == callType &&
        other.channelCID == channelCID &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.createdByUserID == createdByUserID &&
        other.currentSessionID == currentSessionID &&
        other.custom == custom &&
        other.deletedAt == deletedAt &&
        other.egressUpdatedAt == egressUpdatedAt &&
        other.egresses == egresses &&
        other.endedAt == endedAt &&
        other.iD == iD &&
        other.joinAheadTimeSeconds == joinAheadTimeSeconds &&
        other.lastHeartbeatAt == lastHeartbeatAt &&
        other.lastSessionID == lastSessionID &&
        other.memberCount == memberCount &&
        other.memberLookup == memberLookup &&
        other.members == members &&
        other.session == session &&
        other.settings == settings &&
        other.settingsOverrides == settingsOverrides &&
        other.startsAt == startsAt &&
        other.team == team &&
        other.thumbnailURL == thumbnailURL &&
        other.type == type &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      appPK,
      backstage,
      blockedUserIDs,
      blockedUsers,
      cID,
      callType,
      channelCID,
      createdAt,
      createdBy,
      createdByUserID,
      currentSessionID,
      custom,
      deletedAt,
      egressUpdatedAt,
      egresses,
      endedAt,
      iD,
      joinAheadTimeSeconds,
      lastHeartbeatAt,
      lastSessionID,
      memberCount,
      memberLookup,
      members,
      session,
      settings,
      settingsOverrides,
      startsAt,
      team,
      thumbnailURL,
      type,
      updatedAt,
    ]);
  }
}
