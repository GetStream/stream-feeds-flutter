// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum ImageSizeCropEnum {
  bottom('bottom'),
  center('center'),
  left('left'),
  right('right'),
  top('top'),
  unknown('_unknown');

  const ImageSizeCropEnum(this.value);
  final String value;

  static ImageSizeCropEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'bottom':
        return ImageSizeCropEnum.bottom;
      case 'center':
        return ImageSizeCropEnum.center;
      case 'left':
        return ImageSizeCropEnum.left;
      case 'right':
        return ImageSizeCropEnum.right;
      case 'top':
        return ImageSizeCropEnum.top;
      default:
        return ImageSizeCropEnum.unknown;
    }
  }
}

enum ImageSizeResizeEnum {
  clip('clip'),
  crop('crop'),
  fill('fill'),
  scale('scale'),
  unknown('_unknown');

  const ImageSizeResizeEnum(this.value);
  final String value;

  static ImageSizeResizeEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'clip':
        return ImageSizeResizeEnum.clip;
      case 'crop':
        return ImageSizeResizeEnum.crop;
      case 'fill':
        return ImageSizeResizeEnum.fill;
      case 'scale':
        return ImageSizeResizeEnum.scale;
      default:
        return ImageSizeResizeEnum.unknown;
    }
  }
}

@immutable
class ImageSize {
  const ImageSize({
    this.crop,
    this.height,
    this.resize,
    this.width,
  });

  final ImageSizeCropEnum? crop;

  final int? height;

  final ImageSizeResizeEnum? resize;

  final int? width;

  Map<String, dynamic> toJson() {
    return {
      'crop': crop,
      'height': height,
      'resize': resize,
      'width': width,
    };
  }

  static ImageSize? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ImageSize(
        crop: ImageSizeCropEnum.fromValue(json['crop']),
        height: mapValueOfType<int>(json, r'height', null),
        resize: ImageSizeResizeEnum.fromValue(json['resize']),
        width: mapValueOfType<int>(json, r'width', null),
      );
    }
    return null;
  }

  static List<ImageSize> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ImageSize>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ImageSize.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ImageSize('
        'crop: $crop, '
        'height: $height, '
        'resize: $resize, '
        'width: $width, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ImageSize &&
        other.crop == crop &&
        other.height == height &&
        other.resize == resize &&
        other.width == width;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      crop,
      height,
      resize,
      width,
    ]);
  }
}
