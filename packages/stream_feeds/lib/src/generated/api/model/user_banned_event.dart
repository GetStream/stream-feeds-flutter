// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

import 'package:json_annotation/json_annotation.dart';
import '../models.dart';

part 'user_banned_event.g.dart';

@JsonSerializable()
class UserBannedEvent {
  const UserBannedEvent({
    required this.channelId,
    required this.channelType,
    required this.cid,
    required this.createdAt,
    required this.createdBy,
    this.expiration,
    this.reason,
    required this.shadow,
    this.team,
    required this.type,
    this.user,
  });

  final String channelId;

  final String channelType;

  final String cid;
  @EpochDateTimeConverter()
  final DateTime createdAt;

  final User createdBy;
  @EpochDateTimeConverter()
  final DateTime? expiration;

  final String? reason;

  final bool shadow;

  final String? team;

  final String type;

  final User? user;

  Map<String, dynamic> toJson() => _$UserBannedEventToJson(this);

  static UserBannedEvent fromJson(Map<String, dynamic> json) =>
      _$UserBannedEventFromJson(json);

  @override
  String toString() {
    return 'UserBannedEvent('
        'channelId: $channelId, '
        'channelType: $channelType, '
        'cid: $cid, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'expiration: $expiration, '
        'reason: $reason, '
        'shadow: $shadow, '
        'team: $team, '
        'type: $type, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UserBannedEvent &&
        other.channelId == channelId &&
        other.channelType == channelType &&
        other.cid == cid &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.expiration == expiration &&
        other.reason == reason &&
        other.shadow == shadow &&
        other.team == team &&
        other.type == type &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      channelId,
      channelType,
      cid,
      createdAt,
      createdBy,
      expiration,
      reason,
      shadow,
      team,
      type,
      user,
    ]);
  }
}
