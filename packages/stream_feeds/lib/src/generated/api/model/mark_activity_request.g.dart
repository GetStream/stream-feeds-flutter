// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class MarkActivityRequest {
  const MarkActivityRequest({
    this.markAllRead,
    this.markAllSeen,
    this.markRead,
    this.markWatched,
  });

  final bool? markAllRead;

  final bool? markAllSeen;

  final List<String>? markRead;

  final List<String>? markWatched;

  Map<String, dynamic> toJson() {
    return {
      'mark_all_read': markAllRead,
      'mark_all_seen': markAllSeen,
      'mark_read': markRead,
      'mark_watched': markWatched,
    };
  }

  static MarkActivityRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return MarkActivityRequest(
        markAllRead: mapValueOfType<bool>(json, r'mark_all_read', null),
        markAllSeen: mapValueOfType<bool>(json, r'mark_all_seen', null),
        markRead: json[r'mark_read'] is Iterable
            ? (json[r'mark_read'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        markWatched: json[r'mark_watched'] is Iterable
            ? (json[r'mark_watched'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
      );
    }
    return null;
  }

  static List<MarkActivityRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <MarkActivityRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = MarkActivityRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'MarkActivityRequest('
        'markAllRead: $markAllRead, '
        'markAllSeen: $markAllSeen, '
        'markRead: $markRead, '
        'markWatched: $markWatched, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is MarkActivityRequest &&
        other.markAllRead == markAllRead &&
        other.markAllSeen == markAllSeen &&
        other.markRead == markRead &&
        other.markWatched == markWatched;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      markAllRead,
      markAllSeen,
      markRead,
      markWatched,
    ]);
  }
}
