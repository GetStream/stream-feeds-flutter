// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class VelocityFilterConfig {
  const VelocityFilterConfig({
    required this.advancedFilters,
    this.async,
    required this.cascadingActions,
    required this.cidsPerUser,
    required this.enabled,
    required this.firstMessageOnly,
    required this.rules,
  });

  final bool advancedFilters;

  final bool? async;

  final bool cascadingActions;

  final int cidsPerUser;

  final bool enabled;

  final bool firstMessageOnly;

  final List<VelocityFilterConfigRule> rules;

  Map<String, dynamic> toJson() {
    return {
      'advanced_filters': advancedFilters,
      'async': async,
      'cascading_actions': cascadingActions,
      'cids_per_user': cidsPerUser,
      'enabled': enabled,
      'first_message_only': firstMessageOnly,
      'rules': rules,
    };
  }

  static VelocityFilterConfig? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return VelocityFilterConfig(
        advancedFilters: mapValueOfType<bool>(json, r'advanced_filters')!,
        async: mapValueOfType<bool>(json, r'async', null),
        cascadingActions: mapValueOfType<bool>(json, r'cascading_actions')!,
        cidsPerUser: mapValueOfType<int>(json, r'cids_per_user')!,
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        firstMessageOnly: mapValueOfType<bool>(json, r'first_message_only')!,
        rules: VelocityFilterConfigRule.listFromJson(json[r'rules']),
      );
    }
    return null;
  }

  static List<VelocityFilterConfig> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <VelocityFilterConfig>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = VelocityFilterConfig.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'VelocityFilterConfig('
        'advancedFilters: $advancedFilters, '
        'async: $async, '
        'cascadingActions: $cascadingActions, '
        'cidsPerUser: $cidsPerUser, '
        'enabled: $enabled, '
        'firstMessageOnly: $firstMessageOnly, '
        'rules: $rules, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is VelocityFilterConfig &&
        other.advancedFilters == advancedFilters &&
        other.async == async &&
        other.cascadingActions == cascadingActions &&
        other.cidsPerUser == cidsPerUser &&
        other.enabled == enabled &&
        other.firstMessageOnly == firstMessageOnly &&
        other.rules == rules;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      advancedFilters,
      async,
      cascadingActions,
      cidsPerUser,
      enabled,
      firstMessageOnly,
      rules,
    ]);
  }
}
