// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum ActivityRequestVisibilityEnum {
  private('private'),
  public('public'),
  tag('tag'),
  unknown('_unknown');

  const ActivityRequestVisibilityEnum(this.value);
  final String value;

  static ActivityRequestVisibilityEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'private':
        return ActivityRequestVisibilityEnum.private;
      case 'public':
        return ActivityRequestVisibilityEnum.public;
      case 'tag':
        return ActivityRequestVisibilityEnum.tag;
      default:
        return ActivityRequestVisibilityEnum.unknown;
    }
  }
}

@immutable
class ActivityRequest {
  const ActivityRequest({
    this.attachments,
    this.custom,
    this.expiresAt,
    required this.fids,
    this.filterTags,
    this.id,
    this.interestTags,
    this.location,
    this.mentionedUserIds,
    this.parentId,
    this.pollId,
    this.searchData,
    this.text,
    required this.type,
    this.visibility,
    this.visibilityTag,
  });

  final List<Attachment>? attachments;

  final Map<String, Object>? custom;

  final String? expiresAt;

  final List<String> fids;

  final List<String>? filterTags;

  final String? id;

  final List<String>? interestTags;

  final ActivityLocation? location;

  final List<String>? mentionedUserIds;

  final String? parentId;

  final String? pollId;

  final Map<String, Object>? searchData;

  final String? text;

  final String type;

  final ActivityRequestVisibilityEnum? visibility;

  final String? visibilityTag;

  Map<String, dynamic> toJson() {
    return {
      'attachments': attachments,
      'custom': custom,
      'expires_at': expiresAt,
      'fids': fids,
      'filter_tags': filterTags,
      'id': id,
      'interest_tags': interestTags,
      'location': location,
      'mentioned_user_ids': mentionedUserIds,
      'parent_id': parentId,
      'poll_id': pollId,
      'search_data': searchData,
      'text': text,
      'type': type,
      'visibility': visibility,
      'visibility_tag': visibilityTag,
    };
  }

  static ActivityRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ActivityRequest(
        attachments: Attachment.listFromJson(json[r'attachments']),
        custom: mapCastOfType<String, Object>(json, r'custom'),
        expiresAt: mapValueOfType<String>(json, r'expires_at', null),
        fids: json[r'fids'] is Iterable
            ? (json[r'fids'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        filterTags: json[r'filter_tags'] is Iterable
            ? (json[r'filter_tags'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        id: mapValueOfType<String>(json, r'id', null),
        interestTags: json[r'interest_tags'] is Iterable
            ? (json[r'interest_tags'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        location: ActivityLocation.fromJson(json[r'location'] ?? null),
        mentionedUserIds: json[r'mentioned_user_ids'] is Iterable
            ? (json[r'mentioned_user_ids'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        parentId: mapValueOfType<String>(json, r'parent_id', null),
        pollId: mapValueOfType<String>(json, r'poll_id', null),
        searchData: mapCastOfType<String, Object>(json, r'search_data'),
        text: mapValueOfType<String>(json, r'text', null),
        type: mapValueOfType<String>(json, r'type')!,
        visibility: ActivityRequestVisibilityEnum.fromValue(json['visibility']),
        visibilityTag: mapValueOfType<String>(json, r'visibility_tag', null),
      );
    }
    return null;
  }

  static List<ActivityRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ActivityRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ActivityRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ActivityRequest('
        'attachments: $attachments, '
        'custom: $custom, '
        'expiresAt: $expiresAt, '
        'fids: $fids, '
        'filterTags: $filterTags, '
        'id: $id, '
        'interestTags: $interestTags, '
        'location: $location, '
        'mentionedUserIds: $mentionedUserIds, '
        'parentId: $parentId, '
        'pollId: $pollId, '
        'searchData: $searchData, '
        'text: $text, '
        'type: $type, '
        'visibility: $visibility, '
        'visibilityTag: $visibilityTag, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ActivityRequest &&
        other.attachments == attachments &&
        other.custom == custom &&
        other.expiresAt == expiresAt &&
        other.fids == fids &&
        other.filterTags == filterTags &&
        other.id == id &&
        other.interestTags == interestTags &&
        other.location == location &&
        other.mentionedUserIds == mentionedUserIds &&
        other.parentId == parentId &&
        other.pollId == pollId &&
        other.searchData == searchData &&
        other.text == text &&
        other.type == type &&
        other.visibility == visibility &&
        other.visibilityTag == visibilityTag;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      attachments,
      custom,
      expiresAt,
      fids,
      filterTags,
      id,
      interestTags,
      location,
      mentionedUserIds,
      parentId,
      pollId,
      searchData,
      text,
      type,
      visibility,
      visibilityTag,
    ]);
  }
}
