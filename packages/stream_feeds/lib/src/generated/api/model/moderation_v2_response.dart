// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file

// ignore_for_file: unused_import

import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';
import '../models.dart';

part 'moderation_v2_response.g.dart';

@immutable
@JsonSerializable()
class ModerationV2Response {
  const ModerationV2Response({
    required this.action,
    this.blocklistMatched,
    this.imageHarms,
    required this.originalText,
    this.platformCircumvented,
    this.semanticFilterMatched,
    this.textHarms,
  });

  final String action;

  final String? blocklistMatched;

  final List<String>? imageHarms;

  final String originalText;

  final bool? platformCircumvented;

  final String? semanticFilterMatched;

  final List<String>? textHarms;

  Map<String, dynamic> toJson() => _$ModerationV2ResponseToJson(this);

  static ModerationV2Response fromJson(Map<String, dynamic> json) =>
      _$ModerationV2ResponseFromJson(json);

  @override
  String toString() {
    return 'ModerationV2Response('
        'action: $action, '
        'blocklistMatched: $blocklistMatched, '
        'imageHarms: $imageHarms, '
        'originalText: $originalText, '
        'platformCircumvented: $platformCircumvented, '
        'semanticFilterMatched: $semanticFilterMatched, '
        'textHarms: $textHarms, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ModerationV2Response &&
        other.action == action &&
        other.blocklistMatched == blocklistMatched &&
        other.imageHarms == imageHarms &&
        other.originalText == originalText &&
        other.platformCircumvented == platformCircumvented &&
        other.semanticFilterMatched == semanticFilterMatched &&
        other.textHarms == textHarms;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      action,
      blocklistMatched,
      imageHarms,
      originalText,
      platformCircumvented,
      semanticFilterMatched,
      textHarms,
    ]);
  }
}
