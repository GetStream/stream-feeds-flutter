// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RuleBuilderAction {
  const RuleBuilderAction({
    this.banOptions,
    this.flagContentOptions,
    this.flagUserOptions,
    this.removeContentOptions,
    required this.type,
  });

  final BanOptions? banOptions;

  final FlagContentOptions? flagContentOptions;

  final FlagUserOptions? flagUserOptions;

  final BlockContentOptions? removeContentOptions;

  final String type;

  Map<String, dynamic> toJson() {
    return {
      'ban_options': banOptions,
      'flag_content_options': flagContentOptions,
      'flag_user_options': flagUserOptions,
      'remove_content_options': removeContentOptions,
      'type': type,
    };
  }

  static RuleBuilderAction? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RuleBuilderAction(
        banOptions: BanOptions.fromJson(json[r'ban_options'] ?? null),
        flagContentOptions:
            FlagContentOptions.fromJson(json[r'flag_content_options'] ?? null),
        flagUserOptions:
            FlagUserOptions.fromJson(json[r'flag_user_options'] ?? null),
        removeContentOptions: BlockContentOptions.fromJson(
            json[r'remove_content_options'] ?? null),
        type: mapValueOfType<String>(json, r'type')!,
      );
    }
    return null;
  }

  static List<RuleBuilderAction> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RuleBuilderAction>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RuleBuilderAction.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RuleBuilderAction('
        'banOptions: $banOptions, '
        'flagContentOptions: $flagContentOptions, '
        'flagUserOptions: $flagUserOptions, '
        'removeContentOptions: $removeContentOptions, '
        'type: $type, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RuleBuilderAction &&
        other.banOptions == banOptions &&
        other.flagContentOptions == flagContentOptions &&
        other.flagUserOptions == flagUserOptions &&
        other.removeContentOptions == removeContentOptions &&
        other.type == type;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      banOptions,
      flagContentOptions,
      flagUserOptions,
      removeContentOptions,
      type,
    ]);
  }
}
