// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class APNS {
  const APNS({
    required this.body,
    this.contentAvailable,
    this.data,
    this.mutableContent,
    this.sound,
    required this.title,
  });

  final String body;

  final int? contentAvailable;

  final Map<String, Object>? data;

  final int? mutableContent;

  final String? sound;

  final String title;

  Map<String, dynamic> toJson() {
    return {
      'body': body,
      'content-available': contentAvailable,
      'data': data,
      'mutable-content': mutableContent,
      'sound': sound,
      'title': title,
    };
  }

  static APNS? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return APNS(
        body: mapValueOfType<String>(json, r'body')!,
        contentAvailable: mapValueOfType<int>(json, r'content-available', null),
        data: mapCastOfType<String, Object>(json, r'data'),
        mutableContent: mapValueOfType<int>(json, r'mutable-content', null),
        sound: mapValueOfType<String>(json, r'sound', null),
        title: mapValueOfType<String>(json, r'title')!,
      );
    }
    return null;
  }

  static List<APNS> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <APNS>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = APNS.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'APNS('
        'body: $body, '
        'contentAvailable: $contentAvailable, '
        'data: $data, '
        'mutableContent: $mutableContent, '
        'sound: $sound, '
        'title: $title, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is APNS &&
        other.body == body &&
        other.contentAvailable == contentAvailable &&
        other.data == data &&
        other.mutableContent == mutableContent &&
        other.sound == sound &&
        other.title == title;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      body,
      contentAvailable,
      data,
      mutableContent,
      sound,
      title,
    ]);
  }
}
