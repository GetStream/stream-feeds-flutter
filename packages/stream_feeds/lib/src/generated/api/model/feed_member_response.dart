// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file

// ignore_for_file: unused_import

import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';
import '../models.dart';

part 'feed_member_response.g.dart';

@JsonEnum(alwaysCreate: true)
enum FeedMemberResponseStatusEnum {
  @JsonValue('member')
  member,
  @JsonValue('pending')
  pending,
  @JsonValue('rejected')
  rejected,
  unknown;
}

@immutable
@JsonSerializable()
class FeedMemberResponse {
  const FeedMemberResponse({
    required this.createdAt,
    this.custom,
    this.inviteAcceptedAt,
    this.inviteRejectedAt,
    required this.role,
    required this.status,
    required this.updatedAt,
    required this.user,
  });
  @EpochDateTimeConverter()
  final DateTime createdAt;

  final Map<String, Object>? custom;
  @EpochDateTimeConverter()
  final DateTime? inviteAcceptedAt;
  @EpochDateTimeConverter()
  final DateTime? inviteRejectedAt;

  final String role;

  final FeedMemberResponseStatusEnum status;
  @EpochDateTimeConverter()
  final DateTime updatedAt;

  final UserResponse user;

  Map<String, dynamic> toJson() => _$FeedMemberResponseToJson(this);

  static FeedMemberResponse fromJson(Map<String, dynamic> json) =>
      _$FeedMemberResponseFromJson(json);

  @override
  String toString() {
    return 'FeedMemberResponse('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'inviteAcceptedAt: $inviteAcceptedAt, '
        'inviteRejectedAt: $inviteRejectedAt, '
        'role: $role, '
        'status: $status, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FeedMemberResponse &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.inviteAcceptedAt == inviteAcceptedAt &&
        other.inviteRejectedAt == inviteRejectedAt &&
        other.role == role &&
        other.status == status &&
        other.updatedAt == updatedAt &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      inviteAcceptedAt,
      inviteRejectedAt,
      role,
      status,
      updatedAt,
      user,
    ]);
  }
}
