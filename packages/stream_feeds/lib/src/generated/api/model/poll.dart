// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file

// ignore_for_file: unused_import

import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';
import '../models.dart';

part 'poll.g.dart';

@immutable
@JsonSerializable()
class Poll {
  const Poll({
    required this.allowAnswers,
    required this.allowUserSuggestedOptions,
    required this.answersCount,
    required this.createdAt,
    this.createdBy,
    required this.createdById,
    required this.custom,
    required this.description,
    required this.enforceUniqueVote,
    required this.id,
    this.isClosed,
    required this.latestAnswers,
    required this.latestVotesByOption,
    this.maxVotesAllowed,
    required this.name,
    required this.options,
    required this.ownVotes,
    required this.updatedAt,
    required this.voteCount,
    required this.voteCountsByOption,
    this.votingVisibility,
  });

  final bool allowAnswers;

  final bool allowUserSuggestedOptions;

  final int answersCount;
  @EpochDateTimeConverter()
  final DateTime createdAt;

  final User? createdBy;

  final String createdById;

  final Map<String, Object> custom;

  final String description;

  final bool enforceUniqueVote;

  final String id;

  final bool? isClosed;

  final List<PollVote> latestAnswers;

  final Map<String, List<PollVote>> latestVotesByOption;

  final int? maxVotesAllowed;

  final String name;

  final List<PollOption> options;

  final List<PollVote> ownVotes;
  @EpochDateTimeConverter()
  final DateTime updatedAt;

  final int voteCount;

  final Map<String, int> voteCountsByOption;

  final String? votingVisibility;

  Map<String, dynamic> toJson() => _$PollToJson(this);

  static Poll fromJson(Map<String, dynamic> json) => _$PollFromJson(json);

  @override
  String toString() {
    return 'Poll('
        'allowAnswers: $allowAnswers, '
        'allowUserSuggestedOptions: $allowUserSuggestedOptions, '
        'answersCount: $answersCount, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'createdById: $createdById, '
        'custom: $custom, '
        'description: $description, '
        'enforceUniqueVote: $enforceUniqueVote, '
        'id: $id, '
        'isClosed: $isClosed, '
        'latestAnswers: $latestAnswers, '
        'latestVotesByOption: $latestVotesByOption, '
        'maxVotesAllowed: $maxVotesAllowed, '
        'name: $name, '
        'options: $options, '
        'ownVotes: $ownVotes, '
        'updatedAt: $updatedAt, '
        'voteCount: $voteCount, '
        'voteCountsByOption: $voteCountsByOption, '
        'votingVisibility: $votingVisibility, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Poll &&
        other.allowAnswers == allowAnswers &&
        other.allowUserSuggestedOptions == allowUserSuggestedOptions &&
        other.answersCount == answersCount &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.createdById == createdById &&
        other.custom == custom &&
        other.description == description &&
        other.enforceUniqueVote == enforceUniqueVote &&
        other.id == id &&
        other.isClosed == isClosed &&
        other.latestAnswers == latestAnswers &&
        other.latestVotesByOption == latestVotesByOption &&
        other.maxVotesAllowed == maxVotesAllowed &&
        other.name == name &&
        other.options == options &&
        other.ownVotes == ownVotes &&
        other.updatedAt == updatedAt &&
        other.voteCount == voteCount &&
        other.voteCountsByOption == voteCountsByOption &&
        other.votingVisibility == votingVisibility;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      allowAnswers,
      allowUserSuggestedOptions,
      answersCount,
      createdAt,
      createdBy,
      createdById,
      custom,
      description,
      enforceUniqueVote,
      id,
      isClosed,
      latestAnswers,
      latestVotesByOption,
      maxVotesAllowed,
      name,
      options,
      ownVotes,
      updatedAt,
      voteCount,
      voteCountsByOption,
      votingVisibility,
    ]);
  }
}
