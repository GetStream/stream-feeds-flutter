// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class NotificationStatusResponse {
  const NotificationStatusResponse({
    this.lastSeenAt,
    this.readActivities,
    required this.unread,
    required this.unseen,
  });

  final DateTime? lastSeenAt;

  final List<String>? readActivities;

  final int unread;

  final int unseen;

  Map<String, dynamic> toJson() {
    return {
      'last_seen_at': lastSeenAt,
      'read_activities': readActivities,
      'unread': unread,
      'unseen': unseen,
    };
  }

  static NotificationStatusResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return NotificationStatusResponse(
        lastSeenAt: mapValueOfType<DateTime>(json, r'last_seen_at', null),
        readActivities: json[r'read_activities'] is Iterable
            ? (json[r'read_activities'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        unread: mapValueOfType<int>(json, r'unread')!,
        unseen: mapValueOfType<int>(json, r'unseen')!,
      );
    }
    return null;
  }

  static List<NotificationStatusResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <NotificationStatusResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = NotificationStatusResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'NotificationStatusResponse('
        'lastSeenAt: $lastSeenAt, '
        'readActivities: $readActivities, '
        'unread: $unread, '
        'unseen: $unseen, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is NotificationStatusResponse &&
        other.lastSeenAt == lastSeenAt &&
        other.readActivities == readActivities &&
        other.unread == unread &&
        other.unseen == unseen;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      lastSeenAt,
      readActivities,
      unread,
      unseen,
    ]);
  }
}
