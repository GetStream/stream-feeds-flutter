// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum FrameRecordSettingsModeEnum {
  autoOn('auto-on'),
  available('available'),
  disabled('disabled'),
  unknown('_unknown');

  const FrameRecordSettingsModeEnum(this.value);
  final String value;

  static FrameRecordSettingsModeEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'auto-on':
        return FrameRecordSettingsModeEnum.autoOn;
      case 'available':
        return FrameRecordSettingsModeEnum.available;
      case 'disabled':
        return FrameRecordSettingsModeEnum.disabled;
      default:
        return FrameRecordSettingsModeEnum.unknown;
    }
  }
}

@immutable
class FrameRecordSettings {
  const FrameRecordSettings({
    required this.captureIntervalInSeconds,
    required this.mode,
    this.quality,
  });

  final int captureIntervalInSeconds;

  final FrameRecordSettingsModeEnum mode;

  final String? quality;

  Map<String, dynamic> toJson() {
    return {
      'capture_interval_in_seconds': captureIntervalInSeconds,
      'mode': mode,
      'quality': quality,
    };
  }

  static FrameRecordSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FrameRecordSettings(
        captureIntervalInSeconds:
            mapValueOfType<int>(json, r'capture_interval_in_seconds')!,
        mode: FrameRecordSettingsModeEnum.fromValue(json['mode'])!,
        quality: mapValueOfType<String>(json, r'quality', null),
      );
    }
    return null;
  }

  static List<FrameRecordSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FrameRecordSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FrameRecordSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FrameRecordSettings('
        'captureIntervalInSeconds: $captureIntervalInSeconds, '
        'mode: $mode, '
        'quality: $quality, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FrameRecordSettings &&
        other.captureIntervalInSeconds == captureIntervalInSeconds &&
        other.mode == mode &&
        other.quality == quality;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      captureIntervalInSeconds,
      mode,
      quality,
    ]);
  }
}
