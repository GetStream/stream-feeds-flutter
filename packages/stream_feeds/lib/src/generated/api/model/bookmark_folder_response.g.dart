// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class BookmarkFolderResponse {
  const BookmarkFolderResponse({
    required this.createdAt,
    this.custom,
    required this.id,
    required this.name,
    required this.updatedAt,
  });

  final DateTime createdAt;

  final Map<String, Object>? custom;

  final String id;

  final String name;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'custom': custom,
      'id': id,
      'name': name,
      'updated_at': updatedAt,
    };
  }

  static BookmarkFolderResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BookmarkFolderResponse(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom'),
        id: mapValueOfType<String>(json, r'id')!,
        name: mapValueOfType<String>(json, r'name')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
      );
    }
    return null;
  }

  static List<BookmarkFolderResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BookmarkFolderResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BookmarkFolderResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BookmarkFolderResponse('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'id: $id, '
        'name: $name, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BookmarkFolderResponse &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.id == id &&
        other.name == name &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      id,
      name,
      updatedAt,
    ]);
  }
}
