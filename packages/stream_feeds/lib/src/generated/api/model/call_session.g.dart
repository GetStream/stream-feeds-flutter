// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class CallSession {
  const CallSession({
    required this.acceptedBy,
    required this.activeSFUs,
    required this.anonymousParticipantCount,
    required this.appPK,
    required this.callID,
    required this.callType,
    required this.createdAt,
    this.deletedAt,
    this.endedAt,
    this.liveEndedAt,
    this.liveStartedAt,
    required this.missedBy,
    required this.participants,
    required this.participantsCountByRole,
    required this.rejectedBy,
    this.ringAt,
    required this.sFUIDs,
    required this.sessionID,
    this.startedAt,
    this.timerEndsAt,
    required this.userPermissionOverrides,
  });

  final Map<String, DateTime> acceptedBy;

  final List<SFUIDLastSeen> activeSFUs;

  final int anonymousParticipantCount;

  final int appPK;

  final String callID;

  final String callType;

  final DateTime createdAt;

  final DateTime? deletedAt;

  final DateTime? endedAt;

  final DateTime? liveEndedAt;

  final DateTime? liveStartedAt;

  final Map<String, DateTime> missedBy;

  final List<CallParticipant> participants;

  final Map<String, int> participantsCountByRole;

  final Map<String, DateTime> rejectedBy;

  final DateTime? ringAt;

  final List<String> sFUIDs;

  final String sessionID;

  final DateTime? startedAt;

  final DateTime? timerEndsAt;

  final Map<String, Map<String, bool>> userPermissionOverrides;

  Map<String, dynamic> toJson() {
    return {
      'AcceptedBy': acceptedBy,
      'ActiveSFUs': activeSFUs,
      'AnonymousParticipantCount': anonymousParticipantCount,
      'AppPK': appPK,
      'CallID': callID,
      'CallType': callType,
      'CreatedAt': createdAt,
      'DeletedAt': deletedAt,
      'EndedAt': endedAt,
      'LiveEndedAt': liveEndedAt,
      'LiveStartedAt': liveStartedAt,
      'MissedBy': missedBy,
      'Participants': participants,
      'ParticipantsCountByRole': participantsCountByRole,
      'RejectedBy': rejectedBy,
      'RingAt': ringAt,
      'SFUIDs': sFUIDs,
      'SessionID': sessionID,
      'StartedAt': startedAt,
      'TimerEndsAt': timerEndsAt,
      'UserPermissionOverrides': userPermissionOverrides,
    };
  }

  static CallSession? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallSession(
        acceptedBy: mapCastOfType<String, DateTime>(json, r'AcceptedBy')!,
        activeSFUs: SFUIDLastSeen.listFromJson(json[r'ActiveSFUs']),
        anonymousParticipantCount:
            mapValueOfType<int>(json, r'AnonymousParticipantCount')!,
        appPK: mapValueOfType<int>(json, r'AppPK')!,
        callID: mapValueOfType<String>(json, r'CallID')!,
        callType: mapValueOfType<String>(json, r'CallType')!,
        createdAt: mapValueOfType<DateTime>(json, r'CreatedAt')!,
        deletedAt: mapValueOfType<DateTime>(json, r'DeletedAt', null),
        endedAt: mapValueOfType<DateTime>(json, r'EndedAt', null),
        liveEndedAt: mapValueOfType<DateTime>(json, r'LiveEndedAt', null),
        liveStartedAt: mapValueOfType<DateTime>(json, r'LiveStartedAt', null),
        missedBy: mapCastOfType<String, DateTime>(json, r'MissedBy')!,
        participants: CallParticipant.listFromJson(json[r'Participants']),
        participantsCountByRole:
            mapCastOfType<String, int>(json, r'ParticipantsCountByRole')!,
        rejectedBy: mapCastOfType<String, DateTime>(json, r'RejectedBy')!,
        ringAt: mapValueOfType<DateTime>(json, r'RingAt', null),
        sFUIDs: json[r'SFUIDs'] is Iterable
            ? (json[r'SFUIDs'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        sessionID: mapValueOfType<String>(json, r'SessionID')!,
        startedAt: mapValueOfType<DateTime>(json, r'StartedAt', null),
        timerEndsAt: mapValueOfType<DateTime>(json, r'TimerEndsAt', null),
        userPermissionOverrides: mapCastOfType<String, Map<String, bool>>(
            json, r'UserPermissionOverrides')!,
      );
    }
    return null;
  }

  static List<CallSession> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallSession>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallSession.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallSession('
        'acceptedBy: $acceptedBy, '
        'activeSFUs: $activeSFUs, '
        'anonymousParticipantCount: $anonymousParticipantCount, '
        'appPK: $appPK, '
        'callID: $callID, '
        'callType: $callType, '
        'createdAt: $createdAt, '
        'deletedAt: $deletedAt, '
        'endedAt: $endedAt, '
        'liveEndedAt: $liveEndedAt, '
        'liveStartedAt: $liveStartedAt, '
        'missedBy: $missedBy, '
        'participants: $participants, '
        'participantsCountByRole: $participantsCountByRole, '
        'rejectedBy: $rejectedBy, '
        'ringAt: $ringAt, '
        'sFUIDs: $sFUIDs, '
        'sessionID: $sessionID, '
        'startedAt: $startedAt, '
        'timerEndsAt: $timerEndsAt, '
        'userPermissionOverrides: $userPermissionOverrides, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallSession &&
        other.acceptedBy == acceptedBy &&
        other.activeSFUs == activeSFUs &&
        other.anonymousParticipantCount == anonymousParticipantCount &&
        other.appPK == appPK &&
        other.callID == callID &&
        other.callType == callType &&
        other.createdAt == createdAt &&
        other.deletedAt == deletedAt &&
        other.endedAt == endedAt &&
        other.liveEndedAt == liveEndedAt &&
        other.liveStartedAt == liveStartedAt &&
        other.missedBy == missedBy &&
        other.participants == participants &&
        other.participantsCountByRole == participantsCountByRole &&
        other.rejectedBy == rejectedBy &&
        other.ringAt == ringAt &&
        other.sFUIDs == sFUIDs &&
        other.sessionID == sessionID &&
        other.startedAt == startedAt &&
        other.timerEndsAt == timerEndsAt &&
        other.userPermissionOverrides == userPermissionOverrides;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      acceptedBy,
      activeSFUs,
      anonymousParticipantCount,
      appPK,
      callID,
      callType,
      createdAt,
      deletedAt,
      endedAt,
      liveEndedAt,
      liveStartedAt,
      missedBy,
      participants,
      participantsCountByRole,
      rejectedBy,
      ringAt,
      sFUIDs,
      sessionID,
      startedAt,
      timerEndsAt,
      userPermissionOverrides,
    ]);
  }
}
