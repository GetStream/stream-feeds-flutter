// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class SFUIDLastSeen {
  const SFUIDLastSeen({
    required this.id,
    required this.lastSeen,
    required this.processStartTime,
  });

  final String id;

  final DateTime lastSeen;

  final int processStartTime;

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'last_seen': lastSeen,
      'process_start_time': processStartTime,
    };
  }

  static SFUIDLastSeen? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return SFUIDLastSeen(
        id: mapValueOfType<String>(json, r'id')!,
        lastSeen: mapValueOfType<DateTime>(json, r'last_seen')!,
        processStartTime: mapValueOfType<int>(json, r'process_start_time')!,
      );
    }
    return null;
  }

  static List<SFUIDLastSeen> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <SFUIDLastSeen>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = SFUIDLastSeen.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'SFUIDLastSeen('
        'id: $id, '
        'lastSeen: $lastSeen, '
        'processStartTime: $processStartTime, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is SFUIDLastSeen &&
        other.id == id &&
        other.lastSeen == lastSeen &&
        other.processStartTime == processStartTime;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      id,
      lastSeen,
      processStartTime,
    ]);
  }
}
