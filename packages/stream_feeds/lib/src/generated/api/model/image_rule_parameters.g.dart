// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ImageRuleParameters {
  const ImageRuleParameters({
    this.harmLabels,
    required this.threshold,
    required this.timeWindow,
  });

  final List<String>? harmLabels;

  final int threshold;

  final String timeWindow;

  Map<String, dynamic> toJson() {
    return {
      'harm_labels': harmLabels,
      'threshold': threshold,
      'time_window': timeWindow,
    };
  }

  static ImageRuleParameters? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ImageRuleParameters(
        harmLabels: json[r'harm_labels'] is Iterable
            ? (json[r'harm_labels'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        threshold: mapValueOfType<int>(json, r'threshold')!,
        timeWindow: mapValueOfType<String>(json, r'time_window')!,
      );
    }
    return null;
  }

  static List<ImageRuleParameters> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ImageRuleParameters>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ImageRuleParameters.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ImageRuleParameters('
        'harmLabels: $harmLabels, '
        'threshold: $threshold, '
        'timeWindow: $timeWindow, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ImageRuleParameters &&
        other.harmLabels == harmLabels &&
        other.threshold == threshold &&
        other.timeWindow == timeWindow;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      harmLabels,
      threshold,
      timeWindow,
    ]);
  }
}
