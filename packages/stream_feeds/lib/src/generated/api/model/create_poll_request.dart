// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file

// ignore_for_file: unused_import

import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';
import '../models.dart';

part 'create_poll_request.g.dart';

@JsonEnum(alwaysCreate: true)
enum CreatePollRequestVotingVisibilityEnum {
  @JsonValue('anonymous')
  anonymous,
  @JsonValue('public')
  public,
  unknown;
}

@immutable
@JsonSerializable()
class CreatePollRequest {
  const CreatePollRequest({
    this.allowAnswers,
    this.allowUserSuggestedOptions,
    this.custom,
    this.description,
    this.enforceUniqueVote,
    this.id,
    this.isClosed,
    this.maxVotesAllowed,
    required this.name,
    this.options,
    this.votingVisibility,
  });

  final bool? allowAnswers;

  final bool? allowUserSuggestedOptions;

  final Map<String, Object>? custom;

  final String? description;

  final bool? enforceUniqueVote;

  final String? id;

  final bool? isClosed;

  final int? maxVotesAllowed;

  final String name;

  final List<PollOptionInput>? options;

  final CreatePollRequestVotingVisibilityEnum? votingVisibility;

  Map<String, dynamic> toJson() => _$CreatePollRequestToJson(this);

  static CreatePollRequest fromJson(Map<String, dynamic> json) =>
      _$CreatePollRequestFromJson(json);

  @override
  String toString() {
    return 'CreatePollRequest('
        'allowAnswers: $allowAnswers, '
        'allowUserSuggestedOptions: $allowUserSuggestedOptions, '
        'custom: $custom, '
        'description: $description, '
        'enforceUniqueVote: $enforceUniqueVote, '
        'id: $id, '
        'isClosed: $isClosed, '
        'maxVotesAllowed: $maxVotesAllowed, '
        'name: $name, '
        'options: $options, '
        'votingVisibility: $votingVisibility, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CreatePollRequest &&
        other.allowAnswers == allowAnswers &&
        other.allowUserSuggestedOptions == allowUserSuggestedOptions &&
        other.custom == custom &&
        other.description == description &&
        other.enforceUniqueVote == enforceUniqueVote &&
        other.id == id &&
        other.isClosed == isClosed &&
        other.maxVotesAllowed == maxVotesAllowed &&
        other.name == name &&
        other.options == options &&
        other.votingVisibility == votingVisibility;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      allowAnswers,
      allowUserSuggestedOptions,
      custom,
      description,
      enforceUniqueVote,
      id,
      isClosed,
      maxVotesAllowed,
      name,
      options,
      votingVisibility,
    ]);
  }
}
