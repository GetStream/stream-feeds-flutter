// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ActionSequence {
  const ActionSequence({
    required this.action,
    required this.blur,
    required this.cooldownPeriod,
    required this.threshold,
    required this.timeWindow,
    required this.warning,
    required this.warningText,
  });

  final String action;

  final bool blur;

  final int cooldownPeriod;

  final int threshold;

  final int timeWindow;

  final bool warning;

  final String warningText;

  Map<String, dynamic> toJson() {
    return {
      'action': action,
      'blur': blur,
      'cooldown_period': cooldownPeriod,
      'threshold': threshold,
      'time_window': timeWindow,
      'warning': warning,
      'warning_text': warningText,
    };
  }

  static ActionSequence? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ActionSequence(
        action: mapValueOfType<String>(json, r'action')!,
        blur: mapValueOfType<bool>(json, r'blur')!,
        cooldownPeriod: mapValueOfType<int>(json, r'cooldown_period')!,
        threshold: mapValueOfType<int>(json, r'threshold')!,
        timeWindow: mapValueOfType<int>(json, r'time_window')!,
        warning: mapValueOfType<bool>(json, r'warning')!,
        warningText: mapValueOfType<String>(json, r'warning_text')!,
      );
    }
    return null;
  }

  static List<ActionSequence> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ActionSequence>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ActionSequence.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ActionSequence('
        'action: $action, '
        'blur: $blur, '
        'cooldownPeriod: $cooldownPeriod, '
        'threshold: $threshold, '
        'timeWindow: $timeWindow, '
        'warning: $warning, '
        'warningText: $warningText, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ActionSequence &&
        other.action == action &&
        other.blur == blur &&
        other.cooldownPeriod == cooldownPeriod &&
        other.threshold == threshold &&
        other.timeWindow == timeWindow &&
        other.warning == warning &&
        other.warningText == warningText;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      action,
      blur,
      cooldownPeriod,
      threshold,
      timeWindow,
      warning,
      warningText,
    ]);
  }
}
