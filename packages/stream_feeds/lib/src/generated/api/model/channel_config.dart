// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file
// ignore_for_file: unused_import, unnecessary_import, prefer_single_quotes, require_trailing_commas, unnecessary_raw_strings, public_member_api_docs

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';
import 'package:stream_core/stream_core.dart' as core;

import '../models.dart';

part 'channel_config.g.dart';
part 'channel_config.freezed.dart';

@JsonEnum(alwaysCreate: true)
enum ChannelConfigAutomod {
  @JsonValue('AI')
  aI,
  @JsonValue('disabled')
  disabled,
  @JsonValue('simple')
  simple,
  @JsonValue('_unknown')
  unknown;
}

@JsonEnum(alwaysCreate: true)
enum ChannelConfigAutomodBehavior {
  @JsonValue('block')
  block,
  @JsonValue('flag')
  flag,
  @JsonValue('shadow_block')
  shadowBlock,
  @JsonValue('_unknown')
  unknown;
}

@JsonEnum(alwaysCreate: true)
enum ChannelConfigBlocklistBehavior {
  @JsonValue('block')
  block,
  @JsonValue('flag')
  flag,
  @JsonValue('shadow_block')
  shadowBlock,
  @JsonValue('_unknown')
  unknown;
}

@freezed
@immutable
@JsonSerializable()
class ChannelConfig with _$ChannelConfig {
  const ChannelConfig({
    this.allowedFlagReasons,
    required this.automod,
    required this.automodBehavior,
    this.automodThresholds,
    this.blocklist,
    this.blocklistBehavior,
    this.blocklists,
    required this.commands,
    required this.connectEvents,
    required this.countMessages,
    required this.createdAt,
    required this.customEvents,
    required this.markMessagesPending,
    required this.maxMessageLength,
    required this.mutes,
    required this.name,
    this.partitionSize,
    this.partitionTtl,
    required this.polls,
    required this.pushNotifications,
    required this.quotes,
    required this.reactions,
    required this.readEvents,
    required this.reminders,
    required this.replies,
    required this.search,
    required this.sharedLocations,
    required this.skipLastMsgUpdateForSystemMsgs,
    required this.typingEvents,
    required this.updatedAt,
    required this.uploads,
    required this.urlEnrichment,
    required this.userMessageReminders,
  });

  @override
  final List<String>? allowedFlagReasons;

  @override
  @JsonKey(unknownEnumValue: ChannelConfigAutomod.unknown)
  final ChannelConfigAutomod automod;

  @override
  @JsonKey(unknownEnumValue: ChannelConfigAutomodBehavior.unknown)
  final ChannelConfigAutomodBehavior automodBehavior;

  @override
  final Thresholds? automodThresholds;

  @override
  final String? blocklist;

  @override
  @JsonKey(unknownEnumValue: ChannelConfigBlocklistBehavior.unknown)
  final ChannelConfigBlocklistBehavior? blocklistBehavior;

  @override
  final List<BlockListOptions>? blocklists;

  @override
  final List<String> commands;

  @override
  final bool connectEvents;

  @override
  final bool countMessages;

  @override
  @EpochDateTimeConverter()
  final DateTime createdAt;

  @override
  final bool customEvents;

  @override
  final bool markMessagesPending;

  @override
  final int maxMessageLength;

  @override
  final bool mutes;

  @override
  final String name;

  @override
  final int? partitionSize;

  @override
  final int? partitionTtl;

  @override
  final bool polls;

  @override
  final bool pushNotifications;

  @override
  final bool quotes;

  @override
  final bool reactions;

  @override
  final bool readEvents;

  @override
  final bool reminders;

  @override
  final bool replies;

  @override
  final bool search;

  @override
  final bool sharedLocations;

  @override
  final bool skipLastMsgUpdateForSystemMsgs;

  @override
  final bool typingEvents;

  @override
  @EpochDateTimeConverter()
  final DateTime updatedAt;

  @override
  final bool uploads;

  @override
  final bool urlEnrichment;

  @override
  final bool userMessageReminders;

  Map<String, dynamic> toJson() => _$ChannelConfigToJson(this);

  static ChannelConfig fromJson(Map<String, dynamic> json) =>
      _$ChannelConfigFromJson(json);
}
