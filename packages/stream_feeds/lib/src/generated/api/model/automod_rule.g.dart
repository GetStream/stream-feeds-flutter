// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum AutomodRuleActionEnum {
  bounce('bounce'),
  bounceFlag('bounce_flag'),
  bounceRemove('bounce_remove'),
  flag('flag'),
  remove('remove'),
  shadow('shadow'),
  unknown('_unknown');

  const AutomodRuleActionEnum(this.value);
  final String value;

  static AutomodRuleActionEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'bounce':
        return AutomodRuleActionEnum.bounce;
      case 'bounce_flag':
        return AutomodRuleActionEnum.bounceFlag;
      case 'bounce_remove':
        return AutomodRuleActionEnum.bounceRemove;
      case 'flag':
        return AutomodRuleActionEnum.flag;
      case 'remove':
        return AutomodRuleActionEnum.remove;
      case 'shadow':
        return AutomodRuleActionEnum.shadow;
      default:
        return AutomodRuleActionEnum.unknown;
    }
  }
}

@immutable
class AutomodRule {
  const AutomodRule({
    required this.action,
    required this.label,
    required this.threshold,
  });

  final AutomodRuleActionEnum action;

  final String label;

  final num threshold;

  Map<String, dynamic> toJson() {
    return {
      'action': action,
      'label': label,
      'threshold': threshold,
    };
  }

  static AutomodRule? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return AutomodRule(
        action: AutomodRuleActionEnum.fromValue(json['action'])!,
        label: mapValueOfType<String>(json, r'label')!,
        threshold: mapValueOfType<num>(json, r'threshold')!,
      );
    }
    return null;
  }

  static List<AutomodRule> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <AutomodRule>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = AutomodRule.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'AutomodRule('
        'action: $action, '
        'label: $label, '
        'threshold: $threshold, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AutomodRule &&
        other.action == action &&
        other.label == label &&
        other.threshold == threshold;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      action,
      label,
      threshold,
    ]);
  }
}
