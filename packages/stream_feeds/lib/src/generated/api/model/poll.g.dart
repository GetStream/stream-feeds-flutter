// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Poll {
  const Poll({
    required this.allowAnswers,
    required this.allowUserSuggestedOptions,
    required this.answersCount,
    required this.createdAt,
    this.createdBy,
    required this.createdById,
    required this.custom,
    required this.description,
    required this.enforceUniqueVote,
    required this.id,
    this.isClosed,
    required this.latestAnswers,
    required this.latestVotesByOption,
    this.maxVotesAllowed,
    required this.name,
    required this.options,
    required this.ownVotes,
    required this.updatedAt,
    required this.voteCount,
    required this.voteCountsByOption,
    this.votingVisibility,
  });

  final bool allowAnswers;

  final bool allowUserSuggestedOptions;

  final int answersCount;

  final DateTime createdAt;

  final User? createdBy;

  final String createdById;

  final Map<String, Object> custom;

  final String description;

  final bool enforceUniqueVote;

  final String id;

  final bool? isClosed;

  final List<PollVote> latestAnswers;

  final Map<String, List<PollVote>> latestVotesByOption;

  final int? maxVotesAllowed;

  final String name;

  final List<PollOption> options;

  final List<PollVote> ownVotes;

  final DateTime updatedAt;

  final int voteCount;

  final Map<String, int> voteCountsByOption;

  final String? votingVisibility;

  Map<String, dynamic> toJson() {
    return {
      'allow_answers': allowAnswers,
      'allow_user_suggested_options': allowUserSuggestedOptions,
      'answers_count': answersCount,
      'created_at': createdAt,
      'created_by': createdBy,
      'created_by_id': createdById,
      'Custom': custom,
      'description': description,
      'enforce_unique_vote': enforceUniqueVote,
      'id': id,
      'is_closed': isClosed,
      'latest_answers': latestAnswers,
      'latest_votes_by_option': latestVotesByOption,
      'max_votes_allowed': maxVotesAllowed,
      'name': name,
      'options': options,
      'own_votes': ownVotes,
      'updated_at': updatedAt,
      'vote_count': voteCount,
      'vote_counts_by_option': voteCountsByOption,
      'voting_visibility': votingVisibility,
    };
  }

  static Poll? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Poll(
        allowAnswers: mapValueOfType<bool>(json, r'allow_answers')!,
        allowUserSuggestedOptions:
            mapValueOfType<bool>(json, r'allow_user_suggested_options')!,
        answersCount: mapValueOfType<int>(json, r'answers_count')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        createdBy: User.fromJson(json[r'created_by'] ?? null),
        createdById: mapValueOfType<String>(json, r'created_by_id')!,
        custom: mapCastOfType<String, Object>(json, r'Custom')!,
        description: mapValueOfType<String>(json, r'description')!,
        enforceUniqueVote: mapValueOfType<bool>(json, r'enforce_unique_vote')!,
        id: mapValueOfType<String>(json, r'id')!,
        isClosed: mapValueOfType<bool>(json, r'is_closed', null),
        latestAnswers: PollVote.listFromJson(json[r'latest_answers']),
        latestVotesByOption: mapCastOfType<String, List<PollVote>>(
            json, r'latest_votes_by_option')!,
        maxVotesAllowed: mapValueOfType<int>(json, r'max_votes_allowed', null),
        name: mapValueOfType<String>(json, r'name')!,
        options: PollOption.listFromJson(json[r'options']),
        ownVotes: PollVote.listFromJson(json[r'own_votes']),
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        voteCount: mapValueOfType<int>(json, r'vote_count')!,
        voteCountsByOption:
            mapCastOfType<String, int>(json, r'vote_counts_by_option')!,
        votingVisibility:
            mapValueOfType<String>(json, r'voting_visibility', null),
      );
    }
    return null;
  }

  static List<Poll> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Poll>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Poll.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Poll('
        'allowAnswers: $allowAnswers, '
        'allowUserSuggestedOptions: $allowUserSuggestedOptions, '
        'answersCount: $answersCount, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'createdById: $createdById, '
        'custom: $custom, '
        'description: $description, '
        'enforceUniqueVote: $enforceUniqueVote, '
        'id: $id, '
        'isClosed: $isClosed, '
        'latestAnswers: $latestAnswers, '
        'latestVotesByOption: $latestVotesByOption, '
        'maxVotesAllowed: $maxVotesAllowed, '
        'name: $name, '
        'options: $options, '
        'ownVotes: $ownVotes, '
        'updatedAt: $updatedAt, '
        'voteCount: $voteCount, '
        'voteCountsByOption: $voteCountsByOption, '
        'votingVisibility: $votingVisibility, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Poll &&
        other.allowAnswers == allowAnswers &&
        other.allowUserSuggestedOptions == allowUserSuggestedOptions &&
        other.answersCount == answersCount &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.createdById == createdById &&
        other.custom == custom &&
        other.description == description &&
        other.enforceUniqueVote == enforceUniqueVote &&
        other.id == id &&
        other.isClosed == isClosed &&
        other.latestAnswers == latestAnswers &&
        other.latestVotesByOption == latestVotesByOption &&
        other.maxVotesAllowed == maxVotesAllowed &&
        other.name == name &&
        other.options == options &&
        other.ownVotes == ownVotes &&
        other.updatedAt == updatedAt &&
        other.voteCount == voteCount &&
        other.voteCountsByOption == voteCountsByOption &&
        other.votingVisibility == votingVisibility;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      allowAnswers,
      allowUserSuggestedOptions,
      answersCount,
      createdAt,
      createdBy,
      createdById,
      custom,
      description,
      enforceUniqueVote,
      id,
      isClosed,
      latestAnswers,
      latestVotesByOption,
      maxVotesAllowed,
      name,
      options,
      ownVotes,
      updatedAt,
      voteCount,
      voteCountsByOption,
      votingVisibility,
    ]);
  }
}
