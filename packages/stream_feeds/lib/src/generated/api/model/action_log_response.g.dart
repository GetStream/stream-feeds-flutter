// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ActionLogResponse {
  const ActionLogResponse({
    required this.createdAt,
    required this.custom,
    required this.id,
    required this.reason,
    this.reviewQueueItem,
    this.targetUser,
    required this.targetUserId,
    required this.type,
    this.user,
    required this.userId,
  });

  final DateTime createdAt;

  final Map<String, Object> custom;

  final String id;

  final String reason;

  final ReviewQueueItemResponse? reviewQueueItem;

  final UserResponse? targetUser;

  final String targetUserId;

  final String type;

  final UserResponse? user;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'custom': custom,
      'id': id,
      'reason': reason,
      'review_queue_item': reviewQueueItem,
      'target_user': targetUser,
      'target_user_id': targetUserId,
      'type': type,
      'user': user,
      'user_id': userId,
    };
  }

  static ActionLogResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ActionLogResponse(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        id: mapValueOfType<String>(json, r'id')!,
        reason: mapValueOfType<String>(json, r'reason')!,
        reviewQueueItem: ReviewQueueItemResponse.fromJson(
            json[r'review_queue_item'] ?? null),
        targetUser: UserResponse.fromJson(json[r'target_user'] ?? null),
        targetUserId: mapValueOfType<String>(json, r'target_user_id')!,
        type: mapValueOfType<String>(json, r'type')!,
        user: UserResponse.fromJson(json[r'user'] ?? null),
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<ActionLogResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ActionLogResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ActionLogResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ActionLogResponse('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'id: $id, '
        'reason: $reason, '
        'reviewQueueItem: $reviewQueueItem, '
        'targetUser: $targetUser, '
        'targetUserId: $targetUserId, '
        'type: $type, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ActionLogResponse &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.id == id &&
        other.reason == reason &&
        other.reviewQueueItem == reviewQueueItem &&
        other.targetUser == targetUser &&
        other.targetUserId == targetUserId &&
        other.type == type &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      id,
      reason,
      reviewQueueItem,
      targetUser,
      targetUserId,
      type,
      user,
      userId,
    ]);
  }
}
