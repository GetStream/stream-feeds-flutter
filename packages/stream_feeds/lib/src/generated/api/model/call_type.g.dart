// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class CallType {
  const CallType({
    required this.appPK,
    required this.createdAt,
    required this.externalStorage,
    required this.name,
    this.notificationSettings,
    required this.pK,
    this.settings,
    required this.updatedAt,
  });

  final int appPK;

  final DateTime createdAt;

  final String externalStorage;

  final String name;

  final NotificationSettings? notificationSettings;

  final int pK;

  final CallSettings? settings;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'AppPK': appPK,
      'CreatedAt': createdAt,
      'ExternalStorage': externalStorage,
      'Name': name,
      'NotificationSettings': notificationSettings,
      'PK': pK,
      'Settings': settings,
      'UpdatedAt': updatedAt,
    };
  }

  static CallType? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallType(
        appPK: mapValueOfType<int>(json, r'AppPK')!,
        createdAt: mapValueOfType<DateTime>(json, r'CreatedAt')!,
        externalStorage: mapValueOfType<String>(json, r'ExternalStorage')!,
        name: mapValueOfType<String>(json, r'Name')!,
        notificationSettings: NotificationSettings.fromJson(
            json[r'NotificationSettings'] ?? null),
        pK: mapValueOfType<int>(json, r'PK')!,
        settings: CallSettings.fromJson(json[r'Settings'] ?? null),
        updatedAt: mapValueOfType<DateTime>(json, r'UpdatedAt')!,
      );
    }
    return null;
  }

  static List<CallType> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallType>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallType.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallType('
        'appPK: $appPK, '
        'createdAt: $createdAt, '
        'externalStorage: $externalStorage, '
        'name: $name, '
        'notificationSettings: $notificationSettings, '
        'pK: $pK, '
        'settings: $settings, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallType &&
        other.appPK == appPK &&
        other.createdAt == createdAt &&
        other.externalStorage == externalStorage &&
        other.name == name &&
        other.notificationSettings == notificationSettings &&
        other.pK == pK &&
        other.settings == settings &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      appPK,
      createdAt,
      externalStorage,
      name,
      notificationSettings,
      pK,
      settings,
      updatedAt,
    ]);
  }
}
