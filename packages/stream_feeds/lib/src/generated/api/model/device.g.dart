// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum DevicePushProviderEnum {
  apn('apn'),
  firebase('firebase'),
  huawei('huawei'),
  xiaomi('xiaomi'),
  unknown('_unknown');

  const DevicePushProviderEnum(this.value);
  final String value;

  static DevicePushProviderEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'apn':
        return DevicePushProviderEnum.apn;
      case 'firebase':
        return DevicePushProviderEnum.firebase;
      case 'huawei':
        return DevicePushProviderEnum.huawei;
      case 'xiaomi':
        return DevicePushProviderEnum.xiaomi;
      default:
        return DevicePushProviderEnum.unknown;
    }
  }
}

@immutable
class Device {
  const Device({
    required this.createdAt,
    this.disabled,
    this.disabledReason,
    required this.id,
    required this.pushProvider,
    this.pushProviderName,
    required this.userId,
    this.voip,
  });

  final DateTime createdAt;

  final bool? disabled;

  final String? disabledReason;

  final String id;

  final DevicePushProviderEnum pushProvider;

  final String? pushProviderName;

  final String userId;

  final bool? voip;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'disabled': disabled,
      'disabled_reason': disabledReason,
      'id': id,
      'push_provider': pushProvider,
      'push_provider_name': pushProviderName,
      'user_id': userId,
      'voip': voip,
    };
  }

  static Device? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Device(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        disabled: mapValueOfType<bool>(json, r'disabled', null),
        disabledReason: mapValueOfType<String>(json, r'disabled_reason', null),
        id: mapValueOfType<String>(json, r'id')!,
        pushProvider: DevicePushProviderEnum.fromValue(json['push_provider'])!,
        pushProviderName:
            mapValueOfType<String>(json, r'push_provider_name', null),
        userId: mapValueOfType<String>(json, r'user_id')!,
        voip: mapValueOfType<bool>(json, r'voip', null),
      );
    }
    return null;
  }

  static List<Device> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Device>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Device.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Device('
        'createdAt: $createdAt, '
        'disabled: $disabled, '
        'disabledReason: $disabledReason, '
        'id: $id, '
        'pushProvider: $pushProvider, '
        'pushProviderName: $pushProviderName, '
        'userId: $userId, '
        'voip: $voip, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Device &&
        other.createdAt == createdAt &&
        other.disabled == disabled &&
        other.disabledReason == disabledReason &&
        other.id == id &&
        other.pushProvider == pushProvider &&
        other.pushProviderName == pushProviderName &&
        other.userId == userId &&
        other.voip == voip;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      disabled,
      disabledReason,
      id,
      pushProvider,
      pushProviderName,
      userId,
      voip,
    ]);
  }
}
