// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RecordSettings {
  const RecordSettings({
    this.audioOnly,
    this.layout,
    required this.mode,
    this.quality,
  });

  final bool? audioOnly;

  final LayoutSettings? layout;

  final String mode;

  final String? quality;

  Map<String, dynamic> toJson() {
    return {
      'audio_only': audioOnly,
      'layout': layout,
      'mode': mode,
      'quality': quality,
    };
  }

  static RecordSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RecordSettings(
        audioOnly: mapValueOfType<bool>(json, r'audio_only', null),
        layout: LayoutSettings.fromJson(json[r'layout'] ?? null),
        mode: mapValueOfType<String>(json, r'mode')!,
        quality: mapValueOfType<String>(json, r'quality', null),
      );
    }
    return null;
  }

  static List<RecordSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RecordSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RecordSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RecordSettings('
        'audioOnly: $audioOnly, '
        'layout: $layout, '
        'mode: $mode, '
        'quality: $quality, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RecordSettings &&
        other.audioOnly == audioOnly &&
        other.layout == layout &&
        other.mode == mode &&
        other.quality == quality;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      audioOnly,
      layout,
      mode,
      quality,
    ]);
  }
}
