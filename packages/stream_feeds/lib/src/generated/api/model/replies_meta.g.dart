// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RepliesMeta {
  const RepliesMeta({
    required this.depthTruncated,
    required this.hasMore,
    this.nextCursor,
    required this.remaining,
  });

  final bool depthTruncated;

  final bool hasMore;

  final String? nextCursor;

  final int remaining;

  Map<String, dynamic> toJson() {
    return {
      'depth_truncated': depthTruncated,
      'has_more': hasMore,
      'next_cursor': nextCursor,
      'remaining': remaining,
    };
  }

  static RepliesMeta? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RepliesMeta(
        depthTruncated: mapValueOfType<bool>(json, r'depth_truncated')!,
        hasMore: mapValueOfType<bool>(json, r'has_more')!,
        nextCursor: mapValueOfType<String>(json, r'next_cursor', null),
        remaining: mapValueOfType<int>(json, r'remaining')!,
      );
    }
    return null;
  }

  static List<RepliesMeta> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RepliesMeta>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RepliesMeta.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RepliesMeta('
        'depthTruncated: $depthTruncated, '
        'hasMore: $hasMore, '
        'nextCursor: $nextCursor, '
        'remaining: $remaining, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RepliesMeta &&
        other.depthTruncated == depthTruncated &&
        other.hasMore == hasMore &&
        other.nextCursor == nextCursor &&
        other.remaining == remaining;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      depthTruncated,
      hasMore,
      nextCursor,
      remaining,
    ]);
  }
}
