// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class QueryReviewQueueRequest {
  const QueryReviewQueueRequest({
    this.filter,
    this.limit,
    this.lockCount,
    this.lockDuration,
    this.lockItems,
    this.next,
    this.prev,
    this.sort,
    this.statsOnly,
  });

  final Map<String, Object>? filter;

  final int? limit;

  final int? lockCount;

  final int? lockDuration;

  final bool? lockItems;

  final String? next;

  final String? prev;

  final List<SortParamRequest>? sort;

  final bool? statsOnly;

  Map<String, dynamic> toJson() {
    return {
      'filter': filter,
      'limit': limit,
      'lock_count': lockCount,
      'lock_duration': lockDuration,
      'lock_items': lockItems,
      'next': next,
      'prev': prev,
      'sort': sort,
      'stats_only': statsOnly,
    };
  }

  static QueryReviewQueueRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return QueryReviewQueueRequest(
        filter: mapCastOfType<String, Object>(json, r'filter'),
        limit: mapValueOfType<int>(json, r'limit', null),
        lockCount: mapValueOfType<int>(json, r'lock_count', null),
        lockDuration: mapValueOfType<int>(json, r'lock_duration', null),
        lockItems: mapValueOfType<bool>(json, r'lock_items', null),
        next: mapValueOfType<String>(json, r'next', null),
        prev: mapValueOfType<String>(json, r'prev', null),
        sort: SortParamRequest.listFromJson(json[r'sort']),
        statsOnly: mapValueOfType<bool>(json, r'stats_only', null),
      );
    }
    return null;
  }

  static List<QueryReviewQueueRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <QueryReviewQueueRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = QueryReviewQueueRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'QueryReviewQueueRequest('
        'filter: $filter, '
        'limit: $limit, '
        'lockCount: $lockCount, '
        'lockDuration: $lockDuration, '
        'lockItems: $lockItems, '
        'next: $next, '
        'prev: $prev, '
        'sort: $sort, '
        'statsOnly: $statsOnly, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is QueryReviewQueueRequest &&
        other.filter == filter &&
        other.limit == limit &&
        other.lockCount == lockCount &&
        other.lockDuration == lockDuration &&
        other.lockItems == lockItems &&
        other.next == next &&
        other.prev == prev &&
        other.sort == sort &&
        other.statsOnly == statsOnly;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      filter,
      limit,
      lockCount,
      lockDuration,
      lockItems,
      next,
      prev,
      sort,
      statsOnly,
    ]);
  }
}
