// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class SharedLocationResponse {
  const SharedLocationResponse({
    this.channel,
    required this.channelCid,
    required this.createdAt,
    required this.createdByDeviceId,
    required this.duration,
    this.endAt,
    required this.latitude,
    required this.longitude,
    this.message,
    required this.messageId,
    required this.updatedAt,
    required this.userId,
  });

  final ChannelResponse? channel;

  final String channelCid;

  final DateTime createdAt;

  final String createdByDeviceId;

  final String duration;

  final DateTime? endAt;

  final num latitude;

  final num longitude;

  final MessageResponse? message;

  final String messageId;

  final DateTime updatedAt;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'channel': channel,
      'channel_cid': channelCid,
      'created_at': createdAt,
      'created_by_device_id': createdByDeviceId,
      'duration': duration,
      'end_at': endAt,
      'latitude': latitude,
      'longitude': longitude,
      'message': message,
      'message_id': messageId,
      'updated_at': updatedAt,
      'user_id': userId,
    };
  }

  static SharedLocationResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return SharedLocationResponse(
        channel: ChannelResponse.fromJson(json[r'channel'] ?? null),
        channelCid: mapValueOfType<String>(json, r'channel_cid')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        createdByDeviceId:
            mapValueOfType<String>(json, r'created_by_device_id')!,
        duration: mapValueOfType<String>(json, r'duration')!,
        endAt: mapValueOfType<DateTime>(json, r'end_at', null),
        latitude: mapValueOfType<num>(json, r'latitude')!,
        longitude: mapValueOfType<num>(json, r'longitude')!,
        message: MessageResponse.fromJson(json[r'message'] ?? null),
        messageId: mapValueOfType<String>(json, r'message_id')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<SharedLocationResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <SharedLocationResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = SharedLocationResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'SharedLocationResponse('
        'channel: $channel, '
        'channelCid: $channelCid, '
        'createdAt: $createdAt, '
        'createdByDeviceId: $createdByDeviceId, '
        'duration: $duration, '
        'endAt: $endAt, '
        'latitude: $latitude, '
        'longitude: $longitude, '
        'message: $message, '
        'messageId: $messageId, '
        'updatedAt: $updatedAt, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is SharedLocationResponse &&
        other.channel == channel &&
        other.channelCid == channelCid &&
        other.createdAt == createdAt &&
        other.createdByDeviceId == createdByDeviceId &&
        other.duration == duration &&
        other.endAt == endAt &&
        other.latitude == latitude &&
        other.longitude == longitude &&
        other.message == message &&
        other.messageId == messageId &&
        other.updatedAt == updatedAt &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      channel,
      channelCid,
      createdAt,
      createdByDeviceId,
      duration,
      endAt,
      latitude,
      longitude,
      message,
      messageId,
      updatedAt,
      userId,
    ]);
  }
}
