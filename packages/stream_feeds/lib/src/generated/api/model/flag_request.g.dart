// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class FlagRequest {
  const FlagRequest({
    this.custom,
    this.entityCreatorId,
    required this.entityId,
    required this.entityType,
    this.moderationPayload,
    this.reason,
  });

  final Map<String, Object>? custom;

  final String? entityCreatorId;

  final String entityId;

  final String entityType;

  final ModerationPayload? moderationPayload;

  final String? reason;

  Map<String, dynamic> toJson() {
    return {
      'custom': custom,
      'entity_creator_id': entityCreatorId,
      'entity_id': entityId,
      'entity_type': entityType,
      'moderation_payload': moderationPayload,
      'reason': reason,
    };
  }

  static FlagRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FlagRequest(
        custom: mapCastOfType<String, Object>(json, r'custom'),
        entityCreatorId:
            mapValueOfType<String>(json, r'entity_creator_id', null),
        entityId: mapValueOfType<String>(json, r'entity_id')!,
        entityType: mapValueOfType<String>(json, r'entity_type')!,
        moderationPayload:
            ModerationPayload.fromJson(json[r'moderation_payload'] ?? null),
        reason: mapValueOfType<String>(json, r'reason', null),
      );
    }
    return null;
  }

  static List<FlagRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FlagRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FlagRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FlagRequest('
        'custom: $custom, '
        'entityCreatorId: $entityCreatorId, '
        'entityId: $entityId, '
        'entityType: $entityType, '
        'moderationPayload: $moderationPayload, '
        'reason: $reason, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FlagRequest &&
        other.custom == custom &&
        other.entityCreatorId == entityCreatorId &&
        other.entityId == entityId &&
        other.entityType == entityType &&
        other.moderationPayload == moderationPayload &&
        other.reason == reason;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      custom,
      entityCreatorId,
      entityId,
      entityType,
      moderationPayload,
      reason,
    ]);
  }
}
