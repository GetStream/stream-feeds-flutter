// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class UpsertConfigRequest {
  const UpsertConfigRequest({
    this.aiImageConfig,
    this.aiTextConfig,
    this.aiVideoConfig,
    this.async,
    this.automodPlatformCircumventionConfig,
    this.automodSemanticFiltersConfig,
    this.automodToxicityConfig,
    this.awsRekognitionConfig,
    this.blockListConfig,
    this.bodyguardConfig,
    this.googleVisionConfig,
    required this.key,
    this.ruleBuilderConfig,
    this.team,
    this.velocityFilterConfig,
    this.videoCallRuleConfig,
  });

  final AIImageConfig? aiImageConfig;

  final AITextConfig? aiTextConfig;

  final AIVideoConfig? aiVideoConfig;

  final bool? async;

  final AutomodPlatformCircumventionConfig? automodPlatformCircumventionConfig;

  final AutomodSemanticFiltersConfig? automodSemanticFiltersConfig;

  final AutomodToxicityConfig? automodToxicityConfig;

  final AIImageConfig? awsRekognitionConfig;

  final BlockListConfig? blockListConfig;

  final AITextConfig? bodyguardConfig;

  final GoogleVisionConfig? googleVisionConfig;

  final String key;

  final RuleBuilderConfig? ruleBuilderConfig;

  final String? team;

  final VelocityFilterConfig? velocityFilterConfig;

  final VideoCallRuleConfig? videoCallRuleConfig;

  Map<String, dynamic> toJson() {
    return {
      'ai_image_config': aiImageConfig,
      'ai_text_config': aiTextConfig,
      'ai_video_config': aiVideoConfig,
      'async': async,
      'automod_platform_circumvention_config':
          automodPlatformCircumventionConfig,
      'automod_semantic_filters_config': automodSemanticFiltersConfig,
      'automod_toxicity_config': automodToxicityConfig,
      'aws_rekognition_config': awsRekognitionConfig,
      'block_list_config': blockListConfig,
      'bodyguard_config': bodyguardConfig,
      'google_vision_config': googleVisionConfig,
      'key': key,
      'rule_builder_config': ruleBuilderConfig,
      'team': team,
      'velocity_filter_config': velocityFilterConfig,
      'video_call_rule_config': videoCallRuleConfig,
    };
  }

  static UpsertConfigRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UpsertConfigRequest(
        aiImageConfig: AIImageConfig.fromJson(json[r'ai_image_config'] ?? null),
        aiTextConfig: AITextConfig.fromJson(json[r'ai_text_config'] ?? null),
        aiVideoConfig: AIVideoConfig.fromJson(json[r'ai_video_config'] ?? null),
        async: mapValueOfType<bool>(json, r'async', null),
        automodPlatformCircumventionConfig:
            AutomodPlatformCircumventionConfig.fromJson(
                json[r'automod_platform_circumvention_config'] ?? null),
        automodSemanticFiltersConfig: AutomodSemanticFiltersConfig.fromJson(
            json[r'automod_semantic_filters_config'] ?? null),
        automodToxicityConfig: AutomodToxicityConfig.fromJson(
            json[r'automod_toxicity_config'] ?? null),
        awsRekognitionConfig:
            AIImageConfig.fromJson(json[r'aws_rekognition_config'] ?? null),
        blockListConfig:
            BlockListConfig.fromJson(json[r'block_list_config'] ?? null),
        bodyguardConfig:
            AITextConfig.fromJson(json[r'bodyguard_config'] ?? null),
        googleVisionConfig:
            GoogleVisionConfig.fromJson(json[r'google_vision_config'] ?? null),
        key: mapValueOfType<String>(json, r'key')!,
        ruleBuilderConfig:
            RuleBuilderConfig.fromJson(json[r'rule_builder_config'] ?? null),
        team: mapValueOfType<String>(json, r'team', null),
        velocityFilterConfig: VelocityFilterConfig.fromJson(
            json[r'velocity_filter_config'] ?? null),
        videoCallRuleConfig: VideoCallRuleConfig.fromJson(
            json[r'video_call_rule_config'] ?? null),
      );
    }
    return null;
  }

  static List<UpsertConfigRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UpsertConfigRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UpsertConfigRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UpsertConfigRequest('
        'aiImageConfig: $aiImageConfig, '
        'aiTextConfig: $aiTextConfig, '
        'aiVideoConfig: $aiVideoConfig, '
        'async: $async, '
        'automodPlatformCircumventionConfig: $automodPlatformCircumventionConfig, '
        'automodSemanticFiltersConfig: $automodSemanticFiltersConfig, '
        'automodToxicityConfig: $automodToxicityConfig, '
        'awsRekognitionConfig: $awsRekognitionConfig, '
        'blockListConfig: $blockListConfig, '
        'bodyguardConfig: $bodyguardConfig, '
        'googleVisionConfig: $googleVisionConfig, '
        'key: $key, '
        'ruleBuilderConfig: $ruleBuilderConfig, '
        'team: $team, '
        'velocityFilterConfig: $velocityFilterConfig, '
        'videoCallRuleConfig: $videoCallRuleConfig, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UpsertConfigRequest &&
        other.aiImageConfig == aiImageConfig &&
        other.aiTextConfig == aiTextConfig &&
        other.aiVideoConfig == aiVideoConfig &&
        other.async == async &&
        other.automodPlatformCircumventionConfig ==
            automodPlatformCircumventionConfig &&
        other.automodSemanticFiltersConfig == automodSemanticFiltersConfig &&
        other.automodToxicityConfig == automodToxicityConfig &&
        other.awsRekognitionConfig == awsRekognitionConfig &&
        other.blockListConfig == blockListConfig &&
        other.bodyguardConfig == bodyguardConfig &&
        other.googleVisionConfig == googleVisionConfig &&
        other.key == key &&
        other.ruleBuilderConfig == ruleBuilderConfig &&
        other.team == team &&
        other.velocityFilterConfig == velocityFilterConfig &&
        other.videoCallRuleConfig == videoCallRuleConfig;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      aiImageConfig,
      aiTextConfig,
      aiVideoConfig,
      async,
      automodPlatformCircumventionConfig,
      automodSemanticFiltersConfig,
      automodToxicityConfig,
      awsRekognitionConfig,
      blockListConfig,
      bodyguardConfig,
      googleVisionConfig,
      key,
      ruleBuilderConfig,
      team,
      velocityFilterConfig,
      videoCallRuleConfig,
    ]);
  }
}
