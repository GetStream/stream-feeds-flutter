// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class AggregatedActivityResponse {
  const AggregatedActivityResponse({
    required this.activities,
    required this.activityCount,
    required this.createdAt,
    required this.group,
    required this.score,
    required this.updatedAt,
    required this.userCount,
  });

  final List<ActivityResponse> activities;

  final int activityCount;

  final DateTime createdAt;

  final String group;

  final num score;

  final DateTime updatedAt;

  final int userCount;

  Map<String, dynamic> toJson() {
    return {
      'activities': activities,
      'activity_count': activityCount,
      'created_at': createdAt,
      'group': group,
      'score': score,
      'updated_at': updatedAt,
      'user_count': userCount,
    };
  }

  static AggregatedActivityResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return AggregatedActivityResponse(
        activities: ActivityResponse.listFromJson(json[r'activities']),
        activityCount: mapValueOfType<int>(json, r'activity_count')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        group: mapValueOfType<String>(json, r'group')!,
        score: mapValueOfType<num>(json, r'score')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        userCount: mapValueOfType<int>(json, r'user_count')!,
      );
    }
    return null;
  }

  static List<AggregatedActivityResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <AggregatedActivityResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = AggregatedActivityResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'AggregatedActivityResponse('
        'activities: $activities, '
        'activityCount: $activityCount, '
        'createdAt: $createdAt, '
        'group: $group, '
        'score: $score, '
        'updatedAt: $updatedAt, '
        'userCount: $userCount, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AggregatedActivityResponse &&
        other.activities == activities &&
        other.activityCount == activityCount &&
        other.createdAt == createdAt &&
        other.group == group &&
        other.score == score &&
        other.updatedAt == updatedAt &&
        other.userCount == userCount;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      activities,
      activityCount,
      createdAt,
      group,
      score,
      updatedAt,
      userCount,
    ]);
  }
}
