// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class CallMember {
  const CallMember({
    required this.createdAt,
    required this.custom,
    this.deletedAt,
    required this.role,
    required this.updatedAt,
    this.user,
    required this.userId,
  });

  final DateTime createdAt;

  final Map<String, Object> custom;

  final DateTime? deletedAt;

  final String role;

  final DateTime updatedAt;

  final User? user;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'custom': custom,
      'deleted_at': deletedAt,
      'role': role,
      'updated_at': updatedAt,
      'user': user,
      'user_id': userId,
    };
  }

  static CallMember? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallMember(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        deletedAt: mapValueOfType<DateTime>(json, r'deleted_at', null),
        role: mapValueOfType<String>(json, r'role')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: User.fromJson(json[r'user'] ?? null),
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<CallMember> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallMember>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallMember.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallMember('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'deletedAt: $deletedAt, '
        'role: $role, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallMember &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.deletedAt == deletedAt &&
        other.role == role &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      deletedAt,
      role,
      updatedAt,
      user,
      userId,
    ]);
  }
}
