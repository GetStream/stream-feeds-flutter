// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RTMPSettings {
  const RTMPSettings({
    required this.enabled,
    this.layout,
    this.location,
    this.qualityName,
  });

  final bool enabled;

  final LayoutSettings? layout;

  final RTMPLocation? location;

  final String? qualityName;

  Map<String, dynamic> toJson() {
    return {
      'enabled': enabled,
      'layout': layout,
      'location': location,
      'quality_name': qualityName,
    };
  }

  static RTMPSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RTMPSettings(
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        layout: LayoutSettings.fromJson(json[r'layout'] ?? null),
        location: RTMPLocation.fromJson(json[r'location'] ?? null),
        qualityName: mapValueOfType<String>(json, r'quality_name', null),
      );
    }
    return null;
  }

  static List<RTMPSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RTMPSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RTMPSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RTMPSettings('
        'enabled: $enabled, '
        'layout: $layout, '
        'location: $location, '
        'qualityName: $qualityName, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RTMPSettings &&
        other.enabled == enabled &&
        other.layout == layout &&
        other.location == location &&
        other.qualityName == qualityName;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      enabled,
      layout,
      location,
      qualityName,
    ]);
  }
}
