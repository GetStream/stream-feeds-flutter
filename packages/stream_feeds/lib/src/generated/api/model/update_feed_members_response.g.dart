// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class UpdateFeedMembersResponse {
  const UpdateFeedMembersResponse({
    required this.added,
    required this.duration,
    required this.removedIds,
    required this.updated,
  });

  final List<FeedMemberResponse> added;

  final String duration;

  final List<String> removedIds;

  final List<FeedMemberResponse> updated;

  Map<String, dynamic> toJson() {
    return {
      'added': added,
      'duration': duration,
      'removed_ids': removedIds,
      'updated': updated,
    };
  }

  static UpdateFeedMembersResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UpdateFeedMembersResponse(
        added: FeedMemberResponse.listFromJson(json[r'added']),
        duration: mapValueOfType<String>(json, r'duration')!,
        removedIds: json[r'removed_ids'] is Iterable
            ? (json[r'removed_ids'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        updated: FeedMemberResponse.listFromJson(json[r'updated']),
      );
    }
    return null;
  }

  static List<UpdateFeedMembersResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UpdateFeedMembersResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UpdateFeedMembersResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UpdateFeedMembersResponse('
        'added: $added, '
        'duration: $duration, '
        'removedIds: $removedIds, '
        'updated: $updated, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UpdateFeedMembersResponse &&
        other.added == added &&
        other.duration == duration &&
        other.removedIds == removedIds &&
        other.updated == updated;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      added,
      duration,
      removedIds,
      updated,
    ]);
  }
}
