// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class EventNotificationSettings {
  const EventNotificationSettings({
    required this.apns,
    required this.enabled,
    required this.fcm,
  });

  final APNS apns;

  final bool enabled;

  final FCM fcm;

  Map<String, dynamic> toJson() {
    return {
      'apns': apns,
      'enabled': enabled,
      'fcm': fcm,
    };
  }

  static EventNotificationSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return EventNotificationSettings(
        apns: APNS.fromJson(json[r'apns'])!,
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        fcm: FCM.fromJson(json[r'fcm'])!,
      );
    }
    return null;
  }

  static List<EventNotificationSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <EventNotificationSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = EventNotificationSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'EventNotificationSettings('
        'apns: $apns, '
        'enabled: $enabled, '
        'fcm: $fcm, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EventNotificationSettings &&
        other.apns == apns &&
        other.enabled == enabled &&
        other.fcm == fcm;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      apns,
      enabled,
      fcm,
    ]);
  }
}
