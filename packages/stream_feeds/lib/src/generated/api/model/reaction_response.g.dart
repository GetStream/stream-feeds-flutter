// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ReactionResponse {
  const ReactionResponse({
    required this.createdAt,
    required this.custom,
    required this.messageId,
    required this.score,
    required this.type,
    required this.updatedAt,
    required this.user,
    required this.userId,
  });

  final DateTime createdAt;

  final Map<String, Object> custom;

  final String messageId;

  final int score;

  final String type;

  final DateTime updatedAt;

  final UserResponse user;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'custom': custom,
      'message_id': messageId,
      'score': score,
      'type': type,
      'updated_at': updatedAt,
      'user': user,
      'user_id': userId,
    };
  }

  static ReactionResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ReactionResponse(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        messageId: mapValueOfType<String>(json, r'message_id')!,
        score: mapValueOfType<int>(json, r'score')!,
        type: mapValueOfType<String>(json, r'type')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: UserResponse.fromJson(json[r'user'])!,
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<ReactionResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ReactionResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ReactionResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ReactionResponse('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'messageId: $messageId, '
        'score: $score, '
        'type: $type, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ReactionResponse &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.messageId == messageId &&
        other.score == score &&
        other.type == type &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      messageId,
      score,
      type,
      updatedAt,
      user,
      userId,
    ]);
  }
}
