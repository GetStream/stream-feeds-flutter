// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Channel {
  const Channel({
    this.activeLiveLocations,
    this.autoTranslationEnabled,
    required this.autoTranslationLanguage,
    required this.cid,
    this.config,
    this.configOverrides,
    this.cooldown,
    required this.createdAt,
    this.createdBy,
    required this.custom,
    this.deletedAt,
    required this.disabled,
    required this.frozen,
    required this.id,
    this.invites,
    this.lastCampaigns,
    this.lastMessageAt,
    this.memberCount,
    this.members,
    this.team,
    this.truncatedBy,
    required this.type,
    required this.updatedAt,
  });

  final List<SharedLocation>? activeLiveLocations;

  final bool? autoTranslationEnabled;

  final String autoTranslationLanguage;

  final String cid;

  final ChannelConfig? config;

  final ConfigOverrides? configOverrides;

  final int? cooldown;

  final DateTime createdAt;

  final User? createdBy;

  final Map<String, Object> custom;

  final DateTime? deletedAt;

  final bool disabled;

  final bool frozen;

  final String id;

  final List<ChannelMember>? invites;

  final String? lastCampaigns;

  final DateTime? lastMessageAt;

  final int? memberCount;

  final List<ChannelMember>? members;

  final String? team;

  final User? truncatedBy;

  final String type;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'active_live_locations': activeLiveLocations,
      'auto_translation_enabled': autoTranslationEnabled,
      'auto_translation_language': autoTranslationLanguage,
      'cid': cid,
      'config': config,
      'config_overrides': configOverrides,
      'cooldown': cooldown,
      'created_at': createdAt,
      'created_by': createdBy,
      'custom': custom,
      'deleted_at': deletedAt,
      'disabled': disabled,
      'frozen': frozen,
      'id': id,
      'invites': invites,
      'last_campaigns': lastCampaigns,
      'last_message_at': lastMessageAt,
      'member_count': memberCount,
      'members': members,
      'team': team,
      'truncated_by': truncatedBy,
      'type': type,
      'updated_at': updatedAt,
    };
  }

  static Channel? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Channel(
        activeLiveLocations:
            SharedLocation.listFromJson(json[r'active_live_locations']),
        autoTranslationEnabled:
            mapValueOfType<bool>(json, r'auto_translation_enabled', null),
        autoTranslationLanguage:
            mapValueOfType<String>(json, r'auto_translation_language')!,
        cid: mapValueOfType<String>(json, r'cid')!,
        config: ChannelConfig.fromJson(json[r'config'] ?? null),
        configOverrides:
            ConfigOverrides.fromJson(json[r'config_overrides'] ?? null),
        cooldown: mapValueOfType<int>(json, r'cooldown', null),
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        createdBy: User.fromJson(json[r'created_by'] ?? null),
        custom: mapCastOfType<String, Object>(json, r'custom')!,
        deletedAt: mapValueOfType<DateTime>(json, r'deleted_at', null),
        disabled: mapValueOfType<bool>(json, r'disabled')!,
        frozen: mapValueOfType<bool>(json, r'frozen')!,
        id: mapValueOfType<String>(json, r'id')!,
        invites: ChannelMember.listFromJson(json[r'invites']),
        lastCampaigns: mapValueOfType<String>(json, r'last_campaigns', null),
        lastMessageAt: mapValueOfType<DateTime>(json, r'last_message_at', null),
        memberCount: mapValueOfType<int>(json, r'member_count', null),
        members: ChannelMember.listFromJson(json[r'members']),
        team: mapValueOfType<String>(json, r'team', null),
        truncatedBy: User.fromJson(json[r'truncated_by'] ?? null),
        type: mapValueOfType<String>(json, r'type')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
      );
    }
    return null;
  }

  static List<Channel> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Channel>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Channel.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Channel('
        'activeLiveLocations: $activeLiveLocations, '
        'autoTranslationEnabled: $autoTranslationEnabled, '
        'autoTranslationLanguage: $autoTranslationLanguage, '
        'cid: $cid, '
        'config: $config, '
        'configOverrides: $configOverrides, '
        'cooldown: $cooldown, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'custom: $custom, '
        'deletedAt: $deletedAt, '
        'disabled: $disabled, '
        'frozen: $frozen, '
        'id: $id, '
        'invites: $invites, '
        'lastCampaigns: $lastCampaigns, '
        'lastMessageAt: $lastMessageAt, '
        'memberCount: $memberCount, '
        'members: $members, '
        'team: $team, '
        'truncatedBy: $truncatedBy, '
        'type: $type, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Channel &&
        other.activeLiveLocations == activeLiveLocations &&
        other.autoTranslationEnabled == autoTranslationEnabled &&
        other.autoTranslationLanguage == autoTranslationLanguage &&
        other.cid == cid &&
        other.config == config &&
        other.configOverrides == configOverrides &&
        other.cooldown == cooldown &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.custom == custom &&
        other.deletedAt == deletedAt &&
        other.disabled == disabled &&
        other.frozen == frozen &&
        other.id == id &&
        other.invites == invites &&
        other.lastCampaigns == lastCampaigns &&
        other.lastMessageAt == lastMessageAt &&
        other.memberCount == memberCount &&
        other.members == members &&
        other.team == team &&
        other.truncatedBy == truncatedBy &&
        other.type == type &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      activeLiveLocations,
      autoTranslationEnabled,
      autoTranslationLanguage,
      cid,
      config,
      configOverrides,
      cooldown,
      createdAt,
      createdBy,
      custom,
      deletedAt,
      disabled,
      frozen,
      id,
      invites,
      lastCampaigns,
      lastMessageAt,
      memberCount,
      members,
      team,
      truncatedBy,
      type,
      updatedAt,
    ]);
  }
}
