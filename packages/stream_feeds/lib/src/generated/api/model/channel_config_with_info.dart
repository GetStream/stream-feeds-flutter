// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: unused_import

import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';
import '../models.dart';

part 'channel_config_with_info.g.dart';

@JsonEnum(alwaysCreate: true)
enum ChannelConfigWithInfoAutomodEnum {
  @JsonValue('AI')
  aI,
  @JsonValue('disabled')
  disabled,
  @JsonValue('simple')
  simple,
  unknown;
}

@JsonEnum(alwaysCreate: true)
enum ChannelConfigWithInfoAutomodBehaviorEnum {
  @JsonValue('block')
  block,
  @JsonValue('flag')
  flag,
  @JsonValue('shadow_block')
  shadowBlock,
  unknown;
}

@JsonEnum(alwaysCreate: true)
enum ChannelConfigWithInfoBlocklistBehaviorEnum {
  @JsonValue('block')
  block,
  @JsonValue('flag')
  flag,
  @JsonValue('shadow_block')
  shadowBlock,
  unknown;
}

@immutable
@JsonSerializable()
class ChannelConfigWithInfo {
  const ChannelConfigWithInfo({
    this.allowedFlagReasons,
    required this.automod,
    required this.automodBehavior,
    this.automodThresholds,
    this.blocklist,
    this.blocklistBehavior,
    this.blocklists,
    required this.commands,
    required this.connectEvents,
    required this.createdAt,
    required this.customEvents,
    this.grants,
    required this.markMessagesPending,
    required this.maxMessageLength,
    required this.mutes,
    required this.name,
    this.partitionSize,
    this.partitionTtl,
    required this.polls,
    required this.pushNotifications,
    required this.quotes,
    required this.reactions,
    required this.readEvents,
    required this.reminders,
    required this.replies,
    required this.search,
    required this.sharedLocations,
    required this.skipLastMsgUpdateForSystemMsgs,
    required this.typingEvents,
    required this.updatedAt,
    required this.uploads,
    required this.urlEnrichment,
    required this.userMessageReminders,
  });

  final List<String>? allowedFlagReasons;

  final ChannelConfigWithInfoAutomodEnum automod;

  final ChannelConfigWithInfoAutomodBehaviorEnum automodBehavior;

  final Thresholds? automodThresholds;

  final String? blocklist;

  final ChannelConfigWithInfoBlocklistBehaviorEnum? blocklistBehavior;

  final List<BlockListOptions>? blocklists;

  final List<Command> commands;

  final bool connectEvents;
  @EpochDateTimeConverter()
  final DateTime createdAt;

  final bool customEvents;

  final Map<String, List<String>>? grants;

  final bool markMessagesPending;

  final int maxMessageLength;

  final bool mutes;

  final String name;

  final int? partitionSize;

  final String? partitionTtl;

  final bool polls;

  final bool pushNotifications;

  final bool quotes;

  final bool reactions;

  final bool readEvents;

  final bool reminders;

  final bool replies;

  final bool search;

  final bool sharedLocations;

  final bool skipLastMsgUpdateForSystemMsgs;

  final bool typingEvents;
  @EpochDateTimeConverter()
  final DateTime updatedAt;

  final bool uploads;

  final bool urlEnrichment;

  final bool userMessageReminders;

  Map<String, dynamic> toJson() => _$ChannelConfigWithInfoToJson(this);

  static ChannelConfigWithInfo fromJson(Map<String, dynamic> json) =>
      _$ChannelConfigWithInfoFromJson(json);

  @override
  String toString() {
    return 'ChannelConfigWithInfo('
        'allowedFlagReasons: $allowedFlagReasons, '
        'automod: $automod, '
        'automodBehavior: $automodBehavior, '
        'automodThresholds: $automodThresholds, '
        'blocklist: $blocklist, '
        'blocklistBehavior: $blocklistBehavior, '
        'blocklists: $blocklists, '
        'commands: $commands, '
        'connectEvents: $connectEvents, '
        'createdAt: $createdAt, '
        'customEvents: $customEvents, '
        'grants: $grants, '
        'markMessagesPending: $markMessagesPending, '
        'maxMessageLength: $maxMessageLength, '
        'mutes: $mutes, '
        'name: $name, '
        'partitionSize: $partitionSize, '
        'partitionTtl: $partitionTtl, '
        'polls: $polls, '
        'pushNotifications: $pushNotifications, '
        'quotes: $quotes, '
        'reactions: $reactions, '
        'readEvents: $readEvents, '
        'reminders: $reminders, '
        'replies: $replies, '
        'search: $search, '
        'sharedLocations: $sharedLocations, '
        'skipLastMsgUpdateForSystemMsgs: $skipLastMsgUpdateForSystemMsgs, '
        'typingEvents: $typingEvents, '
        'updatedAt: $updatedAt, '
        'uploads: $uploads, '
        'urlEnrichment: $urlEnrichment, '
        'userMessageReminders: $userMessageReminders, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ChannelConfigWithInfo &&
        other.allowedFlagReasons == allowedFlagReasons &&
        other.automod == automod &&
        other.automodBehavior == automodBehavior &&
        other.automodThresholds == automodThresholds &&
        other.blocklist == blocklist &&
        other.blocklistBehavior == blocklistBehavior &&
        other.blocklists == blocklists &&
        other.commands == commands &&
        other.connectEvents == connectEvents &&
        other.createdAt == createdAt &&
        other.customEvents == customEvents &&
        other.grants == grants &&
        other.markMessagesPending == markMessagesPending &&
        other.maxMessageLength == maxMessageLength &&
        other.mutes == mutes &&
        other.name == name &&
        other.partitionSize == partitionSize &&
        other.partitionTtl == partitionTtl &&
        other.polls == polls &&
        other.pushNotifications == pushNotifications &&
        other.quotes == quotes &&
        other.reactions == reactions &&
        other.readEvents == readEvents &&
        other.reminders == reminders &&
        other.replies == replies &&
        other.search == search &&
        other.sharedLocations == sharedLocations &&
        other.skipLastMsgUpdateForSystemMsgs ==
            skipLastMsgUpdateForSystemMsgs &&
        other.typingEvents == typingEvents &&
        other.updatedAt == updatedAt &&
        other.uploads == uploads &&
        other.urlEnrichment == urlEnrichment &&
        other.userMessageReminders == userMessageReminders;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      allowedFlagReasons,
      automod,
      automodBehavior,
      automodThresholds,
      blocklist,
      blocklistBehavior,
      blocklists,
      commands,
      connectEvents,
      createdAt,
      customEvents,
      grants,
      markMessagesPending,
      maxMessageLength,
      mutes,
      name,
      partitionSize,
      partitionTtl,
      polls,
      pushNotifications,
      quotes,
      reactions,
      readEvents,
      reminders,
      replies,
      search,
      sharedLocations,
      skipLastMsgUpdateForSystemMsgs,
      typingEvents,
      updatedAt,
      uploads,
      urlEnrichment,
      userMessageReminders,
    ]);
  }
}
