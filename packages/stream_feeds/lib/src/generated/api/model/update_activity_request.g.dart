// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class UpdateActivityRequest {
  const UpdateActivityRequest({
    this.attachments,
    this.custom,
    this.expiresAt,
    this.filterTags,
    this.interestTags,
    this.location,
    this.pollId,
    this.text,
    this.visibility,
  });

  final List<Attachment>? attachments;

  final Map<String, Object>? custom;

  final DateTime? expiresAt;

  final List<String>? filterTags;

  final List<String>? interestTags;

  final ActivityLocation? location;

  final String? pollId;

  final String? text;

  final String? visibility;

  Map<String, dynamic> toJson() {
    return {
      'attachments': attachments,
      'custom': custom,
      'expires_at': expiresAt,
      'filter_tags': filterTags,
      'interest_tags': interestTags,
      'location': location,
      'poll_id': pollId,
      'text': text,
      'visibility': visibility,
    };
  }

  static UpdateActivityRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UpdateActivityRequest(
        attachments: Attachment.listFromJson(json[r'attachments']),
        custom: mapCastOfType<String, Object>(json, r'custom'),
        expiresAt: mapValueOfType<DateTime>(json, r'expires_at', null),
        filterTags: json[r'filter_tags'] is Iterable
            ? (json[r'filter_tags'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        interestTags: json[r'interest_tags'] is Iterable
            ? (json[r'interest_tags'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        location: ActivityLocation.fromJson(json[r'location'] ?? null),
        pollId: mapValueOfType<String>(json, r'poll_id', null),
        text: mapValueOfType<String>(json, r'text', null),
        visibility: mapValueOfType<String>(json, r'visibility', null),
      );
    }
    return null;
  }

  static List<UpdateActivityRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UpdateActivityRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UpdateActivityRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UpdateActivityRequest('
        'attachments: $attachments, '
        'custom: $custom, '
        'expiresAt: $expiresAt, '
        'filterTags: $filterTags, '
        'interestTags: $interestTags, '
        'location: $location, '
        'pollId: $pollId, '
        'text: $text, '
        'visibility: $visibility, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UpdateActivityRequest &&
        other.attachments == attachments &&
        other.custom == custom &&
        other.expiresAt == expiresAt &&
        other.filterTags == filterTags &&
        other.interestTags == interestTags &&
        other.location == location &&
        other.pollId == pollId &&
        other.text == text &&
        other.visibility == visibility;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      attachments,
      custom,
      expiresAt,
      filterTags,
      interestTags,
      location,
      pollId,
      text,
      visibility,
    ]);
  }
}
