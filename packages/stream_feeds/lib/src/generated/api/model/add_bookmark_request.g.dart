// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class AddBookmarkRequest {
  const AddBookmarkRequest({
    this.custom,
    this.folderId,
    this.newFolder,
  });

  final Map<String, Object>? custom;

  final String? folderId;

  final AddFolderRequest? newFolder;

  Map<String, dynamic> toJson() {
    return {
      'custom': custom,
      'folder_id': folderId,
      'new_folder': newFolder,
    };
  }

  static AddBookmarkRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return AddBookmarkRequest(
        custom: mapCastOfType<String, Object>(json, r'custom'),
        folderId: mapValueOfType<String>(json, r'folder_id', null),
        newFolder: AddFolderRequest.fromJson(json[r'new_folder'] ?? null),
      );
    }
    return null;
  }

  static List<AddBookmarkRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <AddBookmarkRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = AddBookmarkRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'AddBookmarkRequest('
        'custom: $custom, '
        'folderId: $folderId, '
        'newFolder: $newFolder, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AddBookmarkRequest &&
        other.custom == custom &&
        other.folderId == folderId &&
        other.newFolder == newFolder;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      custom,
      folderId,
      newFolder,
    ]);
  }
}
