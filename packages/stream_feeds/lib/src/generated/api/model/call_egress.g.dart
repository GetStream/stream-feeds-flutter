// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class CallEgress {
  const CallEgress({
    required this.appPk,
    required this.callId,
    required this.callType,
    this.config,
    required this.egressId,
    required this.egressType,
    required this.instanceIp,
    required this.startedAt,
    required this.state,
    this.stoppedAt,
    required this.updatedAt,
  });

  final int appPk;

  final String callId;

  final String callType;

  final EgressTaskConfig? config;

  final String egressId;

  final String egressType;

  final String instanceIp;

  final DateTime startedAt;

  final String state;

  final DateTime? stoppedAt;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'app_pk': appPk,
      'call_id': callId,
      'call_type': callType,
      'config': config,
      'egress_id': egressId,
      'egress_type': egressType,
      'instance_ip': instanceIp,
      'started_at': startedAt,
      'state': state,
      'stopped_at': stoppedAt,
      'updated_at': updatedAt,
    };
  }

  static CallEgress? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallEgress(
        appPk: mapValueOfType<int>(json, r'app_pk')!,
        callId: mapValueOfType<String>(json, r'call_id')!,
        callType: mapValueOfType<String>(json, r'call_type')!,
        config: EgressTaskConfig.fromJson(json[r'config'] ?? null),
        egressId: mapValueOfType<String>(json, r'egress_id')!,
        egressType: mapValueOfType<String>(json, r'egress_type')!,
        instanceIp: mapValueOfType<String>(json, r'instance_ip')!,
        startedAt: mapValueOfType<DateTime>(json, r'started_at')!,
        state: mapValueOfType<String>(json, r'state')!,
        stoppedAt: mapValueOfType<DateTime>(json, r'stopped_at', null),
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
      );
    }
    return null;
  }

  static List<CallEgress> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallEgress>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallEgress.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallEgress('
        'appPk: $appPk, '
        'callId: $callId, '
        'callType: $callType, '
        'config: $config, '
        'egressId: $egressId, '
        'egressType: $egressType, '
        'instanceIp: $instanceIp, '
        'startedAt: $startedAt, '
        'state: $state, '
        'stoppedAt: $stoppedAt, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallEgress &&
        other.appPk == appPk &&
        other.callId == callId &&
        other.callType == callType &&
        other.config == config &&
        other.egressId == egressId &&
        other.egressType == egressType &&
        other.instanceIp == instanceIp &&
        other.startedAt == startedAt &&
        other.state == state &&
        other.stoppedAt == stoppedAt &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      appPk,
      callId,
      callType,
      config,
      egressId,
      egressType,
      instanceIp,
      startedAt,
      state,
      stoppedAt,
      updatedAt,
    ]);
  }
}
