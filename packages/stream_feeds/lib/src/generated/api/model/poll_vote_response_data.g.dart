// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class PollVoteResponseData {
  const PollVoteResponseData({
    this.answerText,
    required this.createdAt,
    required this.id,
    this.isAnswer,
    required this.optionId,
    required this.pollId,
    required this.updatedAt,
    this.user,
    this.userId,
  });

  final String? answerText;

  final DateTime createdAt;

  final String id;

  final bool? isAnswer;

  final String optionId;

  final String pollId;

  final DateTime updatedAt;

  final UserResponse? user;

  final String? userId;

  Map<String, dynamic> toJson() {
    return {
      'answer_text': answerText,
      'created_at': createdAt,
      'id': id,
      'is_answer': isAnswer,
      'option_id': optionId,
      'poll_id': pollId,
      'updated_at': updatedAt,
      'user': user,
      'user_id': userId,
    };
  }

  static PollVoteResponseData? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return PollVoteResponseData(
        answerText: mapValueOfType<String>(json, r'answer_text', null),
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        id: mapValueOfType<String>(json, r'id')!,
        isAnswer: mapValueOfType<bool>(json, r'is_answer', null),
        optionId: mapValueOfType<String>(json, r'option_id')!,
        pollId: mapValueOfType<String>(json, r'poll_id')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: UserResponse.fromJson(json[r'user'] ?? null),
        userId: mapValueOfType<String>(json, r'user_id', null),
      );
    }
    return null;
  }

  static List<PollVoteResponseData> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <PollVoteResponseData>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = PollVoteResponseData.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'PollVoteResponseData('
        'answerText: $answerText, '
        'createdAt: $createdAt, '
        'id: $id, '
        'isAnswer: $isAnswer, '
        'optionId: $optionId, '
        'pollId: $pollId, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is PollVoteResponseData &&
        other.answerText == answerText &&
        other.createdAt == createdAt &&
        other.id == id &&
        other.isAnswer == isAnswer &&
        other.optionId == optionId &&
        other.pollId == pollId &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      answerText,
      createdAt,
      id,
      isAnswer,
      optionId,
      pollId,
      updatedAt,
      user,
      userId,
    ]);
  }
}
