// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum FeedMemberResponseStatusEnum {
  member('member'),
  pending('pending'),
  rejected('rejected'),
  unknown('_unknown');

  const FeedMemberResponseStatusEnum(this.value);
  final String value;

  static FeedMemberResponseStatusEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'member':
        return FeedMemberResponseStatusEnum.member;
      case 'pending':
        return FeedMemberResponseStatusEnum.pending;
      case 'rejected':
        return FeedMemberResponseStatusEnum.rejected;
      default:
        return FeedMemberResponseStatusEnum.unknown;
    }
  }
}

@immutable
class FeedMemberResponse {
  const FeedMemberResponse({
    required this.createdAt,
    this.custom,
    this.inviteAcceptedAt,
    this.inviteRejectedAt,
    required this.role,
    required this.status,
    required this.updatedAt,
    required this.user,
  });

  final DateTime createdAt;

  final Map<String, Object>? custom;

  final DateTime? inviteAcceptedAt;

  final DateTime? inviteRejectedAt;

  final String role;

  final FeedMemberResponseStatusEnum status;

  final DateTime updatedAt;

  final UserResponse user;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'custom': custom,
      'invite_accepted_at': inviteAcceptedAt,
      'invite_rejected_at': inviteRejectedAt,
      'role': role,
      'status': status,
      'updated_at': updatedAt,
      'user': user,
    };
  }

  static FeedMemberResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FeedMemberResponse(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom'),
        inviteAcceptedAt:
            mapValueOfType<DateTime>(json, r'invite_accepted_at', null),
        inviteRejectedAt:
            mapValueOfType<DateTime>(json, r'invite_rejected_at', null),
        role: mapValueOfType<String>(json, r'role')!,
        status: FeedMemberResponseStatusEnum.fromValue(json['status'])!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: UserResponse.fromJson(json[r'user'])!,
      );
    }
    return null;
  }

  static List<FeedMemberResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FeedMemberResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FeedMemberResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FeedMemberResponse('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'inviteAcceptedAt: $inviteAcceptedAt, '
        'inviteRejectedAt: $inviteRejectedAt, '
        'role: $role, '
        'status: $status, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FeedMemberResponse &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.inviteAcceptedAt == inviteAcceptedAt &&
        other.inviteRejectedAt == inviteRejectedAt &&
        other.role == role &&
        other.status == status &&
        other.updatedAt == updatedAt &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      inviteAcceptedAt,
      inviteRejectedAt,
      role,
      status,
      updatedAt,
      user,
    ]);
  }
}
