// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class NotificationSettings {
  const NotificationSettings({
    required this.callLiveStarted,
    required this.callMissed,
    required this.callNotification,
    required this.callRing,
    required this.enabled,
    required this.sessionStarted,
  });

  final EventNotificationSettings callLiveStarted;

  final EventNotificationSettings callMissed;

  final EventNotificationSettings callNotification;

  final EventNotificationSettings callRing;

  final bool enabled;

  final EventNotificationSettings sessionStarted;

  Map<String, dynamic> toJson() {
    return {
      'call_live_started': callLiveStarted,
      'call_missed': callMissed,
      'call_notification': callNotification,
      'call_ring': callRing,
      'enabled': enabled,
      'session_started': sessionStarted,
    };
  }

  static NotificationSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return NotificationSettings(
        callLiveStarted:
            EventNotificationSettings.fromJson(json[r'call_live_started'])!,
        callMissed: EventNotificationSettings.fromJson(json[r'call_missed'])!,
        callNotification:
            EventNotificationSettings.fromJson(json[r'call_notification'])!,
        callRing: EventNotificationSettings.fromJson(json[r'call_ring'])!,
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        sessionStarted:
            EventNotificationSettings.fromJson(json[r'session_started'])!,
      );
    }
    return null;
  }

  static List<NotificationSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <NotificationSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = NotificationSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'NotificationSettings('
        'callLiveStarted: $callLiveStarted, '
        'callMissed: $callMissed, '
        'callNotification: $callNotification, '
        'callRing: $callRing, '
        'enabled: $enabled, '
        'sessionStarted: $sessionStarted, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is NotificationSettings &&
        other.callLiveStarted == callLiveStarted &&
        other.callMissed == callMissed &&
        other.callNotification == callNotification &&
        other.callRing == callRing &&
        other.enabled == enabled &&
        other.sessionStarted == sessionStarted;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      callLiveStarted,
      callMissed,
      callNotification,
      callRing,
      enabled,
      sessionStarted,
    ]);
  }
}
