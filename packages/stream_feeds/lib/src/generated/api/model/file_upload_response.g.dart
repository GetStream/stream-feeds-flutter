// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class FileUploadResponse {
  const FileUploadResponse({
    required this.duration,
    this.file,
    this.thumbUrl,
  });

  final String duration;

  final String? file;

  final String? thumbUrl;

  Map<String, dynamic> toJson() {
    return {
      'duration': duration,
      'file': file,
      'thumb_url': thumbUrl,
    };
  }

  static FileUploadResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FileUploadResponse(
        duration: mapValueOfType<String>(json, r'duration')!,
        file: mapValueOfType<String>(json, r'file', null),
        thumbUrl: mapValueOfType<String>(json, r'thumb_url', null),
      );
    }
    return null;
  }

  static List<FileUploadResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FileUploadResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FileUploadResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FileUploadResponse('
        'duration: $duration, '
        'file: $file, '
        'thumbUrl: $thumbUrl, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FileUploadResponse &&
        other.duration == duration &&
        other.file == file &&
        other.thumbUrl == thumbUrl;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      duration,
      file,
      thumbUrl,
    ]);
  }
}
