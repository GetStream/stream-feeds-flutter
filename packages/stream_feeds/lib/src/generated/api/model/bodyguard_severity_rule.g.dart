// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum BodyguardSeverityRuleActionEnum {
  bounce('bounce'),
  bounceFlag('bounce_flag'),
  bounceRemove('bounce_remove'),
  flag('flag'),
  remove('remove'),
  shadow('shadow'),
  unknown('_unknown');

  const BodyguardSeverityRuleActionEnum(this.value);
  final String value;

  static BodyguardSeverityRuleActionEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'bounce':
        return BodyguardSeverityRuleActionEnum.bounce;
      case 'bounce_flag':
        return BodyguardSeverityRuleActionEnum.bounceFlag;
      case 'bounce_remove':
        return BodyguardSeverityRuleActionEnum.bounceRemove;
      case 'flag':
        return BodyguardSeverityRuleActionEnum.flag;
      case 'remove':
        return BodyguardSeverityRuleActionEnum.remove;
      case 'shadow':
        return BodyguardSeverityRuleActionEnum.shadow;
      default:
        return BodyguardSeverityRuleActionEnum.unknown;
    }
  }
}

enum BodyguardSeverityRuleSeverityEnum {
  critical('critical'),
  high('high'),
  low('low'),
  medium('medium'),
  unknown('_unknown');

  const BodyguardSeverityRuleSeverityEnum(this.value);
  final String value;

  static BodyguardSeverityRuleSeverityEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'critical':
        return BodyguardSeverityRuleSeverityEnum.critical;
      case 'high':
        return BodyguardSeverityRuleSeverityEnum.high;
      case 'low':
        return BodyguardSeverityRuleSeverityEnum.low;
      case 'medium':
        return BodyguardSeverityRuleSeverityEnum.medium;
      default:
        return BodyguardSeverityRuleSeverityEnum.unknown;
    }
  }
}

@immutable
class BodyguardSeverityRule {
  const BodyguardSeverityRule({
    required this.action,
    required this.severity,
  });

  final BodyguardSeverityRuleActionEnum action;

  final BodyguardSeverityRuleSeverityEnum severity;

  Map<String, dynamic> toJson() {
    return {
      'action': action,
      'severity': severity,
    };
  }

  static BodyguardSeverityRule? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BodyguardSeverityRule(
        action: BodyguardSeverityRuleActionEnum.fromValue(json['action'])!,
        severity:
            BodyguardSeverityRuleSeverityEnum.fromValue(json['severity'])!,
      );
    }
    return null;
  }

  static List<BodyguardSeverityRule> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BodyguardSeverityRule>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BodyguardSeverityRule.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BodyguardSeverityRule('
        'action: $action, '
        'severity: $severity, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BodyguardSeverityRule &&
        other.action == action &&
        other.severity == severity;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      action,
      severity,
    ]);
  }
}
