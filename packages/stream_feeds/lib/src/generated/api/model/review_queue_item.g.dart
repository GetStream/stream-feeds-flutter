// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ReviewQueueItem {
  const ReviewQueueItem({
    required this.actions,
    this.activity,
    required this.aiTextSeverity,
    this.assignedTo,
    required this.bans,
    required this.bounceCount,
    this.call,
    required this.configKey,
    required this.contentChanged,
    required this.createdAt,
    this.entityCreator,
    required this.entityId,
    required this.entityType,
    this.feedsV2Activity,
    this.feedsV2Reaction,
    required this.flagLabels,
    required this.flagTypes,
    required this.flags,
    required this.flagsCount,
    required this.hasImage,
    required this.hasText,
    required this.hasVideo,
    required this.id,
    required this.languages,
    this.message,
    this.moderationPayload,
    required this.moderationPayloadHash,
    this.reaction,
    required this.recommendedAction,
    required this.reporterIds,
    required this.reviewedBy,
    required this.severity,
    required this.status,
    required this.teams,
    required this.updatedAt,
  });

  final List<ActionLog> actions;

  final EnrichedActivity? activity;

  final String aiTextSeverity;

  final User? assignedTo;

  final List<Ban> bans;

  final int bounceCount;

  final Call? call;

  final String configKey;

  final bool contentChanged;

  final DateTime createdAt;

  final EntityCreator? entityCreator;

  final String entityId;

  final String entityType;

  final EnrichedActivity? feedsV2Activity;

  final Reaction? feedsV2Reaction;

  final List<String> flagLabels;

  final List<String> flagTypes;

  final List<Flag> flags;

  final int flagsCount;

  final bool hasImage;

  final bool hasText;

  final bool hasVideo;

  final String id;

  final List<String> languages;

  final Message? message;

  final ModerationPayload? moderationPayload;

  final String moderationPayloadHash;

  final Reaction? reaction;

  final String recommendedAction;

  final List<String> reporterIds;

  final String reviewedBy;

  final int severity;

  final String status;

  final List<String> teams;

  final DateTime updatedAt;

  Map<String, dynamic> toJson() {
    return {
      'actions': actions,
      'activity': activity,
      'ai_text_severity': aiTextSeverity,
      'assigned_to': assignedTo,
      'bans': bans,
      'bounce_count': bounceCount,
      'call': call,
      'config_key': configKey,
      'content_changed': contentChanged,
      'created_at': createdAt,
      'entity_creator': entityCreator,
      'entity_id': entityId,
      'entity_type': entityType,
      'feeds_v2_activity': feedsV2Activity,
      'feeds_v2_reaction': feedsV2Reaction,
      'flag_labels': flagLabels,
      'flag_types': flagTypes,
      'flags': flags,
      'flags_count': flagsCount,
      'has_image': hasImage,
      'has_text': hasText,
      'has_video': hasVideo,
      'id': id,
      'languages': languages,
      'message': message,
      'moderation_payload': moderationPayload,
      'moderation_payload_hash': moderationPayloadHash,
      'reaction': reaction,
      'recommended_action': recommendedAction,
      'reporter_ids': reporterIds,
      'reviewed_by': reviewedBy,
      'severity': severity,
      'status': status,
      'teams': teams,
      'updated_at': updatedAt,
    };
  }

  static ReviewQueueItem? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ReviewQueueItem(
        actions: ActionLog.listFromJson(json[r'actions']),
        activity: EnrichedActivity.fromJson(json[r'activity'] ?? null),
        aiTextSeverity: mapValueOfType<String>(json, r'ai_text_severity')!,
        assignedTo: User.fromJson(json[r'assigned_to'] ?? null),
        bans: Ban.listFromJson(json[r'bans']),
        bounceCount: mapValueOfType<int>(json, r'bounce_count')!,
        call: Call.fromJson(json[r'call'] ?? null),
        configKey: mapValueOfType<String>(json, r'config_key')!,
        contentChanged: mapValueOfType<bool>(json, r'content_changed')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        entityCreator: EntityCreator.fromJson(json[r'entity_creator'] ?? null),
        entityId: mapValueOfType<String>(json, r'entity_id')!,
        entityType: mapValueOfType<String>(json, r'entity_type')!,
        feedsV2Activity:
            EnrichedActivity.fromJson(json[r'feeds_v2_activity'] ?? null),
        feedsV2Reaction: Reaction.fromJson(json[r'feeds_v2_reaction'] ?? null),
        flagLabels: json[r'flag_labels'] is Iterable
            ? (json[r'flag_labels'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        flagTypes: json[r'flag_types'] is Iterable
            ? (json[r'flag_types'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        flags: Flag.listFromJson(json[r'flags']),
        flagsCount: mapValueOfType<int>(json, r'flags_count')!,
        hasImage: mapValueOfType<bool>(json, r'has_image')!,
        hasText: mapValueOfType<bool>(json, r'has_text')!,
        hasVideo: mapValueOfType<bool>(json, r'has_video')!,
        id: mapValueOfType<String>(json, r'id')!,
        languages: json[r'languages'] is Iterable
            ? (json[r'languages'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        message: Message.fromJson(json[r'message'] ?? null),
        moderationPayload:
            ModerationPayload.fromJson(json[r'moderation_payload'] ?? null),
        moderationPayloadHash:
            mapValueOfType<String>(json, r'moderation_payload_hash')!,
        reaction: Reaction.fromJson(json[r'reaction'] ?? null),
        recommendedAction: mapValueOfType<String>(json, r'recommended_action')!,
        reporterIds: json[r'reporter_ids'] is Iterable
            ? (json[r'reporter_ids'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        reviewedBy: mapValueOfType<String>(json, r'reviewed_by')!,
        severity: mapValueOfType<int>(json, r'severity')!,
        status: mapValueOfType<String>(json, r'status')!,
        teams: json[r'teams'] is Iterable
            ? (json[r'teams'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
      );
    }
    return null;
  }

  static List<ReviewQueueItem> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ReviewQueueItem>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ReviewQueueItem.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ReviewQueueItem('
        'actions: $actions, '
        'activity: $activity, '
        'aiTextSeverity: $aiTextSeverity, '
        'assignedTo: $assignedTo, '
        'bans: $bans, '
        'bounceCount: $bounceCount, '
        'call: $call, '
        'configKey: $configKey, '
        'contentChanged: $contentChanged, '
        'createdAt: $createdAt, '
        'entityCreator: $entityCreator, '
        'entityId: $entityId, '
        'entityType: $entityType, '
        'feedsV2Activity: $feedsV2Activity, '
        'feedsV2Reaction: $feedsV2Reaction, '
        'flagLabels: $flagLabels, '
        'flagTypes: $flagTypes, '
        'flags: $flags, '
        'flagsCount: $flagsCount, '
        'hasImage: $hasImage, '
        'hasText: $hasText, '
        'hasVideo: $hasVideo, '
        'id: $id, '
        'languages: $languages, '
        'message: $message, '
        'moderationPayload: $moderationPayload, '
        'moderationPayloadHash: $moderationPayloadHash, '
        'reaction: $reaction, '
        'recommendedAction: $recommendedAction, '
        'reporterIds: $reporterIds, '
        'reviewedBy: $reviewedBy, '
        'severity: $severity, '
        'status: $status, '
        'teams: $teams, '
        'updatedAt: $updatedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ReviewQueueItem &&
        other.actions == actions &&
        other.activity == activity &&
        other.aiTextSeverity == aiTextSeverity &&
        other.assignedTo == assignedTo &&
        other.bans == bans &&
        other.bounceCount == bounceCount &&
        other.call == call &&
        other.configKey == configKey &&
        other.contentChanged == contentChanged &&
        other.createdAt == createdAt &&
        other.entityCreator == entityCreator &&
        other.entityId == entityId &&
        other.entityType == entityType &&
        other.feedsV2Activity == feedsV2Activity &&
        other.feedsV2Reaction == feedsV2Reaction &&
        other.flagLabels == flagLabels &&
        other.flagTypes == flagTypes &&
        other.flags == flags &&
        other.flagsCount == flagsCount &&
        other.hasImage == hasImage &&
        other.hasText == hasText &&
        other.hasVideo == hasVideo &&
        other.id == id &&
        other.languages == languages &&
        other.message == message &&
        other.moderationPayload == moderationPayload &&
        other.moderationPayloadHash == moderationPayloadHash &&
        other.reaction == reaction &&
        other.recommendedAction == recommendedAction &&
        other.reporterIds == reporterIds &&
        other.reviewedBy == reviewedBy &&
        other.severity == severity &&
        other.status == status &&
        other.teams == teams &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      actions,
      activity,
      aiTextSeverity,
      assignedTo,
      bans,
      bounceCount,
      call,
      configKey,
      contentChanged,
      createdAt,
      entityCreator,
      entityId,
      entityType,
      feedsV2Activity,
      feedsV2Reaction,
      flagLabels,
      flagTypes,
      flags,
      flagsCount,
      hasImage,
      hasText,
      hasVideo,
      id,
      languages,
      message,
      moderationPayload,
      moderationPayloadHash,
      reaction,
      recommendedAction,
      reporterIds,
      reviewedBy,
      severity,
      status,
      teams,
      updatedAt,
    ]);
  }
}
