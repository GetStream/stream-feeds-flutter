// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

import 'package:json_annotation/json_annotation.dart';
import '../models.dart';

part 'channel_member.g.dart';

@JsonEnum(alwaysCreate: true)
enum ChannelMemberRoleEnum {
  @JsonValue('admin')
  admin,
  @JsonValue('member')
  member,
  @JsonValue('moderator')
  moderator,
  @JsonValue('owner')
  owner,
  unknown;
}

@JsonSerializable()
class ChannelMember {
  const ChannelMember({
    this.archivedAt,
    this.banExpires,
    required this.banned,
    required this.channelRole,
    required this.createdAt,
    required this.custom,
    this.deletedAt,
    this.inviteAcceptedAt,
    this.inviteRejectedAt,
    this.invited,
    this.isModerator,
    required this.notificationsMuted,
    this.pinnedAt,
    this.role,
    required this.shadowBanned,
    this.status,
    required this.updatedAt,
    this.user,
    this.userId,
  });
  @EpochDateTimeConverter()
  final DateTime? archivedAt;
  @EpochDateTimeConverter()
  final DateTime? banExpires;

  final bool banned;

  final String channelRole;
  @EpochDateTimeConverter()
  final DateTime createdAt;

  final Map<String, Object> custom;
  @EpochDateTimeConverter()
  final DateTime? deletedAt;
  @EpochDateTimeConverter()
  final DateTime? inviteAcceptedAt;
  @EpochDateTimeConverter()
  final DateTime? inviteRejectedAt;

  final bool? invited;

  final bool? isModerator;

  final bool notificationsMuted;
  @EpochDateTimeConverter()
  final DateTime? pinnedAt;

  final ChannelMemberRoleEnum? role;

  final bool shadowBanned;

  final String? status;
  @EpochDateTimeConverter()
  final DateTime updatedAt;

  final UserResponse? user;

  final String? userId;

  Map<String, dynamic> toJson() => _$ChannelMemberToJson(this);

  static ChannelMember fromJson(Map<String, dynamic> json) =>
      _$ChannelMemberFromJson(json);

  @override
  String toString() {
    return 'ChannelMember('
        'archivedAt: $archivedAt, '
        'banExpires: $banExpires, '
        'banned: $banned, '
        'channelRole: $channelRole, '
        'createdAt: $createdAt, '
        'custom: $custom, '
        'deletedAt: $deletedAt, '
        'inviteAcceptedAt: $inviteAcceptedAt, '
        'inviteRejectedAt: $inviteRejectedAt, '
        'invited: $invited, '
        'isModerator: $isModerator, '
        'notificationsMuted: $notificationsMuted, '
        'pinnedAt: $pinnedAt, '
        'role: $role, '
        'shadowBanned: $shadowBanned, '
        'status: $status, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ChannelMember &&
        other.archivedAt == archivedAt &&
        other.banExpires == banExpires &&
        other.banned == banned &&
        other.channelRole == channelRole &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.deletedAt == deletedAt &&
        other.inviteAcceptedAt == inviteAcceptedAt &&
        other.inviteRejectedAt == inviteRejectedAt &&
        other.invited == invited &&
        other.isModerator == isModerator &&
        other.notificationsMuted == notificationsMuted &&
        other.pinnedAt == pinnedAt &&
        other.role == role &&
        other.shadowBanned == shadowBanned &&
        other.status == status &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      archivedAt,
      banExpires,
      banned,
      channelRole,
      createdAt,
      custom,
      deletedAt,
      inviteAcceptedAt,
      inviteRejectedAt,
      invited,
      isModerator,
      notificationsMuted,
      pinnedAt,
      role,
      shadowBanned,
      status,
      updatedAt,
      user,
      userId,
    ]);
  }
}
