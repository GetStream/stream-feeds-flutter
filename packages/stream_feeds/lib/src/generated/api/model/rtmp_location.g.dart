// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class RTMPLocation {
  const RTMPLocation({
    required this.name,
    required this.streamKey,
    required this.streamUrl,
  });

  final String name;

  final String streamKey;

  final String streamUrl;

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'stream_key': streamKey,
      'stream_url': streamUrl,
    };
  }

  static RTMPLocation? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RTMPLocation(
        name: mapValueOfType<String>(json, r'name')!,
        streamKey: mapValueOfType<String>(json, r'stream_key')!,
        streamUrl: mapValueOfType<String>(json, r'stream_url')!,
      );
    }
    return null;
  }

  static List<RTMPLocation> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RTMPLocation>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RTMPLocation.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RTMPLocation('
        'name: $name, '
        'streamKey: $streamKey, '
        'streamUrl: $streamUrl, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RTMPLocation &&
        other.name == name &&
        other.streamKey == streamKey &&
        other.streamUrl == streamUrl;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      streamKey,
      streamUrl,
    ]);
  }
}
