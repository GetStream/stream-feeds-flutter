// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class EnrichedActivity {
  const EnrichedActivity({
    this.actor,
    this.foreignId,
    this.id,
    this.latestReactions,
    this.object,
    this.origin,
    this.ownReactions,
    this.reactionCounts,
    this.score,
    this.target,
    this.to,
    this.verb,
  });

  final Data? actor;

  final String? foreignId;

  final String? id;

  final Map<String, List<EnrichedReaction>>? latestReactions;

  final Data? object;

  final Data? origin;

  final Map<String, List<EnrichedReaction>>? ownReactions;

  final Map<String, int>? reactionCounts;

  final num? score;

  final Data? target;

  final List<String>? to;

  final String? verb;

  Map<String, dynamic> toJson() {
    return {
      'actor': actor,
      'foreign_id': foreignId,
      'id': id,
      'latest_reactions': latestReactions,
      'object': object,
      'origin': origin,
      'own_reactions': ownReactions,
      'reaction_counts': reactionCounts,
      'score': score,
      'target': target,
      'to': to,
      'verb': verb,
    };
  }

  static EnrichedActivity? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return EnrichedActivity(
        actor: Data.fromJson(json[r'actor'] ?? null),
        foreignId: mapValueOfType<String>(json, r'foreign_id', null),
        id: mapValueOfType<String>(json, r'id', null),
        latestReactions: mapCastOfType<String, List<EnrichedReaction>>(
            json, r'latest_reactions'),
        object: Data.fromJson(json[r'object'] ?? null),
        origin: Data.fromJson(json[r'origin'] ?? null),
        ownReactions: mapCastOfType<String, List<EnrichedReaction>>(
            json, r'own_reactions'),
        reactionCounts: mapCastOfType<String, int>(json, r'reaction_counts'),
        score: mapValueOfType<num>(json, r'score', null),
        target: Data.fromJson(json[r'target'] ?? null),
        to: json[r'to'] is Iterable
            ? (json[r'to'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        verb: mapValueOfType<String>(json, r'verb', null),
      );
    }
    return null;
  }

  static List<EnrichedActivity> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <EnrichedActivity>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = EnrichedActivity.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'EnrichedActivity('
        'actor: $actor, '
        'foreignId: $foreignId, '
        'id: $id, '
        'latestReactions: $latestReactions, '
        'object: $object, '
        'origin: $origin, '
        'ownReactions: $ownReactions, '
        'reactionCounts: $reactionCounts, '
        'score: $score, '
        'target: $target, '
        'to: $to, '
        'verb: $verb, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EnrichedActivity &&
        other.actor == actor &&
        other.foreignId == foreignId &&
        other.id == id &&
        other.latestReactions == latestReactions &&
        other.object == object &&
        other.origin == origin &&
        other.ownReactions == ownReactions &&
        other.reactionCounts == reactionCounts &&
        other.score == score &&
        other.target == target &&
        other.to == to &&
        other.verb == verb;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      actor,
      foreignId,
      id,
      latestReactions,
      object,
      origin,
      ownReactions,
      reactionCounts,
      score,
      target,
      to,
      verb,
    ]);
  }
}
