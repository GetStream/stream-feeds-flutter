// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// coverage:ignore-file
// ignore_for_file: unused_import, unnecessary_import, prefer_single_quotes, require_trailing_commas, unnecessary_raw_strings, public_member_api_docs

import 'package:stream_core/stream_core.dart' as core;

import '../models.dart';

abstract class WSEvent<T extends core.WsEvent> {
  const WSEvent(this.wrapped);

  final T wrapped;
  String get type;

  static WSEvent fromJson(Map<String, dynamic> json) {
    final eventType = json['type'];

    if (eventType == null || eventType is! String) {
      throw ArgumentError('Invalid or missing "type" field in JSON: $json');
    }

    return switch (eventType) {
      "app.updated" => _AppUpdatedEvent(AppUpdatedEvent.fromJson(json)),
      "feeds.activity.added" =>
        _ActivityAddedEvent(ActivityAddedEvent.fromJson(json)),
      "feeds.activity.deleted" =>
        _ActivityDeletedEvent(ActivityDeletedEvent.fromJson(json)),
      "feeds.activity.marked" =>
        _ActivityMarkEvent(ActivityMarkEvent.fromJson(json)),
      "feeds.activity.pinned" =>
        _ActivityPinnedEvent(ActivityPinnedEvent.fromJson(json)),
      "feeds.activity.reaction.added" =>
        _ActivityReactionAddedEvent(ActivityReactionAddedEvent.fromJson(json)),
      "feeds.activity.reaction.deleted" => _ActivityReactionDeletedEvent(
          ActivityReactionDeletedEvent.fromJson(json)),
      "feeds.activity.reaction.updated" => _ActivityReactionUpdatedEvent(
          ActivityReactionUpdatedEvent.fromJson(json)),
      "feeds.activity.removed_from_feed" => _ActivityRemovedFromFeedEvent(
          ActivityRemovedFromFeedEvent.fromJson(json)),
      "feeds.activity.unpinned" =>
        _ActivityUnpinnedEvent(ActivityUnpinnedEvent.fromJson(json)),
      "feeds.activity.updated" =>
        _ActivityUpdatedEvent(ActivityUpdatedEvent.fromJson(json)),
      "feeds.bookmark.added" =>
        _BookmarkAddedEvent(BookmarkAddedEvent.fromJson(json)),
      "feeds.bookmark.deleted" =>
        _BookmarkDeletedEvent(BookmarkDeletedEvent.fromJson(json)),
      "feeds.bookmark.updated" =>
        _BookmarkUpdatedEvent(BookmarkUpdatedEvent.fromJson(json)),
      "feeds.bookmark_folder.deleted" =>
        _BookmarkFolderDeletedEvent(BookmarkFolderDeletedEvent.fromJson(json)),
      "feeds.bookmark_folder.updated" =>
        _BookmarkFolderUpdatedEvent(BookmarkFolderUpdatedEvent.fromJson(json)),
      "feeds.comment.added" =>
        _CommentAddedEvent(CommentAddedEvent.fromJson(json)),
      "feeds.comment.deleted" =>
        _CommentDeletedEvent(CommentDeletedEvent.fromJson(json)),
      "feeds.comment.reaction.added" =>
        _CommentReactionAddedEvent(CommentReactionAddedEvent.fromJson(json)),
      "feeds.comment.reaction.deleted" => _CommentReactionDeletedEvent(
          CommentReactionDeletedEvent.fromJson(json)),
      "feeds.comment.reaction.updated" => _CommentReactionUpdatedEvent(
          CommentReactionUpdatedEvent.fromJson(json)),
      "feeds.comment.updated" =>
        _CommentUpdatedEvent(CommentUpdatedEvent.fromJson(json)),
      "feeds.feed.created" =>
        _FeedCreatedEvent(FeedCreatedEvent.fromJson(json)),
      "feeds.feed.deleted" =>
        _FeedDeletedEvent(FeedDeletedEvent.fromJson(json)),
      "feeds.feed.updated" =>
        _FeedUpdatedEvent(FeedUpdatedEvent.fromJson(json)),
      "feeds.feed_group.changed" =>
        _FeedGroupChangedEvent(FeedGroupChangedEvent.fromJson(json)),
      "feeds.feed_group.deleted" =>
        _FeedGroupDeletedEvent(FeedGroupDeletedEvent.fromJson(json)),
      "feeds.feed_member.added" =>
        _FeedMemberAddedEvent(FeedMemberAddedEvent.fromJson(json)),
      "feeds.feed_member.removed" =>
        _FeedMemberRemovedEvent(FeedMemberRemovedEvent.fromJson(json)),
      "feeds.feed_member.updated" =>
        _FeedMemberUpdatedEvent(FeedMemberUpdatedEvent.fromJson(json)),
      "feeds.follow.created" =>
        _FollowCreatedEvent(FollowCreatedEvent.fromJson(json)),
      "feeds.follow.deleted" =>
        _FollowDeletedEvent(FollowDeletedEvent.fromJson(json)),
      "feeds.follow.updated" =>
        _FollowUpdatedEvent(FollowUpdatedEvent.fromJson(json)),
      "feeds.notification_feed.updated" => _NotificationFeedUpdatedEvent(
          NotificationFeedUpdatedEvent.fromJson(json)),
      "feeds.poll.closed" =>
        _PollClosedFeedEvent(PollClosedFeedEvent.fromJson(json)),
      "feeds.poll.deleted" =>
        _PollDeletedFeedEvent(PollDeletedFeedEvent.fromJson(json)),
      "feeds.poll.updated" =>
        _PollUpdatedFeedEvent(PollUpdatedFeedEvent.fromJson(json)),
      "feeds.poll.vote_casted" =>
        _PollVoteCastedFeedEvent(PollVoteCastedFeedEvent.fromJson(json)),
      "feeds.poll.vote_changed" =>
        _PollVoteChangedFeedEvent(PollVoteChangedFeedEvent.fromJson(json)),
      "feeds.poll.vote_removed" =>
        _PollVoteRemovedFeedEvent(PollVoteRemovedFeedEvent.fromJson(json)),
      "health.check" => _HealthCheckEvent(HealthCheckEvent.fromJson(json)),
      "moderation.custom_action" => _ModerationCustomActionEvent(
          ModerationCustomActionEvent.fromJson(json)),
      "moderation.flagged" =>
        _ModerationFlaggedEvent(ModerationFlaggedEvent.fromJson(json)),
      "moderation.mark_reviewed" => _ModerationMarkReviewedEvent(
          ModerationMarkReviewedEvent.fromJson(json)),
      "user.banned" => _UserBannedEvent(UserBannedEvent.fromJson(json)),
      "user.deactivated" =>
        _UserDeactivatedEvent(UserDeactivatedEvent.fromJson(json)),
      "user.muted" => _UserMutedEvent(UserMutedEvent.fromJson(json)),
      "user.reactivated" =>
        _UserReactivatedEvent(UserReactivatedEvent.fromJson(json)),
      "user.updated" => _UserUpdatedEvent(UserUpdatedEvent.fromJson(json)),
      _ => _UnknownWSEvent(UnknownWSEvent(eventType, json)),
    };
  }
}

class _AppUpdatedEvent extends WSEvent<AppUpdatedEvent> {
  const _AppUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityAddedEvent extends WSEvent<ActivityAddedEvent> {
  const _ActivityAddedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityDeletedEvent extends WSEvent<ActivityDeletedEvent> {
  const _ActivityDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityMarkEvent extends WSEvent<ActivityMarkEvent> {
  const _ActivityMarkEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityPinnedEvent extends WSEvent<ActivityPinnedEvent> {
  const _ActivityPinnedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityReactionAddedEvent extends WSEvent<ActivityReactionAddedEvent> {
  const _ActivityReactionAddedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityReactionDeletedEvent
    extends WSEvent<ActivityReactionDeletedEvent> {
  const _ActivityReactionDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityReactionUpdatedEvent
    extends WSEvent<ActivityReactionUpdatedEvent> {
  const _ActivityReactionUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityRemovedFromFeedEvent
    extends WSEvent<ActivityRemovedFromFeedEvent> {
  const _ActivityRemovedFromFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityUnpinnedEvent extends WSEvent<ActivityUnpinnedEvent> {
  const _ActivityUnpinnedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ActivityUpdatedEvent extends WSEvent<ActivityUpdatedEvent> {
  const _ActivityUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _BookmarkAddedEvent extends WSEvent<BookmarkAddedEvent> {
  const _BookmarkAddedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _BookmarkDeletedEvent extends WSEvent<BookmarkDeletedEvent> {
  const _BookmarkDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _BookmarkUpdatedEvent extends WSEvent<BookmarkUpdatedEvent> {
  const _BookmarkUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _BookmarkFolderDeletedEvent extends WSEvent<BookmarkFolderDeletedEvent> {
  const _BookmarkFolderDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _BookmarkFolderUpdatedEvent extends WSEvent<BookmarkFolderUpdatedEvent> {
  const _BookmarkFolderUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _CommentAddedEvent extends WSEvent<CommentAddedEvent> {
  const _CommentAddedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _CommentDeletedEvent extends WSEvent<CommentDeletedEvent> {
  const _CommentDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _CommentReactionAddedEvent extends WSEvent<CommentReactionAddedEvent> {
  const _CommentReactionAddedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _CommentReactionDeletedEvent
    extends WSEvent<CommentReactionDeletedEvent> {
  const _CommentReactionDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _CommentReactionUpdatedEvent
    extends WSEvent<CommentReactionUpdatedEvent> {
  const _CommentReactionUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _CommentUpdatedEvent extends WSEvent<CommentUpdatedEvent> {
  const _CommentUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedCreatedEvent extends WSEvent<FeedCreatedEvent> {
  const _FeedCreatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedDeletedEvent extends WSEvent<FeedDeletedEvent> {
  const _FeedDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedUpdatedEvent extends WSEvent<FeedUpdatedEvent> {
  const _FeedUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedGroupChangedEvent extends WSEvent<FeedGroupChangedEvent> {
  const _FeedGroupChangedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedGroupDeletedEvent extends WSEvent<FeedGroupDeletedEvent> {
  const _FeedGroupDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedMemberAddedEvent extends WSEvent<FeedMemberAddedEvent> {
  const _FeedMemberAddedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedMemberRemovedEvent extends WSEvent<FeedMemberRemovedEvent> {
  const _FeedMemberRemovedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FeedMemberUpdatedEvent extends WSEvent<FeedMemberUpdatedEvent> {
  const _FeedMemberUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FollowCreatedEvent extends WSEvent<FollowCreatedEvent> {
  const _FollowCreatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FollowDeletedEvent extends WSEvent<FollowDeletedEvent> {
  const _FollowDeletedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _FollowUpdatedEvent extends WSEvent<FollowUpdatedEvent> {
  const _FollowUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _NotificationFeedUpdatedEvent
    extends WSEvent<NotificationFeedUpdatedEvent> {
  const _NotificationFeedUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _PollClosedFeedEvent extends WSEvent<PollClosedFeedEvent> {
  const _PollClosedFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _PollDeletedFeedEvent extends WSEvent<PollDeletedFeedEvent> {
  const _PollDeletedFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _PollUpdatedFeedEvent extends WSEvent<PollUpdatedFeedEvent> {
  const _PollUpdatedFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _PollVoteCastedFeedEvent extends WSEvent<PollVoteCastedFeedEvent> {
  const _PollVoteCastedFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _PollVoteChangedFeedEvent extends WSEvent<PollVoteChangedFeedEvent> {
  const _PollVoteChangedFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _PollVoteRemovedFeedEvent extends WSEvent<PollVoteRemovedFeedEvent> {
  const _PollVoteRemovedFeedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _HealthCheckEvent extends WSEvent<HealthCheckEvent> {
  const _HealthCheckEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ModerationCustomActionEvent
    extends WSEvent<ModerationCustomActionEvent> {
  const _ModerationCustomActionEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ModerationFlaggedEvent extends WSEvent<ModerationFlaggedEvent> {
  const _ModerationFlaggedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _ModerationMarkReviewedEvent
    extends WSEvent<ModerationMarkReviewedEvent> {
  const _ModerationMarkReviewedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _UserBannedEvent extends WSEvent<UserBannedEvent> {
  const _UserBannedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _UserDeactivatedEvent extends WSEvent<UserDeactivatedEvent> {
  const _UserDeactivatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _UserMutedEvent extends WSEvent<UserMutedEvent> {
  const _UserMutedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _UserReactivatedEvent extends WSEvent<UserReactivatedEvent> {
  const _UserReactivatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _UserUpdatedEvent extends WSEvent<UserUpdatedEvent> {
  const _UserUpdatedEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class _UnknownWSEvent extends WSEvent<UnknownWSEvent> {
  const _UnknownWSEvent(super.wrapped);

  @override
  String get type => wrapped.type;
}

class UnknownWSEvent extends core.WsEvent {
  const UnknownWSEvent(this.type, this.rawJson);

  final String type;
  final Map<String, Object?> rawJson;
}
