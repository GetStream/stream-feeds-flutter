// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class MessageReminder {
  const MessageReminder({
    this.channel,
    required this.channelCid,
    required this.createdAt,
    this.message,
    required this.messageId,
    this.remindAt,
    required this.taskId,
    required this.updatedAt,
    this.user,
    required this.userId,
  });

  final Channel? channel;

  final String channelCid;

  final DateTime createdAt;

  final Message? message;

  final String messageId;

  final DateTime? remindAt;

  final String taskId;

  final DateTime updatedAt;

  final User? user;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'channel': channel,
      'channel_cid': channelCid,
      'created_at': createdAt,
      'message': message,
      'message_id': messageId,
      'remind_at': remindAt,
      'task_id': taskId,
      'updated_at': updatedAt,
      'user': user,
      'user_id': userId,
    };
  }

  static MessageReminder? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return MessageReminder(
        channel: Channel.fromJson(json[r'channel'] ?? null),
        channelCid: mapValueOfType<String>(json, r'channel_cid')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        message: Message.fromJson(json[r'message'] ?? null),
        messageId: mapValueOfType<String>(json, r'message_id')!,
        remindAt: mapValueOfType<DateTime>(json, r'remind_at', null),
        taskId: mapValueOfType<String>(json, r'task_id')!,
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: User.fromJson(json[r'user'] ?? null),
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<MessageReminder> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <MessageReminder>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = MessageReminder.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'MessageReminder('
        'channel: $channel, '
        'channelCid: $channelCid, '
        'createdAt: $createdAt, '
        'message: $message, '
        'messageId: $messageId, '
        'remindAt: $remindAt, '
        'taskId: $taskId, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is MessageReminder &&
        other.channel == channel &&
        other.channelCid == channelCid &&
        other.createdAt == createdAt &&
        other.message == message &&
        other.messageId == messageId &&
        other.remindAt == remindAt &&
        other.taskId == taskId &&
        other.updatedAt == updatedAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      channel,
      channelCid,
      createdAt,
      message,
      messageId,
      remindAt,
      taskId,
      updatedAt,
      user,
      userId,
    ]);
  }
}
