// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class STTEgressConfig {
  const STTEgressConfig({
    this.closedCaptionsEnabled,
    this.externalStorage,
    this.language,
    this.storageName,
    this.translationLanguages,
    this.translationsEnabled,
    this.uploadTranscriptions,
    this.whisperServerBaseUrl,
  });

  final bool? closedCaptionsEnabled;

  final ExternalStorage? externalStorage;

  final String? language;

  final String? storageName;

  final List<String>? translationLanguages;

  final bool? translationsEnabled;

  final bool? uploadTranscriptions;

  final String? whisperServerBaseUrl;

  Map<String, dynamic> toJson() {
    return {
      'closed_captions_enabled': closedCaptionsEnabled,
      'external_storage': externalStorage,
      'language': language,
      'storage_name': storageName,
      'translation_languages': translationLanguages,
      'translations_enabled': translationsEnabled,
      'upload_transcriptions': uploadTranscriptions,
      'whisper_server_base_url': whisperServerBaseUrl,
    };
  }

  static STTEgressConfig? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return STTEgressConfig(
        closedCaptionsEnabled:
            mapValueOfType<bool>(json, r'closed_captions_enabled', null),
        externalStorage:
            ExternalStorage.fromJson(json[r'external_storage'] ?? null),
        language: mapValueOfType<String>(json, r'language', null),
        storageName: mapValueOfType<String>(json, r'storage_name', null),
        translationLanguages: json[r'translation_languages'] is Iterable
            ? (json[r'translation_languages'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        translationsEnabled:
            mapValueOfType<bool>(json, r'translations_enabled', null),
        uploadTranscriptions:
            mapValueOfType<bool>(json, r'upload_transcriptions', null),
        whisperServerBaseUrl:
            mapValueOfType<String>(json, r'whisper_server_base_url', null),
      );
    }
    return null;
  }

  static List<STTEgressConfig> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <STTEgressConfig>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = STTEgressConfig.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'STTEgressConfig('
        'closedCaptionsEnabled: $closedCaptionsEnabled, '
        'externalStorage: $externalStorage, '
        'language: $language, '
        'storageName: $storageName, '
        'translationLanguages: $translationLanguages, '
        'translationsEnabled: $translationsEnabled, '
        'uploadTranscriptions: $uploadTranscriptions, '
        'whisperServerBaseUrl: $whisperServerBaseUrl, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is STTEgressConfig &&
        other.closedCaptionsEnabled == closedCaptionsEnabled &&
        other.externalStorage == externalStorage &&
        other.language == language &&
        other.storageName == storageName &&
        other.translationLanguages == translationLanguages &&
        other.translationsEnabled == translationsEnabled &&
        other.uploadTranscriptions == uploadTranscriptions &&
        other.whisperServerBaseUrl == whisperServerBaseUrl;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      closedCaptionsEnabled,
      externalStorage,
      language,
      storageName,
      translationLanguages,
      translationsEnabled,
      uploadTranscriptions,
      whisperServerBaseUrl,
    ]);
  }
}
