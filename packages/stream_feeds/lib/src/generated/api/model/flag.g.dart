// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Flag {
  const Flag({
    required this.createdAt,
    this.custom,
    this.entityCreatorId,
    required this.entityId,
    required this.entityType,
    this.isStreamedContent,
    this.labels,
    this.moderationPayload,
    this.moderationPayloadHash,
    this.reason,
    required this.result,
    this.reviewQueueItem,
    this.reviewQueueItemId,
    this.type,
    required this.updatedAt,
    this.user,
  });

  final DateTime createdAt;

  final Map<String, Object>? custom;

  final String? entityCreatorId;

  final String entityId;

  final String entityType;

  final bool? isStreamedContent;

  final List<String>? labels;

  final ModerationPayload? moderationPayload;

  final String? moderationPayloadHash;

  final String? reason;

  final List<Map<String, Object>> result;

  final ReviewQueueItem? reviewQueueItem;

  final String? reviewQueueItemId;

  final String? type;

  final DateTime updatedAt;

  final User? user;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'custom': custom,
      'entity_creator_id': entityCreatorId,
      'entity_id': entityId,
      'entity_type': entityType,
      'is_streamed_content': isStreamedContent,
      'labels': labels,
      'moderation_payload': moderationPayload,
      'moderation_payload_hash': moderationPayloadHash,
      'reason': reason,
      'result': result,
      'review_queue_item': reviewQueueItem,
      'review_queue_item_id': reviewQueueItemId,
      'type': type,
      'updated_at': updatedAt,
      'user': user,
    };
  }

  static Flag? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Flag(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        custom: mapCastOfType<String, Object>(json, r'custom'),
        entityCreatorId:
            mapValueOfType<String>(json, r'entity_creator_id', null),
        entityId: mapValueOfType<String>(json, r'entity_id')!,
        entityType: mapValueOfType<String>(json, r'entity_type')!,
        isStreamedContent:
            mapValueOfType<bool>(json, r'is_streamed_content', null),
        labels: json[r'labels'] is Iterable
            ? (json[r'labels'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        moderationPayload:
            ModerationPayload.fromJson(json[r'moderation_payload'] ?? null),
        moderationPayloadHash:
            mapValueOfType<String>(json, r'moderation_payload_hash', null),
        reason: mapValueOfType<String>(json, r'reason', null),
        result: Map<String, Object>.listFromJson(json[r'result']),
        reviewQueueItem:
            ReviewQueueItem.fromJson(json[r'review_queue_item'] ?? null),
        reviewQueueItemId:
            mapValueOfType<String>(json, r'review_queue_item_id', null),
        type: mapValueOfType<String>(json, r'type', null),
        updatedAt: mapValueOfType<DateTime>(json, r'updated_at')!,
        user: User.fromJson(json[r'user'] ?? null),
      );
    }
    return null;
  }

  static List<Flag> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Flag>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Flag.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Flag('
        'createdAt: $createdAt, '
        'custom: $custom, '
        'entityCreatorId: $entityCreatorId, '
        'entityId: $entityId, '
        'entityType: $entityType, '
        'isStreamedContent: $isStreamedContent, '
        'labels: $labels, '
        'moderationPayload: $moderationPayload, '
        'moderationPayloadHash: $moderationPayloadHash, '
        'reason: $reason, '
        'result: $result, '
        'reviewQueueItem: $reviewQueueItem, '
        'reviewQueueItemId: $reviewQueueItemId, '
        'type: $type, '
        'updatedAt: $updatedAt, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Flag &&
        other.createdAt == createdAt &&
        other.custom == custom &&
        other.entityCreatorId == entityCreatorId &&
        other.entityId == entityId &&
        other.entityType == entityType &&
        other.isStreamedContent == isStreamedContent &&
        other.labels == labels &&
        other.moderationPayload == moderationPayload &&
        other.moderationPayloadHash == moderationPayloadHash &&
        other.reason == reason &&
        other.result == result &&
        other.reviewQueueItem == reviewQueueItem &&
        other.reviewQueueItemId == reviewQueueItemId &&
        other.type == type &&
        other.updatedAt == updatedAt &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      custom,
      entityCreatorId,
      entityId,
      entityType,
      isStreamedContent,
      labels,
      moderationPayload,
      moderationPayloadHash,
      reason,
      result,
      reviewQueueItem,
      reviewQueueItemId,
      type,
      updatedAt,
      user,
    ]);
  }
}
