// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class BlockedUserResponse {
  const BlockedUserResponse({
    required this.blockedUser,
    required this.blockedUserId,
    required this.createdAt,
    required this.user,
    required this.userId,
  });

  final UserResponse blockedUser;

  final String blockedUserId;

  final DateTime createdAt;

  final UserResponse user;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'blocked_user': blockedUser,
      'blocked_user_id': blockedUserId,
      'created_at': createdAt,
      'user': user,
      'user_id': userId,
    };
  }

  static BlockedUserResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BlockedUserResponse(
        blockedUser: UserResponse.fromJson(json[r'blocked_user'])!,
        blockedUserId: mapValueOfType<String>(json, r'blocked_user_id')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        user: UserResponse.fromJson(json[r'user'])!,
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<BlockedUserResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BlockedUserResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BlockedUserResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BlockedUserResponse('
        'blockedUser: $blockedUser, '
        'blockedUserId: $blockedUserId, '
        'createdAt: $createdAt, '
        'user: $user, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BlockedUserResponse &&
        other.blockedUser == blockedUser &&
        other.blockedUserId == blockedUserId &&
        other.createdAt == createdAt &&
        other.user == user &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      blockedUser,
      blockedUserId,
      createdAt,
      user,
      userId,
    ]);
  }
}
