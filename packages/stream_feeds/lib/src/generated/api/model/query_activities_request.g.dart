// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class QueryActivitiesRequest {
  const QueryActivitiesRequest({
    this.filter,
    this.limit,
    this.next,
    this.prev,
    this.sort,
  });

  final Map<String, Object>? filter;

  final int? limit;

  final String? next;

  final String? prev;

  final List<SortParamRequest>? sort;

  Map<String, dynamic> toJson() {
    return {
      'filter': filter,
      'limit': limit,
      'next': next,
      'prev': prev,
      'sort': sort,
    };
  }

  static QueryActivitiesRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return QueryActivitiesRequest(
        filter: mapCastOfType<String, Object>(json, r'filter'),
        limit: mapValueOfType<int>(json, r'limit', null),
        next: mapValueOfType<String>(json, r'next', null),
        prev: mapValueOfType<String>(json, r'prev', null),
        sort: SortParamRequest.listFromJson(json[r'sort']),
      );
    }
    return null;
  }

  static List<QueryActivitiesRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <QueryActivitiesRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = QueryActivitiesRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'QueryActivitiesRequest('
        'filter: $filter, '
        'limit: $limit, '
        'next: $next, '
        'prev: $prev, '
        'sort: $sort, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is QueryActivitiesRequest &&
        other.filter == filter &&
        other.limit == limit &&
        other.next == next &&
        other.prev == prev &&
        other.sort == sort;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      filter,
      limit,
      next,
      prev,
      sort,
    ]);
  }
}
