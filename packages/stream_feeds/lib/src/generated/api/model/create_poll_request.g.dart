// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

enum CreatePollRequestVotingVisibilityEnum {
  anonymous('anonymous'),
  public('public'),
  unknown('_unknown');

  const CreatePollRequestVotingVisibilityEnum(this.value);
  final String value;

  static CreatePollRequestVotingVisibilityEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'anonymous':
        return CreatePollRequestVotingVisibilityEnum.anonymous;
      case 'public':
        return CreatePollRequestVotingVisibilityEnum.public;
      default:
        return CreatePollRequestVotingVisibilityEnum.unknown;
    }
  }
}

@immutable
class CreatePollRequest {
  const CreatePollRequest({
    this.allowAnswers,
    this.allowUserSuggestedOptions,
    this.custom,
    this.description,
    this.enforceUniqueVote,
    this.id,
    this.isClosed,
    this.maxVotesAllowed,
    required this.name,
    this.options,
    this.votingVisibility,
  });

  final bool? allowAnswers;

  final bool? allowUserSuggestedOptions;

  final Map<String, Object>? custom;

  final String? description;

  final bool? enforceUniqueVote;

  final String? id;

  final bool? isClosed;

  final int? maxVotesAllowed;

  final String name;

  final List<PollOptionInput>? options;

  final CreatePollRequestVotingVisibilityEnum? votingVisibility;

  Map<String, dynamic> toJson() {
    return {
      'allow_answers': allowAnswers,
      'allow_user_suggested_options': allowUserSuggestedOptions,
      'Custom': custom,
      'description': description,
      'enforce_unique_vote': enforceUniqueVote,
      'id': id,
      'is_closed': isClosed,
      'max_votes_allowed': maxVotesAllowed,
      'name': name,
      'options': options,
      'voting_visibility': votingVisibility,
    };
  }

  static CreatePollRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CreatePollRequest(
        allowAnswers: mapValueOfType<bool>(json, r'allow_answers', null),
        allowUserSuggestedOptions:
            mapValueOfType<bool>(json, r'allow_user_suggested_options', null),
        custom: mapCastOfType<String, Object>(json, r'Custom'),
        description: mapValueOfType<String>(json, r'description', null),
        enforceUniqueVote:
            mapValueOfType<bool>(json, r'enforce_unique_vote', null),
        id: mapValueOfType<String>(json, r'id', null),
        isClosed: mapValueOfType<bool>(json, r'is_closed', null),
        maxVotesAllowed: mapValueOfType<int>(json, r'max_votes_allowed', null),
        name: mapValueOfType<String>(json, r'name')!,
        options: PollOptionInput.listFromJson(json[r'options']),
        votingVisibility: CreatePollRequestVotingVisibilityEnum.fromValue(
            json['voting_visibility']),
      );
    }
    return null;
  }

  static List<CreatePollRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CreatePollRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CreatePollRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CreatePollRequest('
        'allowAnswers: $allowAnswers, '
        'allowUserSuggestedOptions: $allowUserSuggestedOptions, '
        'custom: $custom, '
        'description: $description, '
        'enforceUniqueVote: $enforceUniqueVote, '
        'id: $id, '
        'isClosed: $isClosed, '
        'maxVotesAllowed: $maxVotesAllowed, '
        'name: $name, '
        'options: $options, '
        'votingVisibility: $votingVisibility, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CreatePollRequest &&
        other.allowAnswers == allowAnswers &&
        other.allowUserSuggestedOptions == allowUserSuggestedOptions &&
        other.custom == custom &&
        other.description == description &&
        other.enforceUniqueVote == enforceUniqueVote &&
        other.id == id &&
        other.isClosed == isClosed &&
        other.maxVotesAllowed == maxVotesAllowed &&
        other.name == name &&
        other.options == options &&
        other.votingVisibility == votingVisibility;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      allowAnswers,
      allowUserSuggestedOptions,
      custom,
      description,
      enforceUniqueVote,
      id,
      isClosed,
      maxVotesAllowed,
      name,
      options,
      votingVisibility,
    ]);
  }
}
