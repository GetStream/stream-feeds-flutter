// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class Quality {
  const Quality({
    this.bitdepth,
    this.framerate,
    this.height,
    this.name,
    this.videoBitrate,
    this.width,
  });

  final int? bitdepth;

  final int? framerate;

  final int? height;

  final String? name;

  final int? videoBitrate;

  final int? width;

  Map<String, dynamic> toJson() {
    return {
      'bitdepth': bitdepth,
      'framerate': framerate,
      'height': height,
      'name': name,
      'video_bitrate': videoBitrate,
      'width': width,
    };
  }

  static Quality? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Quality(
        bitdepth: mapValueOfType<int>(json, r'bitdepth', null),
        framerate: mapValueOfType<int>(json, r'framerate', null),
        height: mapValueOfType<int>(json, r'height', null),
        name: mapValueOfType<String>(json, r'name', null),
        videoBitrate: mapValueOfType<int>(json, r'video_bitrate', null),
        width: mapValueOfType<int>(json, r'width', null),
      );
    }
    return null;
  }

  static List<Quality> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Quality>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Quality.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Quality('
        'bitdepth: $bitdepth, '
        'framerate: $framerate, '
        'height: $height, '
        'name: $name, '
        'videoBitrate: $videoBitrate, '
        'width: $width, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Quality &&
        other.bitdepth == bitdepth &&
        other.framerate == framerate &&
        other.height == height &&
        other.name == name &&
        other.videoBitrate == videoBitrate &&
        other.width == width;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      bitdepth,
      framerate,
      height,
      name,
      videoBitrate,
      width,
    ]);
  }
}
