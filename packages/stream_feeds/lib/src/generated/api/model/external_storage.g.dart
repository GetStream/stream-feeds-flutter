// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unnecessary_null_in_if_null_operators
// ignore_for_file: public_member_api_docs
// ignore_for_file: prefer_single_quotes
// ignore_for_file: require_trailing_commas

part of openapi.api;

@immutable
class ExternalStorage {
  const ExternalStorage({
    this.absAccountName,
    this.absClientId,
    this.absClientSecret,
    this.absTenantId,
    this.bucket,
    this.gcsCredentials,
    this.path,
    this.s3ApiKey,
    this.s3CustomEndpoint,
    this.s3Region,
    this.s3SecretKey,
    this.storageName,
    this.storageType,
  });

  final String? absAccountName;

  final String? absClientId;

  final String? absClientSecret;

  final String? absTenantId;

  final String? bucket;

  final String? gcsCredentials;

  final String? path;

  final String? s3ApiKey;

  final String? s3CustomEndpoint;

  final String? s3Region;

  final String? s3SecretKey;

  final String? storageName;

  final int? storageType;

  Map<String, dynamic> toJson() {
    return {
      'abs_account_name': absAccountName,
      'abs_client_id': absClientId,
      'abs_client_secret': absClientSecret,
      'abs_tenant_id': absTenantId,
      'bucket': bucket,
      'gcs_credentials': gcsCredentials,
      'path': path,
      's3_api_key': s3ApiKey,
      's3_custom_endpoint': s3CustomEndpoint,
      's3_region': s3Region,
      's3_secret_key': s3SecretKey,
      'storage_name': storageName,
      'storage_type': storageType,
    };
  }

  static ExternalStorage? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ExternalStorage(
        absAccountName: mapValueOfType<String>(json, r'abs_account_name', null),
        absClientId: mapValueOfType<String>(json, r'abs_client_id', null),
        absClientSecret:
            mapValueOfType<String>(json, r'abs_client_secret', null),
        absTenantId: mapValueOfType<String>(json, r'abs_tenant_id', null),
        bucket: mapValueOfType<String>(json, r'bucket', null),
        gcsCredentials: mapValueOfType<String>(json, r'gcs_credentials', null),
        path: mapValueOfType<String>(json, r'path', null),
        s3ApiKey: mapValueOfType<String>(json, r's3_api_key', null),
        s3CustomEndpoint:
            mapValueOfType<String>(json, r's3_custom_endpoint', null),
        s3Region: mapValueOfType<String>(json, r's3_region', null),
        s3SecretKey: mapValueOfType<String>(json, r's3_secret_key', null),
        storageName: mapValueOfType<String>(json, r'storage_name', null),
        storageType: mapValueOfType<int>(json, r'storage_type', null),
      );
    }
    return null;
  }

  static List<ExternalStorage> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ExternalStorage>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ExternalStorage.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ExternalStorage('
        'absAccountName: $absAccountName, '
        'absClientId: $absClientId, '
        'absClientSecret: $absClientSecret, '
        'absTenantId: $absTenantId, '
        'bucket: $bucket, '
        'gcsCredentials: $gcsCredentials, '
        'path: $path, '
        's3ApiKey: $s3ApiKey, '
        's3CustomEndpoint: $s3CustomEndpoint, '
        's3Region: $s3Region, '
        's3SecretKey: $s3SecretKey, '
        'storageName: $storageName, '
        'storageType: $storageType, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ExternalStorage &&
        other.absAccountName == absAccountName &&
        other.absClientId == absClientId &&
        other.absClientSecret == absClientSecret &&
        other.absTenantId == absTenantId &&
        other.bucket == bucket &&
        other.gcsCredentials == gcsCredentials &&
        other.path == path &&
        other.s3ApiKey == s3ApiKey &&
        other.s3CustomEndpoint == s3CustomEndpoint &&
        other.s3Region == s3Region &&
        other.s3SecretKey == s3SecretKey &&
        other.storageName == storageName &&
        other.storageType == storageType;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      absAccountName,
      absClientId,
      absClientSecret,
      absTenantId,
      bucket,
      gcsCredentials,
      path,
      s3ApiKey,
      s3CustomEndpoint,
      s3Region,
      s3SecretKey,
      storageName,
      storageType,
    ]);
  }
}
