---
description: Stream Feeds API Overview
globs: ["**/api/**/*.dart", "**/*_api.dart", "**/client/*.dart"]
alwaysApply: false
---

# Stream Feeds API Overview

## What is Stream Feeds?

Stream Feeds is a scalable, real-time activity feed service designed by Stream for building social features and activity streams. This SDK targets the Stream Feeds API v3.0, providing a comprehensive interface to create, manage, and consume activity feeds with real-time updates and social interactions.

## Key Concepts

### Data Types

Stream Feeds handles several types of data:

- **Activities**: Core feed items with actor, verb, object, and target
- **Feeds**: Collections of activities (user feeds, timeline feeds, notification feeds)
- **Users**: Actors who perform activities
- **Reactions**: User interactions with activities (likes, comments, etc.)
- **Follows**: Relationships between feeds
- **Real-time Events**: Live updates via WebSocket connections

### Activity Structure

Activities follow a structured format based on the activity streams specification:

```json
{
  "id": "activity-123",
  "actor": "user:john",
  "verb": "post", 
  "object": "image:sunset.jpg",
  "target": "album:vacation",
  "time": "2024-08-12T10:30:00Z",
  "extraData": {
    "message": "Beautiful sunset!",
    "location": "Malibu Beach",
    "tags": ["sunset", "beach", "vacation"]
  }
}
```

### Feed Types

Different feed types serve various purposes:

- **User Feeds** (`user:john`): Personal activity feeds
- **Timeline Feeds** (`timeline:john`): Aggregated feeds from follows
- **Notification Feeds** (`notification:john`): Notification streams
- **Custom Feeds** (`trending:tech`): Custom categorized feeds

## API v3 Core Features

### For-You Feeds
Multi-source aggregation with ranking algorithms for personalized content discovery.

### Comments API
Reddit-style threading and voting system with:
- Nested comment replies with depth tracking
- Comment reactions and @mentions
- Real-time comment updates via WebSocket

### Stories
Ephemeral content support with automatic expiration and view tracking.

### Polls
Interactive polling system with:
- Multiple choice options
- Vote tracking and aggregation
- Time-based poll closure

### Bookmarking
Save and organize activities with optional collections for grouping.

### Feed Management

#### Feed Members
Membership and access controls with role-based permissions:
- Admin, moderator, and member roles
- Invitation and approval workflows
- Permission-based access control

#### Activity Search
Advanced search and filtering capabilities:
- Full-text search across activity content
- Filter by actor, verb, object, or custom fields
- Sorting and pagination support

### Push Notifications
Mobile notification integration for real-time engagement.

### GDPR Compliance
Built-in data management and privacy features:
- User data export
- Account deletion and anonymization
- Privacy-focused data handling

## Real-time Features

### WebSocket Events
Live activity updates and notifications through persistent connections:

- **Activity Events**: Added, updated, deleted activities
- **Reaction Events**: New reactions and reaction updates
- **Follow Events**: New follows and unfollows
- **Member Events**: Feed membership changes

### Event Processing
Structured event handling for real-time state synchronization in the SDK.

## API Integration

### Authentication
Stream Feeds uses API keys and user tokens for authentication:

```dart
final client = StreamFeedsClient(
  apiKey: ApiKey('your-api-key'),
  user: User(id: 'user-123', extraData: {'name': 'John'}),
  tokenProvider: UserTokenProvider.static('user-token'),
);
```

### Error Handling
The API provides structured error responses with appropriate HTTP status codes:

- **400 Bad Request**: Invalid request parameters
- **401 Unauthorized**: Authentication required
- **403 Forbidden**: Insufficient permissions
- **404 Not Found**: Resource not found
- **429 Too Many Requests**: Rate limit exceeded
- **500 Internal Server Error**: Server-side errors

### Rate Limiting
Built-in rate limiting with retry-after headers for graceful handling of traffic spikes.

## Performance Features

API v3 includes several performance improvements:

- **Batch Operations**: Bulk activity creation and updates
- **Connection Pooling**: Efficient HTTP connection management
- **Circuit Breaker**: Automatic failure recovery
- **Compression**: Gzip compression for reduced bandwidth

## Client-Side SDK Support

Stream Feeds provides SDKs for multiple platforms:

- **Flutter/Dart**: This SDK for cross-platform Dart applications
- **JavaScript**: Web and Node.js applications
- **iOS**: Native Swift SDK
- **Android**: Native Kotlin SDK
- **React Native**: Cross-platform mobile development

## API Versioning

- **Current Version**: v3.0 (Alpha Release)
- **Compatibility**: N-2 version support policy
- **Migration**: Gradual migration path from v2.x
- **Deprecation**: Clear deprecation timeline for legacy features

## Integration Patterns

### Basic Feed Operations
```dart
// Create a feed
final feed = client.feed(FeedId(group: 'user', id: 'john'));

// Add an activity
await feed.addActivity(FeedAddActivityRequest(
  verb: 'post',
  object: 'Hello, World!',
));

// Get activities
final result = await feed.getOrCreate();
```

### Social Interactions
```dart
// Add a reaction
await feed.addReaction('activity-id', AddReactionRequest(
  kind: 'like',
));

// Add a comment
await feed.addComment('activity-id', AddCommentRequest(
  text: 'Great post!',
));

// Follow another feed
await feed.follow(SingleFollowRequest(
  targetFeedId: 'timeline:alice',
));
```

### Real-time Updates
```dart
// Listen to real-time events
await client.connect();

feed.addListener(() {
  print('Activities updated: ${feed.state.activities.length}');
});
```

## External Resources

- [Stream Feeds Documentation](https://getstream.io/feeds/docs/)
- [Stream Dashboard](https://dashboard.getstream.io/)
- [API Reference](https://getstream.io/feeds/docs/api/)
- [GitHub Repository](https://github.com/GetStream/stream-feeds-flutter)

## Integration Considerations

When working with the Stream Feeds API:

- **Feed Design**: Choose appropriate feed types (user, timeline, notification) based on your use case
- **Real-time Strategy**: Leverage WebSocket connections for live updates and notifications
- **Performance**: Utilize batch operations for optimal performance
- **Error Handling**: Implement robust retry logic and graceful degradation
- **Authentication**: Follow proper API key and user token management practices
- **Rate Limiting**: Design your application to respect API rate limits
- **Scalability**: Plan for growth with efficient pagination and connection management